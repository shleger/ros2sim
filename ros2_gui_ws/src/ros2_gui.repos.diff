.........................
=== ./src/actuator_msgs (git) ===
=== ./src/interactive_markers (git) ===
=== ./src/joint_state_publisher (git) ===
=== ./src/laser_geometry (git) ===
=== ./src/navigation_msgs (git) ===
=== ./src/resource_retriever (git) ===
=== ./src/ros_gz (git) ===
diff --git a/ros_gz_bridge/CHANGELOG.rst b/ros_gz_bridge/CHANGELOG.rst
index 4a086e2..a1ca836 100644
--- a/ros_gz_bridge/CHANGELOG.rst
+++ b/ros_gz_bridge/CHANGELOG.rst
@@ -122,7 +122,7 @@ Changelog for package ros_gz_bridge
 * Edifice support (`#140 <https://github.com/gazebosim/ros_gz/issues/140>`_)
 * Add JointTrajectory message conversion (`#121 <https://github.com/gazebosim/ros_gz/issues/121>`_)
   Conversion between
-  - ignition::msgs::JointTrajectory
+  - gz::msgs::JointTrajectory
   - trajectory_msgs::msg::JointTrajectory
 * Add TFMessage / Pose_V and Float64 / Double conversions (`#117 <https://github.com/gazebosim/ros_gz/issues/117>`_)
   Addresses issue `#116 <https://github.com/gazebosim/ros_gz/issues/116>`_
@@ -233,8 +233,8 @@ Changelog for package ros_gz_bridge
 0.3.0 (2019-06-28)
 ------------------
 * 0.2.0
-* Conversion between nav_msgs/Odometry and ignition::msgs::Odometry (`#22 <https://github.com/osrf/ros1_ign_bridge/issues/22>`_)
-  * Conversion between nav_msgs/Odometry and ignition::msgs::Odometry.
+* Conversion between nav_msgs/Odometry and gz::msgs::Odometry (`#22 <https://github.com/osrf/ros1_ign_bridge/issues/22>`_)
+  * Conversion between nav_msgs/Odometry and gz::msgs::Odometry.
   * Update documentation.
   * More time to run tests
   * Cleaning test_utils.
diff --git a/ros_gz_bridge/CMakeLists.txt b/ros_gz_bridge/CMakeLists.txt
index 2d0974a..4dc01e8 100644
--- a/ros_gz_bridge/CMakeLists.txt
+++ b/ros_gz_bridge/CMakeLists.txt
@@ -43,15 +43,15 @@ elseif("$ENV{GZ_VERSION}" STREQUAL "garden")
   message(STATUS "Compiling against Gazebo Garden")
 # Default to Fortress
 else()
-  find_package(ignition-transport11 REQUIRED)
-  find_package(ignition-msgs8 REQUIRED)
+endif()
+  find_package(gz-transport13 REQUIRED)
+  find_package(gz-msgs10 REQUIRED)
 
-  set(GZ_TARGET_PREFIX ignition)
-  set(GZ_MSGS_VER ${ignition-msgs8_VERSION_MAJOR})
-  set(GZ_TRANSPORT_VER ${ignition-transport11_VERSION_MAJOR})
+  set(GZ_TARGET_PREFIX gz)
+  set(GZ_MSGS_VER 10)
+  set(GZ_TRANSPORT_VER 13)
 
-  message(STATUS "Compiling against Ignition Fortress")
-endif()
+  message(STATUS "Compiling against Gazebo Garden")
 
 set(GZ_MSGS_VERSION_MAJOR ${${GZ_TARGET_PREFIX}-msgs${GZ_MSGS_VER}_VERSION_MAJOR})
 set(GZ_MSGS_VERSION_MINOR ${${GZ_TARGET_PREFIX}-msgs${GZ_MSGS_VER}_VERSION_MINOR})
diff --git a/ros_gz_bridge/README.md b/ros_gz_bridge/README.md
index 11135cd..4aadec2 100644
--- a/ros_gz_bridge/README.md
+++ b/ros_gz_bridge/README.md
@@ -7,60 +7,60 @@ The following message types can be bridged for topics:
 
 | ROS type                             | Gazebo type                            |
 |--------------------------------------|:--------------------------------------:|
-| builtin_interfaces/msg/Time          | ignition::msgs::Time                   |
-| std_msgs/msg/Bool                    | ignition::msgs::Boolean                |
-| std_msgs/msg/ColorRGBA               | ignition::msgs::Color                  |
-| std_msgs/msg/Empty                   | ignition::msgs::Empty                  |
-| std_msgs/msg/Float32                 | ignition::msgs::Float                  |
-| std_msgs/msg/Float64                 | ignition::msgs::Double                 |
-| std_msgs/msg/Header                  | ignition::msgs::Header                 |
-| std_msgs/msg/Int32                   | ignition::msgs::Int32                  |
-| std_msgs/msg/UInt32                  | ignition::msgs::UInt32                 |
-| std_msgs/msg/String                  | ignition::msgs::StringMsg              |
-| geometry_msgs/msg/Wrench             | ignition::msgs::Wrench                 |
-| geometry_msgs/msg/WrenchStamped      | ignition::msgs::Wrench                 |
-| geometry_msgs/msg/Quaternion         | ignition::msgs::Quaternion             |
-| geometry_msgs/msg/Vector3            | ignition::msgs::Vector3d               |
-| geometry_msgs/msg/Point              | ignition::msgs::Vector3d               |
-| geometry_msgs/msg/Pose               | ignition::msgs::Pose                   |
-| geometry_msgs/msg/PoseArray          | ignition::msgs::Pose_V                 |
-| geometry_msgs/msg/PoseWithCovariance | ignition::msgs::PoseWithCovariance     |
-| geometry_msgs/msg/PoseStamped        | ignition::msgs::Pose                   |
-| geometry_msgs/msg/Transform          | ignition::msgs::Pose                   |
-| geometry_msgs/msg/TransformStamped   | ignition::msgs::Pose                   |
-| geometry_msgs/msg/Twist              | ignition::msgs::Twist                  |
-| geometry_msgs/msg/TwistWithCovariance| ignition::msgs::TwistWithCovariance    |
-| nav_msgs/msg/Odometry                | ignition::msgs::Odometry               |
-| nav_msgs/msg/Odometry                | ignition::msgs::OdometryWithCovariance |
-| rcl_interfaces/msg/ParameterValue    | ignition::msgs::Any                    |
-| ros_gz_interfaces/msg/Altimeter      | ignition::msgs::Altimeter              |
-| ros_gz_interfaces/msg/Contact        | ignition::msgs::Contact                |
-| ros_gz_interfaces/msg/Contacts       | ignition::msgs::Contacts               |
-| ros_gz_interfaces/msg/Dataframe      | ignition::msgs::Dataframe              |
-| ros_gz_interfaces/msg/Entity         | ignition::msgs::Entity                 |
-| ros_gz_interfaces/msg/Float32Array   | ignition::msgs::Float_V                |
-| ros_gz_interfaces/msg/GuiCamera      | ignition::msgs::GUICamera              |
-| ros_gz_interfaces/msg/JointWrench    | ignition::msgs::JointWrench            |
-| ros_gz_interfaces/msg/Light          | ignition::msgs::Light                  |
-| ros_gz_interfaces/msg/SensorNoise    | ignition::msgs::SensorNoise            |
-| ros_gz_interfaces/msg/StringVec      | ignition::msgs::StringMsg_V            |
-| ros_gz_interfaces/msg/TrackVisual    | ignition::msgs::TrackVisual            |
-| ros_gz_interfaces/msg/VideoRecord    | ignition::msgs::VideoRecord            |
-| ros_gz_interfaces/msg/WorldControl   | ignition::msgs::WorldControl           |
-| rosgraph_msgs/msg/Clock              | ignition::msgs::Clock                  |
-| sensor_msgs/msg/BatteryState         | ignition::msgs::BatteryState           |
-| sensor_msgs/msg/CameraInfo           | ignition::msgs::CameraInfo             |
-| sensor_msgs/msg/FluidPressure        | ignition::msgs::FluidPressure          |
-| sensor_msgs/msg/Imu                  | ignition::msgs::IMU                    |
-| sensor_msgs/msg/Image                | ignition::msgs::Image                  |
-| sensor_msgs/msg/JointState           | ignition::msgs::Model                  |
-| sensor_msgs/msg/Joy                  | ignition::msgs::Joy                    |
-| sensor_msgs/msg/LaserScan            | ignition::msgs::LaserScan              |
-| sensor_msgs/msg/MagneticField        | ignition::msgs::Magnetometer           |
-| sensor_msgs/msg/NavSatFix            | ignition::msgs::NavSat                 |
-| sensor_msgs/msg/PointCloud2          | ignition::msgs::PointCloudPacked       |
-| tf2_msgs/msg/TFMessage               | ignition::msgs::Pose_V                 |
-| trajectory_msgs/msg/JointTrajectory  | ignition::msgs::JointTrajectory        |
+| builtin_interfaces/msg/Time          | gz::msgs::Time                   |
+| std_msgs/msg/Bool                    | gz::msgs::Boolean                |
+| std_msgs/msg/ColorRGBA               | gz::msgs::Color                  |
+| std_msgs/msg/Empty                   | gz::msgs::Empty                  |
+| std_msgs/msg/Float32                 | gz::msgs::Float                  |
+| std_msgs/msg/Float64                 | gz::msgs::Double                 |
+| std_msgs/msg/Header                  | gz::msgs::Header                 |
+| std_msgs/msg/Int32                   | gz::msgs::Int32                  |
+| std_msgs/msg/UInt32                  | gz::msgs::UInt32                 |
+| std_msgs/msg/String                  | gz::msgs::StringMsg              |
+| geometry_msgs/msg/Wrench             | gz::msgs::Wrench                 |
+| geometry_msgs/msg/WrenchStamped      | gz::msgs::Wrench                 |
+| geometry_msgs/msg/Quaternion         | gz::msgs::Quaternion             |
+| geometry_msgs/msg/Vector3            | gz::msgs::Vector3d               |
+| geometry_msgs/msg/Point              | gz::msgs::Vector3d               |
+| geometry_msgs/msg/Pose               | gz::msgs::Pose                   |
+| geometry_msgs/msg/PoseArray          | gz::msgs::Pose_V                 |
+| geometry_msgs/msg/PoseWithCovariance | gz::msgs::PoseWithCovariance     |
+| geometry_msgs/msg/PoseStamped        | gz::msgs::Pose                   |
+| geometry_msgs/msg/Transform          | gz::msgs::Pose                   |
+| geometry_msgs/msg/TransformStamped   | gz::msgs::Pose                   |
+| geometry_msgs/msg/Twist              | gz::msgs::Twist                  |
+| geometry_msgs/msg/TwistWithCovariance| gz::msgs::TwistWithCovariance    |
+| nav_msgs/msg/Odometry                | gz::msgs::Odometry               |
+| nav_msgs/msg/Odometry                | gz::msgs::OdometryWithCovariance |
+| rcl_interfaces/msg/ParameterValue    | gz::msgs::Any                    |
+| ros_gz_interfaces/msg/Altimeter      | gz::msgs::Altimeter              |
+| ros_gz_interfaces/msg/Contact        | gz::msgs::Contact                |
+| ros_gz_interfaces/msg/Contacts       | gz::msgs::Contacts               |
+| ros_gz_interfaces/msg/Dataframe      | gz::msgs::Dataframe              |
+| ros_gz_interfaces/msg/Entity         | gz::msgs::Entity                 |
+| ros_gz_interfaces/msg/Float32Array   | gz::msgs::Float_V                |
+| ros_gz_interfaces/msg/GuiCamera      | gz::msgs::GUICamera              |
+| ros_gz_interfaces/msg/JointWrench    | gz::msgs::JointWrench            |
+| ros_gz_interfaces/msg/Light          | gz::msgs::Light                  |
+| ros_gz_interfaces/msg/SensorNoise    | gz::msgs::SensorNoise            |
+| ros_gz_interfaces/msg/StringVec      | gz::msgs::StringMsg_V            |
+| ros_gz_interfaces/msg/TrackVisual    | gz::msgs::TrackVisual            |
+| ros_gz_interfaces/msg/VideoRecord    | gz::msgs::VideoRecord            |
+| ros_gz_interfaces/msg/WorldControl   | gz::msgs::WorldControl           |
+| rosgraph_msgs/msg/Clock              | gz::msgs::Clock                  |
+| sensor_msgs/msg/BatteryState         | gz::msgs::BatteryState           |
+| sensor_msgs/msg/CameraInfo           | gz::msgs::CameraInfo             |
+| sensor_msgs/msg/FluidPressure        | gz::msgs::FluidPressure          |
+| sensor_msgs/msg/Imu                  | gz::msgs::IMU                    |
+| sensor_msgs/msg/Image                | gz::msgs::Image                  |
+| sensor_msgs/msg/JointState           | gz::msgs::Model                  |
+| sensor_msgs/msg/Joy                  | gz::msgs::Joy                    |
+| sensor_msgs/msg/LaserScan            | gz::msgs::LaserScan              |
+| sensor_msgs/msg/MagneticField        | gz::msgs::Magnetometer           |
+| sensor_msgs/msg/NavSatFix            | gz::msgs::NavSat                 |
+| sensor_msgs/msg/PointCloud2          | gz::msgs::PointCloudPacked       |
+| tf2_msgs/msg/TFMessage               | gz::msgs::Pose_V                 |
+| trajectory_msgs/msg/JointTrajectory  | gz::msgs::JointTrajectory        |
 
 And the following for services:
 
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/actuator_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/actuator_msgs.hpp
index 74f0a07..ea4055b 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/actuator_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/actuator_msgs.hpp
@@ -16,7 +16,7 @@
 #define ROS_GZ_BRIDGE__CONVERT__ACTUATOR_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/actuators.pb.h>
+#include <gz/msgs/actuators.pb.h>
 
 // ROS 2 messages
 #include <actuator_msgs/msg/actuators.hpp>
@@ -30,12 +30,12 @@ template<>
 void
 convert_ros_to_gz(
   const actuator_msgs::msg::Actuators & ros_msg,
-  ignition::msgs::Actuators & gz_msg);
+  gz::msgs::Actuators & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Actuators & gz_msg,
+  const gz::msgs::Actuators & gz_msg,
   actuator_msgs::msg::Actuators & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/builtin_interfaces.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/builtin_interfaces.hpp
index a2b1999..04c47ba 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/builtin_interfaces.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/builtin_interfaces.hpp
@@ -15,7 +15,7 @@
 #ifndef ROS_GZ_BRIDGE__CONVERT__BUILTIN_INTERFACES_HPP_
 #define ROS_GZ_BRIDGE__CONVERT__BUILTIN_INTERFACES_HPP_
 
-#include <ignition/msgs/time.pb.h>
+#include <gz/msgs/time.pb.h>
 
 #include <builtin_interfaces/msg/time.hpp>
 
@@ -28,12 +28,12 @@ template<>
 void
 convert_ros_to_gz(
   const builtin_interfaces::msg::Time & ros_msg,
-  ignition::msgs::Time & gz_msg);
+  gz::msgs::Time & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Time & gz_msg,
+  const gz::msgs::Time & gz_msg,
   builtin_interfaces::msg::Time & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/geometry_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/geometry_msgs.hpp
index edee9b4..3256f68 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/geometry_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/geometry_msgs.hpp
@@ -16,14 +16,14 @@
 #define ROS_GZ_BRIDGE__CONVERT__GEOMETRY_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/quaternion.pb.h>
-#include <ignition/msgs/vector3d.pb.h>
-#include <ignition/msgs/pose.pb.h>
-#include <ignition/msgs/pose_with_covariance.pb.h>
-#include <ignition/msgs/pose_v.pb.h>
-#include <ignition/msgs/twist.pb.h>
-#include <ignition/msgs/twist_with_covariance.pb.h>
-#include <ignition/msgs/wrench.pb.h>
+#include <gz/msgs/quaternion.pb.h>
+#include <gz/msgs/vector3d.pb.h>
+#include <gz/msgs/pose.pb.h>
+#include <gz/msgs/pose_with_covariance.pb.h>
+#include <gz/msgs/pose_v.pb.h>
+#include <gz/msgs/twist.pb.h>
+#include <gz/msgs/twist_with_covariance.pb.h>
+#include <gz/msgs/wrench.pb.h>
 
 // ROS 2 messages
 #include <geometry_msgs/msg/point.hpp>
@@ -48,156 +48,156 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Quaternion & ros_msg,
-  ignition::msgs::Quaternion & gz_msg);
+  gz::msgs::Quaternion & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Quaternion & gz_msg,
+  const gz::msgs::Quaternion & gz_msg,
   geometry_msgs::msg::Quaternion & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Vector3 & ros_msg,
-  ignition::msgs::Vector3d & gz_msg);
+  gz::msgs::Vector3d & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Vector3d & gz_msg,
+  const gz::msgs::Vector3d & gz_msg,
   geometry_msgs::msg::Vector3 & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Point & ros_msg,
-  ignition::msgs::Vector3d & gz_msg);
+  gz::msgs::Vector3d & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Vector3d & gz_msg,
+  const gz::msgs::Vector3d & gz_msg,
   geometry_msgs::msg::Point & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Pose & ros_msg,
-  ignition::msgs::Pose & gz_msg);
+  gz::msgs::Pose & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::Pose & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::PoseArray & ros_msg,
-  ignition::msgs::Pose_V & gz_msg);
+  gz::msgs::Pose_V & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose_V & gz_msg,
+  const gz::msgs::Pose_V & gz_msg,
   geometry_msgs::msg::PoseArray & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::PoseWithCovariance & ros_msg,
-  ignition::msgs::PoseWithCovariance & gz_msg);
+  gz::msgs::PoseWithCovariance & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::PoseWithCovariance & gz_msg,
+  const gz::msgs::PoseWithCovariance & gz_msg,
   geometry_msgs::msg::PoseWithCovariance & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::PoseStamped & ros_msg,
-  ignition::msgs::Pose & gz_msg);
+  gz::msgs::Pose & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::PoseStamped & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Transform & ros_msg,
-  ignition::msgs::Pose & gz_msg);
+  gz::msgs::Pose & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::Transform & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::TransformStamped & ros_msg,
-  ignition::msgs::Pose & gz_msg);
+  gz::msgs::Pose & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::TransformStamped & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Twist & ros_msg,
-  ignition::msgs::Twist & gz_msg);
+  gz::msgs::Twist & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Twist & gz_msg,
+  const gz::msgs::Twist & gz_msg,
   geometry_msgs::msg::Twist & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::TwistWithCovariance & ros_msg,
-  ignition::msgs::TwistWithCovariance & gz_msg);
+  gz::msgs::TwistWithCovariance & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::TwistWithCovariance & gz_msg,
+  const gz::msgs::TwistWithCovariance & gz_msg,
   geometry_msgs::msg::TwistWithCovariance & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Wrench & ros_msg,
-  ignition::msgs::Wrench & gz_msg);
+  gz::msgs::Wrench & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Wrench & gz_msg,
+  const gz::msgs::Wrench & gz_msg,
   geometry_msgs::msg::Wrench & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::WrenchStamped & ros_msg,
-  ignition::msgs::Wrench & gz_msg);
+  gz::msgs::Wrench & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Wrench & gz_msg,
+  const gz::msgs::Wrench & gz_msg,
   geometry_msgs::msg::WrenchStamped & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/nav_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/nav_msgs.hpp
index 4c52c5b..91c0f1a 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/nav_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/nav_msgs.hpp
@@ -16,8 +16,8 @@
 #define ROS_GZ_BRIDGE__CONVERT__NAV_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/odometry.pb.h>
-#include <ignition/msgs/odometry_with_covariance.pb.h>
+#include <gz/msgs/odometry.pb.h>
+#include <gz/msgs/odometry_with_covariance.pb.h>
 
 // ROS 2 messages
 #include <nav_msgs/msg/odometry.hpp>
@@ -31,24 +31,24 @@ template<>
 void
 convert_ros_to_gz(
   const nav_msgs::msg::Odometry & ros_msg,
-  ignition::msgs::Odometry & gz_msg);
+  gz::msgs::Odometry & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Odometry & gz_msg,
+  const gz::msgs::Odometry & gz_msg,
   nav_msgs::msg::Odometry & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const nav_msgs::msg::Odometry & ros_msg,
-  ignition::msgs::OdometryWithCovariance & gz_msg);
+  gz::msgs::OdometryWithCovariance & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::OdometryWithCovariance & gz_msg,
+  const gz::msgs::OdometryWithCovariance & gz_msg,
   nav_msgs::msg::Odometry & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/rcl_interfaces.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/rcl_interfaces.hpp
index 1788fac..261849c 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/rcl_interfaces.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/rcl_interfaces.hpp
@@ -16,7 +16,7 @@
 #define ROS_GZ_BRIDGE__CONVERT__RCL_INTERFACES_HPP_
 
 // Ignition messages
-#include <ignition/msgs/any.pb.h>
+#include <gz/msgs/any.pb.h>
 
 // ROS 2 messages
 #include <rcl_interfaces/msg/parameter.hpp>
@@ -32,12 +32,12 @@ template<>
 void
 convert_ros_to_gz(
   const rcl_interfaces::msg::ParameterValue & ros_msg,
-  ignition::msgs::Any & ign_msg);
+  gz::msgs::Any & ign_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Any & ign_msg,
+  const gz::msgs::Any & ign_msg,
   rcl_interfaces::msg::ParameterValue & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/ros_gz_interfaces.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/ros_gz_interfaces.hpp
index 9b0f5c1..c7e671d 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/ros_gz_interfaces.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/ros_gz_interfaces.hpp
@@ -16,21 +16,21 @@
 #define ROS_GZ_BRIDGE__CONVERT__ROS_GZ_INTERFACES_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/altimeter.pb.h>
-#include <ignition/msgs/entity.pb.h>
-#include <ignition/msgs/joint_wrench.pb.h>
-#include <ignition/msgs/contact.pb.h>
-#include <ignition/msgs/contacts.pb.h>
-#include <ignition/msgs/float_v.pb.h>
-#include <ignition/msgs/gui_camera.pb.h>
-#include <ignition/msgs/light.pb.h>
-#include <ignition/msgs/param.pb.h>
-#include <ignition/msgs/param_v.pb.h>
-#include <ignition/msgs/sensor_noise.pb.h>
-#include <ignition/msgs/stringmsg_v.pb.h>
-#include <ignition/msgs/track_visual.pb.h>
-#include <ignition/msgs/video_record.pb.h>
-#include <ignition/msgs/world_control.pb.h>
+#include <gz/msgs/altimeter.pb.h>
+#include <gz/msgs/entity.pb.h>
+#include <gz/msgs/joint_wrench.pb.h>
+#include <gz/msgs/contact.pb.h>
+#include <gz/msgs/contacts.pb.h>
+#include <gz/msgs/float_v.pb.h>
+#include <gz/msgs/gui_camera.pb.h>
+#include <gz/msgs/light.pb.h>
+#include <gz/msgs/param.pb.h>
+#include <gz/msgs/param_v.pb.h>
+#include <gz/msgs/sensor_noise.pb.h>
+#include <gz/msgs/stringmsg_v.pb.h>
+#include <gz/msgs/track_visual.pb.h>
+#include <gz/msgs/video_record.pb.h>
+#include <gz/msgs/world_control.pb.h>
 
 // ROS 2 messages
 #include <ros_gz_interfaces/msg/altimeter.hpp>
@@ -52,7 +52,7 @@
 #include <ros_gz_bridge/ros_gz_bridge.hpp>
 
 #if HAVE_DATAFRAME
-#include <ignition/msgs/dataframe.pb.h>
+#include <gz/msgs/dataframe.pb.h>
 #include <ros_gz_interfaces/msg/dataframe.hpp>
 #endif  // HAVE_DATAFRAME
 
@@ -65,60 +65,60 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::JointWrench & ros_msg,
-  ignition::msgs::JointWrench & gz_msg);
+  gz::msgs::JointWrench & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::JointWrench & gz_msg,
+  const gz::msgs::JointWrench & gz_msg,
   ros_gz_interfaces::msg::JointWrench & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Altimeter & ros_msg,
-  ignition::msgs::Altimeter & gz_msg);
+  gz::msgs::Altimeter & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Altimeter & gz_msg,
+  const gz::msgs::Altimeter & gz_msg,
   ros_gz_interfaces::msg::Altimeter & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Entity & ros_msg,
-  ignition::msgs::Entity & gz_msg);
+  gz::msgs::Entity & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Entity & gz_msg,
+  const gz::msgs::Entity & gz_msg,
   ros_gz_interfaces::msg::Entity & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Contact & ros_msg,
-  ignition::msgs::Contact & gz_msg);
+  gz::msgs::Contact & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Contact & gz_msg,
+  const gz::msgs::Contact & gz_msg,
   ros_gz_interfaces::msg::Contact & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Contacts & ros_msg,
-  ignition::msgs::Contacts & gz_msg);
+  gz::msgs::Contacts & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Contacts & gz_msg,
+  const gz::msgs::Contacts & gz_msg,
   ros_gz_interfaces::msg::Contacts & ros_msg);
 
 #if HAVE_DATAFRAME
@@ -126,12 +126,12 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Dataframe & ros_msg,
-  ignition::msgs::Dataframe & ign_msg);
+  gz::msgs::Dataframe & ign_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Dataframe & ign_msg,
+  const gz::msgs::Dataframe & ign_msg,
   ros_gz_interfaces::msg::Dataframe & ros_msg);
 #endif  // HAVE_DATAFRAME
 
@@ -139,132 +139,132 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::GuiCamera & ros_msg,
-  ignition::msgs::GUICamera & gz_msg);
+  gz::msgs::GUICamera & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::GUICamera & gz_msg,
+  const gz::msgs::GUICamera & gz_msg,
   ros_gz_interfaces::msg::GuiCamera & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Light & ros_msg,
-  ignition::msgs::Light & gz_msg);
+  gz::msgs::Light & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Light & gz_msg,
+  const gz::msgs::Light & gz_msg,
   ros_gz_interfaces::msg::Light & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::SensorNoise & ros_msg,
-  ignition::msgs::SensorNoise & gz_msg);
+  gz::msgs::SensorNoise & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::SensorNoise & gz_msg,
+  const gz::msgs::SensorNoise & gz_msg,
   ros_gz_interfaces::msg::SensorNoise & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::StringVec & ros_msg,
-  ignition::msgs::StringMsg_V & gz_msg);
+  gz::msgs::StringMsg_V & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::StringMsg_V & gz_msg,
+  const gz::msgs::StringMsg_V & gz_msg,
   ros_gz_interfaces::msg::StringVec & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::ParamVec & ros_msg,
-  ignition::msgs::Param & gz_msg);
+  gz::msgs::Param & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Param & gz_msg,
+  const gz::msgs::Param & gz_msg,
   ros_gz_interfaces::msg::ParamVec & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::ParamVec & ros_msg,
-  ignition::msgs::Param_V & gz_msg);
+  gz::msgs::Param_V & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Param_V & gz_msg,
+  const gz::msgs::Param_V & gz_msg,
   ros_gz_interfaces::msg::ParamVec & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::TrackVisual & ros_msg,
-  ignition::msgs::TrackVisual & gz_msg);
+  gz::msgs::TrackVisual & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::TrackVisual & gz_msg,
+  const gz::msgs::TrackVisual & gz_msg,
   ros_gz_interfaces::msg::TrackVisual & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::VideoRecord & ros_msg,
-  ignition::msgs::VideoRecord & gz_msg);
+  gz::msgs::VideoRecord & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::VideoRecord & gz_msg,
+  const gz::msgs::VideoRecord & gz_msg,
   ros_gz_interfaces::msg::VideoRecord & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::WorldControl & ros_msg,
-  ignition::msgs::WorldControl & gz_msg);
+  gz::msgs::WorldControl & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::WorldControl & gz_msg,
+  const gz::msgs::WorldControl & gz_msg,
   ros_gz_interfaces::msg::WorldControl & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::WorldReset & ros_msg,
-  ignition::msgs::WorldReset & gz_msg);
+  gz::msgs::WorldReset & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::WorldReset & gz_msg,
+  const gz::msgs::WorldReset & gz_msg,
   ros_gz_interfaces::msg::WorldReset & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Float32Array & ros_msg,
-  ignition::msgs::Float_V & gz_msg);
+  gz::msgs::Float_V & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Float_V & gz_msg,
+  const gz::msgs::Float_V & gz_msg,
   ros_gz_interfaces::msg::Float32Array & ros_msg);
 }  // namespace ros_gz_bridge
 
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/rosgraph_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/rosgraph_msgs.hpp
index c67073b..7916aaa 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/rosgraph_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/rosgraph_msgs.hpp
@@ -16,7 +16,7 @@
 #define ROS_GZ_BRIDGE__CONVERT__ROSGRAPH_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs.hh>
+#include <gz/msgs.hh>
 
 // ROS 2 messages
 #include <rosgraph_msgs/msg/clock.hpp>
@@ -29,14 +29,14 @@ namespace ros_gz_bridge
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Clock & gz_msg,
+  const gz::msgs::Clock & gz_msg,
   rosgraph_msgs::msg::Clock & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const rosgraph_msgs::msg::Clock & ros_msg,
-  ignition::msgs::Clock & gz_msg);
+  gz::msgs::Clock & gz_msg);
 
 }  // namespace ros_gz_bridge
 
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/sensor_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/sensor_msgs.hpp
index c9abb90..ab0d314 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/sensor_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/sensor_msgs.hpp
@@ -16,17 +16,17 @@
 #define ROS_GZ_BRIDGE__CONVERT__SENSOR_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/battery_state.pb.h>
-#include <ignition/msgs/camera_info.pb.h>
-#include <ignition/msgs/fluid_pressure.pb.h>
-#include <ignition/msgs/image.pb.h>
-#include <ignition/msgs/imu.pb.h>
-#include <ignition/msgs/joy.pb.h>
-#include <ignition/msgs/laserscan.pb.h>
-#include <ignition/msgs/magnetometer.pb.h>
-#include <ignition/msgs/model.pb.h>
-#include <ignition/msgs/navsat.pb.h>
-#include <ignition/msgs/pointcloud_packed.pb.h>
+#include <gz/msgs/battery_state.pb.h>
+#include <gz/msgs/camera_info.pb.h>
+#include <gz/msgs/fluid_pressure.pb.h>
+#include <gz/msgs/image.pb.h>
+#include <gz/msgs/imu.pb.h>
+#include <gz/msgs/joy.pb.h>
+#include <gz/msgs/laserscan.pb.h>
+#include <gz/msgs/magnetometer.pb.h>
+#include <gz/msgs/model.pb.h>
+#include <gz/msgs/navsat.pb.h>
+#include <gz/msgs/pointcloud_packed.pb.h>
 
 // ROS 2 messages
 #include <sensor_msgs/msg/battery_state.hpp>
@@ -51,132 +51,132 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::Joy & ros_msg,
-  ignition::msgs::Joy & gz_msg);
+  gz::msgs::Joy & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Joy & gz_msg,
+  const gz::msgs::Joy & gz_msg,
   sensor_msgs::msg::Joy & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::FluidPressure & ros_msg,
-  ignition::msgs::FluidPressure & gz_msg);
+  gz::msgs::FluidPressure & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::FluidPressure & gz_msg,
+  const gz::msgs::FluidPressure & gz_msg,
   sensor_msgs::msg::FluidPressure & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::Image & ros_msg,
-  ignition::msgs::Image & gz_msg);
+  gz::msgs::Image & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Image & gz_msg,
+  const gz::msgs::Image & gz_msg,
   sensor_msgs::msg::Image & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::CameraInfo & ros_msg,
-  ignition::msgs::CameraInfo & gz_msg);
+  gz::msgs::CameraInfo & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::CameraInfo & gz_msg,
+  const gz::msgs::CameraInfo & gz_msg,
   sensor_msgs::msg::CameraInfo & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::Imu & ros_msg,
-  ignition::msgs::IMU & gz_msg);
+  gz::msgs::IMU & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::IMU & gz_msg,
+  const gz::msgs::IMU & gz_msg,
   sensor_msgs::msg::Imu & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::JointState & ros_msg,
-  ignition::msgs::Model & gz_msg);
+  gz::msgs::Model & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Model & gz_msg,
+  const gz::msgs::Model & gz_msg,
   sensor_msgs::msg::JointState & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::LaserScan & ros_msg,
-  ignition::msgs::LaserScan & gz_msg);
+  gz::msgs::LaserScan & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::LaserScan & gz_msg,
+  const gz::msgs::LaserScan & gz_msg,
   sensor_msgs::msg::LaserScan & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::MagneticField & ros_msg,
-  ignition::msgs::Magnetometer & gz_msg);
+  gz::msgs::Magnetometer & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Magnetometer & gz_msg,
+  const gz::msgs::Magnetometer & gz_msg,
   sensor_msgs::msg::MagneticField & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::NavSatFix & ros_msg,
-  ignition::msgs::NavSat & gz_msg);
+  gz::msgs::NavSat & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::NavSat & gz_msg,
+  const gz::msgs::NavSat & gz_msg,
   sensor_msgs::msg::NavSatFix & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::PointCloud2 & ros_msg,
-  ignition::msgs::PointCloudPacked & gz_msg);
+  gz::msgs::PointCloudPacked & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::PointCloudPacked & gz_msg,
+  const gz::msgs::PointCloudPacked & gz_msg,
   sensor_msgs::msg::PointCloud2 & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::BatteryState & ros_msg,
-  ignition::msgs::BatteryState & gz_msg);
+  gz::msgs::BatteryState & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::BatteryState & gz_msg,
+  const gz::msgs::BatteryState & gz_msg,
   sensor_msgs::msg::BatteryState & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/std_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/std_msgs.hpp
index 155a7cd..78d3f11 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/std_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/std_msgs.hpp
@@ -16,15 +16,15 @@
 #define ROS_GZ_BRIDGE__CONVERT__STD_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/boolean.pb.h>
-#include <ignition/msgs/color.pb.h>
-#include <ignition/msgs/empty.pb.h>
-#include <ignition/msgs/float.pb.h>
-#include <ignition/msgs/double.pb.h>
-#include <ignition/msgs/header.pb.h>
-#include <ignition/msgs/int32.pb.h>
-#include <ignition/msgs/uint32.pb.h>
-#include <ignition/msgs/stringmsg.pb.h>
+#include <gz/msgs/boolean.pb.h>
+#include <gz/msgs/color.pb.h>
+#include <gz/msgs/empty.pb.h>
+#include <gz/msgs/float.pb.h>
+#include <gz/msgs/double.pb.h>
+#include <gz/msgs/header.pb.h>
+#include <gz/msgs/int32.pb.h>
+#include <gz/msgs/uint32.pb.h>
+#include <gz/msgs/stringmsg.pb.h>
 
 // ROS 2 messages
 #include <std_msgs/msg/bool.hpp>
@@ -46,108 +46,108 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Bool & ros_msg,
-  ignition::msgs::Boolean & gz_msg);
+  gz::msgs::Boolean & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Boolean & gz_msg,
+  const gz::msgs::Boolean & gz_msg,
   std_msgs::msg::Bool & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::ColorRGBA & ros_msg,
-  ignition::msgs::Color & gz_msg);
+  gz::msgs::Color & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Color & gz_msg,
+  const gz::msgs::Color & gz_msg,
   std_msgs::msg::ColorRGBA & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Empty & ros_msg,
-  ignition::msgs::Empty & gz_msg);
+  gz::msgs::Empty & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Empty & gz_msg,
+  const gz::msgs::Empty & gz_msg,
   std_msgs::msg::Empty & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::UInt32 & ros_msg,
-  ignition::msgs::UInt32 & gz_msg);
+  gz::msgs::UInt32 & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::UInt32 & gz_msg,
+  const gz::msgs::UInt32 & gz_msg,
   std_msgs::msg::UInt32 & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Float32 & ros_msg,
-  ignition::msgs::Float & gz_msg);
+  gz::msgs::Float & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Float & gz_msg,
+  const gz::msgs::Float & gz_msg,
   std_msgs::msg::Float32 & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Float64 & ros_msg,
-  ignition::msgs::Double & gz_msg);
+  gz::msgs::Double & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Double & gz_msg,
+  const gz::msgs::Double & gz_msg,
   std_msgs::msg::Float64 & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Header & ros_msg,
-  ignition::msgs::Header & gz_msg);
+  gz::msgs::Header & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Header & gz_msg,
+  const gz::msgs::Header & gz_msg,
   std_msgs::msg::Header & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Int32 & ros_msg,
-  ignition::msgs::Int32 & gz_msg);
+  gz::msgs::Int32 & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Int32 & gz_msg,
+  const gz::msgs::Int32 & gz_msg,
   std_msgs::msg::Int32 & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::String & ros_msg,
-  ignition::msgs::StringMsg & gz_msg);
+  gz::msgs::StringMsg & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::StringMsg & gz_msg,
+  const gz::msgs::StringMsg & gz_msg,
   std_msgs::msg::String & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/tf2_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/tf2_msgs.hpp
index a254df5..a7df9e0 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/tf2_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/tf2_msgs.hpp
@@ -16,7 +16,7 @@
 #define ROS_GZ_BRIDGE__CONVERT__TF2_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/pose_v.pb.h>
+#include <gz/msgs/pose_v.pb.h>
 
 // ROS 2 messages
 #include <tf2_msgs/msg/tf_message.hpp>
@@ -30,12 +30,12 @@ template<>
 void
 convert_ros_to_gz(
   const tf2_msgs::msg::TFMessage & ros_msg,
-  ignition::msgs::Pose_V & gz_msg);
+  gz::msgs::Pose_V & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose_V & gz_msg,
+  const gz::msgs::Pose_V & gz_msg,
   tf2_msgs::msg::TFMessage & ros_msg);
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/include/ros_gz_bridge/convert/trajectory_msgs.hpp b/ros_gz_bridge/include/ros_gz_bridge/convert/trajectory_msgs.hpp
index f3efbbe..d2120db 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/convert/trajectory_msgs.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/convert/trajectory_msgs.hpp
@@ -16,7 +16,7 @@
 #define ROS_GZ_BRIDGE__CONVERT__TRAJECTORY_MSGS_HPP_
 
 // Gazebo Msgs
-#include <ignition/msgs/joint_trajectory.pb.h>
+#include <gz/msgs/joint_trajectory.pb.h>
 
 // ROS 2 messages
 #include <trajectory_msgs/msg/joint_trajectory.hpp>
@@ -30,24 +30,24 @@ template<>
 void
 convert_ros_to_gz(
   const trajectory_msgs::msg::JointTrajectoryPoint & ros_msg,
-  ignition::msgs::JointTrajectoryPoint & gz_msg);
+  gz::msgs::JointTrajectoryPoint & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::JointTrajectoryPoint & gz_msg,
+  const gz::msgs::JointTrajectoryPoint & gz_msg,
   trajectory_msgs::msg::JointTrajectoryPoint & ros_msg);
 
 template<>
 void
 convert_ros_to_gz(
   const trajectory_msgs::msg::JointTrajectory & ros_msg,
-  ignition::msgs::JointTrajectory & gz_msg);
+  gz::msgs::JointTrajectory & gz_msg);
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::JointTrajectory & gz_msg,
+  const gz::msgs::JointTrajectory & gz_msg,
   trajectory_msgs::msg::JointTrajectory & ros_msg);
 
 
diff --git a/ros_gz_bridge/include/ros_gz_bridge/ros_gz_bridge.hpp b/ros_gz_bridge/include/ros_gz_bridge/ros_gz_bridge.hpp
index 4db02e4..f635d55 100644
--- a/ros_gz_bridge/include/ros_gz_bridge/ros_gz_bridge.hpp
+++ b/ros_gz_bridge/include/ros_gz_bridge/ros_gz_bridge.hpp
@@ -19,15 +19,15 @@
 #include <string>
 #include <vector>
 
-#include <ignition/msgs/config.hh>
-#include <ignition/transport/Node.hh>
+#include <gz/msgs/config.hh>
+#include <gz/transport/Node.hh>
 #include <rclcpp/node.hpp>
 #include "ros_gz_bridge/bridge_config.hpp"
 
 // Dataframe is available from versions 8.4.0 (fortress) forward
 // This can be removed when the minimum supported version passes 8.4.0
-#if (IGNITION_MSGS_MAJOR_VERSION > 8) || \
-  ((IGNITION_MSGS_MAJOR_VERSION == 8) && (IGNITION_MSGS_MINOR_VERSION >= 4))
+#if (GZ_MSGS_MAJOR_VERSION > 8) || \
+  ((GZ_MSGS_MAJOR_VERSION == 8) && (GZ_MSGS_MINOR_VERSION >= 4))
 #define HAVE_DATAFRAME true
 #endif
 
@@ -70,7 +70,7 @@ protected:
 
 protected:
   /// \brief Pointer to Gazebo node used to create publishers/subscribers
-  std::shared_ptr<ignition::transport::Node> gz_node_;
+  std::shared_ptr<gz::transport::Node> gz_node_;
 
   /// \brief List of bridge handles
   std::vector<std::shared_ptr<ros_gz_bridge::BridgeHandle>> handles_;
diff --git a/ros_gz_bridge/ros_gz_bridge/__init__.py b/ros_gz_bridge/ros_gz_bridge/__init__.py
index 01b3aa7..c0aaa48 100644
--- a/ros_gz_bridge/ros_gz_bridge/__init__.py
+++ b/ros_gz_bridge/ros_gz_bridge/__init__.py
@@ -41,15 +41,15 @@ class MessageMapping:
         return f'ignition.msgs.{self.gz_message_name}'
 
     def ign_type(self):
-        # Return GZ type of a message (eg ignition::msgs::Bool)
-        return f'ignition::msgs::{self.gz_message_name}'
+        # Return GZ type of a message (eg gz::msgs::Bool)
+        return f'gz::msgs::{self.gz_message_name}'
 
     def gz_string(self):
         # Return GZ string version of a message (eg ignition.msgs.Bool)
         return f'gz.msgs.{self.gz_message_name}'
 
     def gz_type(self):
-        # Return GZ type of a message (eg ignition::msgs::Bool)
+        # Return GZ type of a message (eg gz::msgs::Bool)
         return f'gz::msgs::{self.gz_message_name}'
 
     def unique(self):
diff --git a/ros_gz_bridge/src/bridge_handle.cpp b/ros_gz_bridge/src/bridge_handle.cpp
index 6fd1cc1..c785150 100644
--- a/ros_gz_bridge/src/bridge_handle.cpp
+++ b/ros_gz_bridge/src/bridge_handle.cpp
@@ -23,7 +23,7 @@ namespace ros_gz_bridge
 {
 BridgeHandle::BridgeHandle(
   rclcpp::Node::SharedPtr ros_node,
-  std::shared_ptr<ignition::transport::Node> gz_node,
+  std::shared_ptr<gz::transport::Node> gz_node,
   const BridgeConfig & config)
 : ros_node_(ros_node),
   gz_node_(gz_node),
diff --git a/ros_gz_bridge/src/bridge_handle.hpp b/ros_gz_bridge/src/bridge_handle.hpp
index 11712f0..d1751fb 100644
--- a/ros_gz_bridge/src/bridge_handle.hpp
+++ b/ros_gz_bridge/src/bridge_handle.hpp
@@ -18,7 +18,7 @@
 #include <memory>
 #include <string>
 
-#include <ignition/transport/Node.hh>
+#include <gz/transport/Node.hh>
 #include <rclcpp/node.hpp>
 
 #include "get_factory.hpp"
@@ -40,7 +40,7 @@ public:
   /// \param[in] config Configuration parameters for this handle
   BridgeHandle(
     rclcpp::Node::SharedPtr ros_node,
-    std::shared_ptr<ignition::transport::Node> gz_node,
+    std::shared_ptr<gz::transport::Node> gz_node,
     const BridgeConfig & config);
 
   /// \brief Destructor
@@ -94,7 +94,7 @@ protected:
   rclcpp::Node::SharedPtr ros_node_;
 
   /// \brief The Gazebo node used to create publishers/subscriptions
-  std::shared_ptr<ignition::transport::Node> gz_node_;
+  std::shared_ptr<gz::transport::Node> gz_node_;
 
   /// \brief The configuration parameters of this bridge
   BridgeConfig config_;
diff --git a/ros_gz_bridge/src/bridge_handle_gz_to_ros.hpp b/ros_gz_bridge/src/bridge_handle_gz_to_ros.hpp
index 0fce7f7..f8f4a02 100644
--- a/ros_gz_bridge/src/bridge_handle_gz_to_ros.hpp
+++ b/ros_gz_bridge/src/bridge_handle_gz_to_ros.hpp
@@ -17,7 +17,7 @@
 
 #include <memory>
 
-#include <ignition/transport/Node.hh>
+#include <gz/transport/Node.hh>
 #include <rclcpp/subscription_base.hpp>
 
 #include "bridge_handle.hpp"
@@ -58,7 +58,7 @@ protected:
 
 protected:
   /// \brief Gazebo subscriber, populated when subscriber active
-  std::shared_ptr<ignition::transport::Node> gz_subscriber_ = {nullptr};
+  std::shared_ptr<gz::transport::Node> gz_subscriber_ = {nullptr};
 
   /// \brief ROS publisher, populated when publisher active
   rclcpp::PublisherBase::SharedPtr ros_publisher_ = {nullptr};
diff --git a/ros_gz_bridge/src/bridge_handle_ros_to_gz.cpp b/ros_gz_bridge/src/bridge_handle_ros_to_gz.cpp
index a101ed6..6253ce4 100644
--- a/ros_gz_bridge/src/bridge_handle_ros_to_gz.cpp
+++ b/ros_gz_bridge/src/bridge_handle_ros_to_gz.cpp
@@ -14,7 +14,7 @@
 
 #include "bridge_handle_ros_to_gz.hpp"
 
-#include <ignition/transport/TopicUtils.hh>
+#include <gz/transport/TopicUtils.hh>
 
 namespace ros_gz_bridge
 {
diff --git a/ros_gz_bridge/src/bridge_handle_ros_to_gz.hpp b/ros_gz_bridge/src/bridge_handle_ros_to_gz.hpp
index 5526ed4..edf050d 100644
--- a/ros_gz_bridge/src/bridge_handle_ros_to_gz.hpp
+++ b/ros_gz_bridge/src/bridge_handle_ros_to_gz.hpp
@@ -15,7 +15,7 @@
 #ifndef BRIDGE_HANDLE_ROS_TO_GZ_HPP_
 #define BRIDGE_HANDLE_ROS_TO_GZ_HPP_
 
-#include <ignition/transport/Node.hh>
+#include <gz/transport/Node.hh>
 #include <rclcpp/subscription_base.hpp>
 
 #include "bridge_handle.hpp"
@@ -59,7 +59,7 @@ protected:
   rclcpp::SubscriptionBase::SharedPtr ros_subscriber_ = {nullptr};
 
   /// \brief Gazebo publisher, populated when publisher active
-  ignition::transport::Node::Publisher gz_publisher_;
+  gz::transport::Node::Publisher gz_publisher_;
 };
 
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_bridge/src/convert/actuator_msgs.cpp b/ros_gz_bridge/src/convert/actuator_msgs.cpp
index 7f32153..0c9bcde 100644
--- a/ros_gz_bridge/src/convert/actuator_msgs.cpp
+++ b/ros_gz_bridge/src/convert/actuator_msgs.cpp
@@ -22,7 +22,7 @@ template<>
 void
 convert_ros_to_gz(
   const actuator_msgs::msg::Actuators & ros_msg,
-  ignition::msgs::Actuators & gz_msg)
+  gz::msgs::Actuators & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -41,7 +41,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Actuators & gz_msg,
+  const gz::msgs::Actuators & gz_msg,
   actuator_msgs::msg::Actuators & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
diff --git a/ros_gz_bridge/src/convert/builtin_interfaces.cpp b/ros_gz_bridge/src/convert/builtin_interfaces.cpp
index fa5548e..04451dd 100644
--- a/ros_gz_bridge/src/convert/builtin_interfaces.cpp
+++ b/ros_gz_bridge/src/convert/builtin_interfaces.cpp
@@ -20,7 +20,7 @@ template<>
 void
 convert_ros_to_gz(
   const builtin_interfaces::msg::Time & ros_msg,
-  ignition::msgs::Time & gz_msg)
+  gz::msgs::Time & gz_msg)
 {
   gz_msg.set_sec(ros_msg.sec);
   gz_msg.set_nsec(ros_msg.nanosec);
@@ -29,7 +29,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Time & gz_msg,
+  const gz::msgs::Time & gz_msg,
   builtin_interfaces::msg::Time & ros_msg)
 {
   ros_msg.sec = gz_msg.sec();
diff --git a/ros_gz_bridge/src/convert/geometry_msgs.cpp b/ros_gz_bridge/src/convert/geometry_msgs.cpp
index fd2ad3d..be5f755 100644
--- a/ros_gz_bridge/src/convert/geometry_msgs.cpp
+++ b/ros_gz_bridge/src/convert/geometry_msgs.cpp
@@ -22,7 +22,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Quaternion & ros_msg,
-  ignition::msgs::Quaternion & gz_msg)
+  gz::msgs::Quaternion & gz_msg)
 {
   gz_msg.set_x(ros_msg.x);
   gz_msg.set_y(ros_msg.y);
@@ -33,7 +33,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Quaternion & gz_msg,
+  const gz::msgs::Quaternion & gz_msg,
   geometry_msgs::msg::Quaternion & ros_msg)
 {
   ros_msg.x = gz_msg.x();
@@ -46,7 +46,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Vector3 & ros_msg,
-  ignition::msgs::Vector3d & gz_msg)
+  gz::msgs::Vector3d & gz_msg)
 {
   gz_msg.set_x(ros_msg.x);
   gz_msg.set_y(ros_msg.y);
@@ -56,7 +56,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Vector3d & gz_msg,
+  const gz::msgs::Vector3d & gz_msg,
   geometry_msgs::msg::Vector3 & ros_msg)
 {
   ros_msg.x = gz_msg.x();
@@ -68,7 +68,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Point & ros_msg,
-  ignition::msgs::Vector3d & gz_msg)
+  gz::msgs::Vector3d & gz_msg)
 {
   gz_msg.set_x(ros_msg.x);
   gz_msg.set_y(ros_msg.y);
@@ -78,7 +78,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Vector3d & gz_msg,
+  const gz::msgs::Vector3d & gz_msg,
   geometry_msgs::msg::Point & ros_msg)
 {
   ros_msg.x = gz_msg.x();
@@ -90,7 +90,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Pose & ros_msg,
-  ignition::msgs::Pose & gz_msg)
+  gz::msgs::Pose & gz_msg)
 {
   convert_ros_to_gz(ros_msg.position, *gz_msg.mutable_position());
   convert_ros_to_gz(ros_msg.orientation, *gz_msg.mutable_orientation());
@@ -99,7 +99,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::Pose & ros_msg)
 {
   convert_gz_to_ros(gz_msg.position(), ros_msg.position);
@@ -110,7 +110,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::PoseArray & ros_msg,
-  ignition::msgs::Pose_V & gz_msg)
+  gz::msgs::Pose_V & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   gz_msg.clear_pose();
@@ -123,7 +123,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose_V & gz_msg,
+  const gz::msgs::Pose_V & gz_msg,
   geometry_msgs::msg::PoseArray & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -139,7 +139,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::PoseWithCovariance & ros_msg,
-  ignition::msgs::PoseWithCovariance & gz_msg)
+  gz::msgs::PoseWithCovariance & gz_msg)
 {
   convert_ros_to_gz(ros_msg.pose.position, *gz_msg.mutable_pose()->mutable_position());
   convert_ros_to_gz(ros_msg.pose.orientation, *gz_msg.mutable_pose()->mutable_orientation());
@@ -151,7 +151,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::PoseWithCovariance & gz_msg,
+  const gz::msgs::PoseWithCovariance & gz_msg,
   geometry_msgs::msg::PoseWithCovariance & ros_msg)
 {
   convert_gz_to_ros(gz_msg.pose().position(), ros_msg.pose.position);
@@ -169,7 +169,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::PoseStamped & ros_msg,
-  ignition::msgs::Pose & gz_msg)
+  gz::msgs::Pose & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   convert_ros_to_gz(ros_msg.pose, gz_msg);
@@ -178,7 +178,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::PoseStamped & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -189,7 +189,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Transform & ros_msg,
-  ignition::msgs::Pose & gz_msg)
+  gz::msgs::Pose & gz_msg)
 {
   convert_ros_to_gz(ros_msg.translation, *gz_msg.mutable_position());
   convert_ros_to_gz(ros_msg.rotation, *gz_msg.mutable_orientation());
@@ -198,7 +198,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::Transform & ros_msg)
 {
   convert_gz_to_ros(gz_msg.position(), ros_msg.translation);
@@ -209,7 +209,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::TransformStamped & ros_msg,
-  ignition::msgs::Pose & gz_msg)
+  gz::msgs::Pose & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   convert_ros_to_gz(ros_msg.transform, gz_msg);
@@ -222,7 +222,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose & gz_msg,
+  const gz::msgs::Pose & gz_msg,
   geometry_msgs::msg::TransformStamped & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -240,7 +240,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Twist & ros_msg,
-  ignition::msgs::Twist & gz_msg)
+  gz::msgs::Twist & gz_msg)
 {
   convert_ros_to_gz(ros_msg.linear, (*gz_msg.mutable_linear()));
   convert_ros_to_gz(ros_msg.angular, (*gz_msg.mutable_angular()));
@@ -249,7 +249,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Twist & gz_msg,
+  const gz::msgs::Twist & gz_msg,
   geometry_msgs::msg::Twist & ros_msg)
 {
   convert_gz_to_ros(gz_msg.linear(), ros_msg.linear);
@@ -260,7 +260,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::TwistWithCovariance & ros_msg,
-  ignition::msgs::TwistWithCovariance & gz_msg)
+  gz::msgs::TwistWithCovariance & gz_msg)
 {
   convert_ros_to_gz(ros_msg.twist.linear, (*gz_msg.mutable_twist()->mutable_linear()));
   convert_ros_to_gz(ros_msg.twist.angular, (*gz_msg.mutable_twist()->mutable_angular()));
@@ -272,7 +272,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::TwistWithCovariance & gz_msg,
+  const gz::msgs::TwistWithCovariance & gz_msg,
   geometry_msgs::msg::TwistWithCovariance & ros_msg)
 {
   convert_gz_to_ros(gz_msg.twist().linear(), ros_msg.twist.linear);
@@ -290,7 +290,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::Wrench & ros_msg,
-  ignition::msgs::Wrench & gz_msg)
+  gz::msgs::Wrench & gz_msg)
 {
   convert_ros_to_gz(ros_msg.force, (*gz_msg.mutable_force()));
   convert_ros_to_gz(ros_msg.torque, (*gz_msg.mutable_torque()));
@@ -299,7 +299,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Wrench & gz_msg,
+  const gz::msgs::Wrench & gz_msg,
   geometry_msgs::msg::Wrench & ros_msg)
 {
   convert_gz_to_ros(gz_msg.force(), ros_msg.force);
@@ -310,7 +310,7 @@ template<>
 void
 convert_ros_to_gz(
   const geometry_msgs::msg::WrenchStamped & ros_msg,
-  ignition::msgs::Wrench & gz_msg)
+  gz::msgs::Wrench & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   convert_ros_to_gz(ros_msg.wrench.force, (*gz_msg.mutable_force()));
@@ -320,7 +320,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Wrench & gz_msg,
+  const gz::msgs::Wrench & gz_msg,
   geometry_msgs::msg::WrenchStamped & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
diff --git a/ros_gz_bridge/src/convert/nav_msgs.cpp b/ros_gz_bridge/src/convert/nav_msgs.cpp
index 092ac3f..816f182 100644
--- a/ros_gz_bridge/src/convert/nav_msgs.cpp
+++ b/ros_gz_bridge/src/convert/nav_msgs.cpp
@@ -22,7 +22,7 @@ template<>
 void
 convert_ros_to_gz(
   const nav_msgs::msg::Odometry & ros_msg,
-  ignition::msgs::Odometry & gz_msg)
+  gz::msgs::Odometry & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   convert_ros_to_gz(ros_msg.pose.pose, (*gz_msg.mutable_pose()));
@@ -36,7 +36,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Odometry & gz_msg,
+  const gz::msgs::Odometry & gz_msg,
   nav_msgs::msg::Odometry & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -56,7 +56,7 @@ template<>
 void
 convert_ros_to_gz(
   const nav_msgs::msg::Odometry & ros_msg,
-  ignition::msgs::OdometryWithCovariance & gz_msg)
+  gz::msgs::OdometryWithCovariance & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   convert_ros_to_gz(ros_msg.pose, (*gz_msg.mutable_pose_with_covariance()));
@@ -70,7 +70,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::OdometryWithCovariance & gz_msg,
+  const gz::msgs::OdometryWithCovariance & gz_msg,
   nav_msgs::msg::Odometry & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
diff --git a/ros_gz_bridge/src/convert/rcl_interfaces.cpp b/ros_gz_bridge/src/convert/rcl_interfaces.cpp
index 5673adf..d44441d 100644
--- a/ros_gz_bridge/src/convert/rcl_interfaces.cpp
+++ b/ros_gz_bridge/src/convert/rcl_interfaces.cpp
@@ -27,10 +27,10 @@ template<>
 void
 convert_ros_to_gz(
   const rcl_interfaces::msg::ParameterValue & ros_msg,
-  ignition::msgs::Any & gz_msg)
+  gz::msgs::Any & gz_msg)
 {
   using ParameterType = rcl_interfaces::msg::ParameterType;
-  using Any_ValueType = ignition::msgs::Any_ValueType;
+  using Any_ValueType = gz::msgs::Any_ValueType;
 
   std::string unsupported_type;
   gz_msg.set_type(Any_ValueType::Any_ValueType_NONE);
@@ -92,11 +92,11 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Any & gz_msg,
+  const gz::msgs::Any & gz_msg,
   rcl_interfaces::msg::ParameterValue & ros_msg)
 {
   using ParameterType = rcl_interfaces::msg::ParameterType;
-  using Any_ValueType = ignition::msgs::Any_ValueType;
+  using Any_ValueType = gz::msgs::Any_ValueType;
 
   ros_msg.type = ParameterType::PARAMETER_NOT_SET;
 
diff --git a/ros_gz_bridge/src/convert/rcl_interfaces_TEST.cpp b/ros_gz_bridge/src/convert/rcl_interfaces_TEST.cpp
index ef57779..a74631d 100644
--- a/ros_gz_bridge/src/convert/rcl_interfaces_TEST.cpp
+++ b/ros_gz_bridge/src/convert/rcl_interfaces_TEST.cpp
@@ -19,15 +19,15 @@
 #include <ros_gz_bridge/convert/rcl_interfaces.hpp>
 
 // A more specific set of tests for the rcl_interfaces/msg/ParamValue to
-// ignition::msgs::Any to verify behaviors that couldn't easily be captured
+// gz::msgs::Any to verify behaviors that couldn't easily be captured
 // by the generic test framework
 
 struct RosToGzTest : public ::testing::Test
 {
   using ParameterValue = rcl_interfaces::msg::ParameterValue;
   using ParameterType = rcl_interfaces::msg::ParameterType;
-  using Any = ignition::msgs::Any;
-  using Any_ValueType = ignition::msgs::Any_ValueType;
+  using Any = gz::msgs::Any;
+  using Any_ValueType = gz::msgs::Any_ValueType;
 
   Any gz_msg;
   ParameterValue ros_msg;
diff --git a/ros_gz_bridge/src/convert/ros_gz_interfaces.cpp b/ros_gz_bridge/src/convert/ros_gz_interfaces.cpp
index 844c9c3..fceb296 100644
--- a/ros_gz_bridge/src/convert/ros_gz_interfaces.cpp
+++ b/ros_gz_bridge/src/convert/ros_gz_interfaces.cpp
@@ -21,7 +21,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::JointWrench & ros_msg,
-  ignition::msgs::JointWrench & gz_msg)
+  gz::msgs::JointWrench & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   gz_msg.set_body_1_name(ros_msg.body_1_name.data);
@@ -35,7 +35,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::JointWrench & gz_msg,
+  const gz::msgs::JointWrench & gz_msg,
   ros_gz_interfaces::msg::JointWrench & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -51,7 +51,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Altimeter & ros_msg,
-  ignition::msgs::Altimeter & gz_msg)
+  gz::msgs::Altimeter & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   gz_msg.set_vertical_position(ros_msg.vertical_position);
@@ -62,7 +62,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Altimeter & gz_msg,
+  const gz::msgs::Altimeter & gz_msg,
   ros_gz_interfaces::msg::Altimeter & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -75,34 +75,34 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Entity & ros_msg,
-  ignition::msgs::Entity & gz_msg)
+  gz::msgs::Entity & gz_msg)
 {
   gz_msg.set_id(ros_msg.id);
   gz_msg.set_name(ros_msg.name);
   switch (ros_msg.type) {
     case ros_gz_interfaces::msg::Entity::NONE:
-      gz_msg.set_type(ignition::msgs::Entity::NONE);
+      gz_msg.set_type(gz::msgs::Entity::NONE);
       break;
     case ros_gz_interfaces::msg::Entity::LIGHT:
-      gz_msg.set_type(ignition::msgs::Entity::LIGHT);
+      gz_msg.set_type(gz::msgs::Entity::LIGHT);
       break;
     case ros_gz_interfaces::msg::Entity::MODEL:
-      gz_msg.set_type(ignition::msgs::Entity::MODEL);
+      gz_msg.set_type(gz::msgs::Entity::MODEL);
       break;
     case ros_gz_interfaces::msg::Entity::LINK:
-      gz_msg.set_type(ignition::msgs::Entity::LINK);
+      gz_msg.set_type(gz::msgs::Entity::LINK);
       break;
     case ros_gz_interfaces::msg::Entity::VISUAL:
-      gz_msg.set_type(ignition::msgs::Entity::VISUAL);
+      gz_msg.set_type(gz::msgs::Entity::VISUAL);
       break;
     case ros_gz_interfaces::msg::Entity::COLLISION:
-      gz_msg.set_type(ignition::msgs::Entity::COLLISION);
+      gz_msg.set_type(gz::msgs::Entity::COLLISION);
       break;
     case ros_gz_interfaces::msg::Entity::SENSOR:
-      gz_msg.set_type(ignition::msgs::Entity::SENSOR);
+      gz_msg.set_type(gz::msgs::Entity::SENSOR);
       break;
     case ros_gz_interfaces::msg::Entity::JOINT:
-      gz_msg.set_type(ignition::msgs::Entity::JOINT);
+      gz_msg.set_type(gz::msgs::Entity::JOINT);
       break;
     default:
       std::cerr << "Unsupported entity type [" << ros_msg.type << "]\n";
@@ -112,26 +112,26 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Entity & gz_msg,
+  const gz::msgs::Entity & gz_msg,
   ros_gz_interfaces::msg::Entity & ros_msg)
 {
   ros_msg.id = gz_msg.id();
   ros_msg.name = gz_msg.name();
-  if (gz_msg.type() == ignition::msgs::Entity::Type::Entity_Type_NONE) {
+  if (gz_msg.type() == gz::msgs::Entity::Type::Entity_Type_NONE) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::NONE;
-  } else if (gz_msg.type() == ignition::msgs::Entity::LIGHT) {
+  } else if (gz_msg.type() == gz::msgs::Entity::LIGHT) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::LIGHT;
-  } else if (gz_msg.type() == ignition::msgs::Entity::MODEL) {
+  } else if (gz_msg.type() == gz::msgs::Entity::MODEL) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::MODEL;
-  } else if (gz_msg.type() == ignition::msgs::Entity::LINK) {
+  } else if (gz_msg.type() == gz::msgs::Entity::LINK) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::LINK;
-  } else if (gz_msg.type() == ignition::msgs::Entity::VISUAL) {
+  } else if (gz_msg.type() == gz::msgs::Entity::VISUAL) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::VISUAL;
-  } else if (gz_msg.type() == ignition::msgs::Entity::COLLISION) {
+  } else if (gz_msg.type() == gz::msgs::Entity::COLLISION) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::COLLISION;
-  } else if (gz_msg.type() == ignition::msgs::Entity::SENSOR) {
+  } else if (gz_msg.type() == gz::msgs::Entity::SENSOR) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::SENSOR;
-  } else if (gz_msg.type() == ignition::msgs::Entity::JOINT) {
+  } else if (gz_msg.type() == gz::msgs::Entity::JOINT) {
     ros_msg.type = ros_gz_interfaces::msg::Entity::JOINT;
   } else {
     std::cerr << "Unsupported Entity [" <<
@@ -143,7 +143,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Contact & ros_msg,
-  ignition::msgs::Contact & gz_msg)
+  gz::msgs::Contact & gz_msg)
 {
   convert_ros_to_gz(ros_msg.collision1, (*gz_msg.mutable_collision1()));
   convert_ros_to_gz(ros_msg.collision1, (*gz_msg.mutable_collision2()));
@@ -170,7 +170,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Contact & gz_msg,
+  const gz::msgs::Contact & gz_msg,
   ros_gz_interfaces::msg::Contact & ros_msg)
 {
   convert_gz_to_ros(gz_msg.collision1(), ros_msg.collision1);
@@ -199,7 +199,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Contacts & ros_msg,
-  ignition::msgs::Contacts & gz_msg)
+  gz::msgs::Contacts & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   gz_msg.clear_contact();
@@ -212,7 +212,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Contacts & gz_msg,
+  const gz::msgs::Contacts & gz_msg,
   ros_gz_interfaces::msg::Contacts & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -228,7 +228,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Dataframe & ros_msg,
-  ignition::msgs::Dataframe & gz_msg)
+  gz::msgs::Dataframe & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   auto * rssiPtr = gz_msg.mutable_header()->add_data();
@@ -244,7 +244,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Dataframe & gz_msg,
+  const gz::msgs::Dataframe & gz_msg,
   ros_gz_interfaces::msg::Dataframe & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -279,7 +279,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::GuiCamera & ros_msg,
-  ignition::msgs::GUICamera & gz_msg)
+  gz::msgs::GUICamera & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, *gz_msg.mutable_header());
   gz_msg.set_name(ros_msg.name);
@@ -292,7 +292,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::GUICamera & gz_msg,
+  const gz::msgs::GUICamera & gz_msg,
   ros_gz_interfaces::msg::GuiCamera & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -307,18 +307,18 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Light & ros_msg,
-  ignition::msgs::Light & gz_msg)
+  gz::msgs::Light & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
   gz_msg.set_name(ros_msg.name);
   if (ros_msg.type == 0) {
-    gz_msg.set_type(ignition::msgs::Light_LightType::Light_LightType_POINT);
+    gz_msg.set_type(gz::msgs::Light_LightType::Light_LightType_POINT);
   } else if (ros_msg.type == 1) {
-    gz_msg.set_type(ignition::msgs::Light_LightType::Light_LightType_SPOT);
+    gz_msg.set_type(gz::msgs::Light_LightType::Light_LightType_SPOT);
   } else if (ros_msg.type == 2) {
     gz_msg.set_type(
-      ignition::msgs::Light_LightType::Light_LightType_DIRECTIONAL);
+      gz::msgs::Light_LightType::Light_LightType_DIRECTIONAL);
   }
 
   convert_ros_to_gz(ros_msg.pose, *gz_msg.mutable_pose());
@@ -344,19 +344,19 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Light & gz_msg,
+  const gz::msgs::Light & gz_msg,
   ros_gz_interfaces::msg::Light & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
 
   ros_msg.name = gz_msg.name();
   if (gz_msg.type() ==
-    ignition::msgs::Light_LightType::Light_LightType_POINT)
+    gz::msgs::Light_LightType::Light_LightType_POINT)
   {
     ros_msg.type = 0;
-  } else if (gz_msg.type() == ignition::msgs::Light_LightType::Light_LightType_SPOT) {
+  } else if (gz_msg.type() == gz::msgs::Light_LightType::Light_LightType_SPOT) {
     ros_msg.type = 1;
-  } else if (gz_msg.type() == ignition::msgs::Light_LightType::Light_LightType_DIRECTIONAL) {
+  } else if (gz_msg.type() == gz::msgs::Light_LightType::Light_LightType_DIRECTIONAL) {
     ros_msg.type = 2;
   }
 
@@ -384,15 +384,15 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::SensorNoise & ros_msg,
-  ignition::msgs::SensorNoise & gz_msg)
+  gz::msgs::SensorNoise & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, *gz_msg.mutable_header());
   if (ros_msg.type == 0) {
-    gz_msg.set_type(ignition::msgs::SensorNoise_Type::SensorNoise_Type_NONE);
+    gz_msg.set_type(gz::msgs::SensorNoise_Type::SensorNoise_Type_NONE);
   } else if (ros_msg.type == 2) {
-    gz_msg.set_type(ignition::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN);
+    gz_msg.set_type(gz::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN);
   } else if (ros_msg.type == 3) {
-    gz_msg.set_type(ignition::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED);
+    gz_msg.set_type(gz::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED);
   }
 
   gz_msg.set_mean(ros_msg.mean);
@@ -406,17 +406,17 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::SensorNoise & gz_msg,
+  const gz::msgs::SensorNoise & gz_msg,
   ros_gz_interfaces::msg::SensorNoise & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
 
-  if (gz_msg.type() == ignition::msgs::SensorNoise_Type::SensorNoise_Type_NONE) {
+  if (gz_msg.type() == gz::msgs::SensorNoise_Type::SensorNoise_Type_NONE) {
     ros_msg.type = 0;
-  } else if (gz_msg.type() == ignition::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN) {
+  } else if (gz_msg.type() == gz::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN) {
     ros_msg.type = 2;
   } else if (gz_msg.type() ==  // NOLINT
-    ignition::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED)  // NOLINT
+    gz::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED)  // NOLINT
   {  // NOLINT
     ros_msg.type = 3;
   }
@@ -433,7 +433,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::StringVec & ros_msg,
-  ignition::msgs::StringMsg_V & gz_msg)
+  gz::msgs::StringMsg_V & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, *gz_msg.mutable_header());
   for (const auto & elem : ros_msg.data) {
@@ -445,7 +445,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::StringMsg_V & gz_msg,
+  const gz::msgs::StringMsg_V & gz_msg,
   ros_gz_interfaces::msg::StringVec & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -458,12 +458,12 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::ParamVec & ros_msg,
-  ignition::msgs::Param & gz_msg)
+  gz::msgs::Param & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
   for (auto param : ros_msg.params) {
-    ignition::msgs::Any anyValue;
+    gz::msgs::Any anyValue;
     convert_ros_to_gz(param.value, anyValue);
     auto new_param = gz_msg.mutable_params();
     (*new_param)[param.name] = anyValue;
@@ -473,7 +473,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Param & gz_msg,
+  const gz::msgs::Param & gz_msg,
   ros_gz_interfaces::msg::ParamVec & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -502,7 +502,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::ParamVec & ros_msg,
-  ignition::msgs::Param_V & gz_msg)
+  gz::msgs::Param_V & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -519,7 +519,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Param_V & gz_msg,
+  const gz::msgs::Param_V & gz_msg,
   ros_gz_interfaces::msg::ParamVec & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -542,7 +542,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::TrackVisual & ros_msg,
-  ignition::msgs::TrackVisual & gz_msg)
+  gz::msgs::TrackVisual & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, *gz_msg.mutable_header());
   gz_msg.set_name(ros_msg.name);
@@ -559,7 +559,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::TrackVisual & gz_msg,
+  const gz::msgs::TrackVisual & gz_msg,
   ros_gz_interfaces::msg::TrackVisual & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -578,7 +578,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::VideoRecord & ros_msg,
-  ignition::msgs::VideoRecord & gz_msg)
+  gz::msgs::VideoRecord & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, *gz_msg.mutable_header());
   gz_msg.set_start(ros_msg.start);
@@ -590,7 +590,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::VideoRecord & gz_msg,
+  const gz::msgs::VideoRecord & gz_msg,
   ros_gz_interfaces::msg::VideoRecord & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -604,7 +604,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::WorldControl & ros_msg,
-  ignition::msgs::WorldControl & gz_msg)
+  gz::msgs::WorldControl & gz_msg)
 {
   gz_msg.set_pause(ros_msg.pause);
   gz_msg.set_step(ros_msg.step);
@@ -617,7 +617,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::WorldControl & gz_msg,
+  const gz::msgs::WorldControl & gz_msg,
   ros_gz_interfaces::msg::WorldControl & ros_msg)
 {
   ros_msg.pause = gz_msg.pause();
@@ -632,7 +632,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::WorldReset & ros_msg,
-  ignition::msgs::WorldReset & gz_msg)
+  gz::msgs::WorldReset & gz_msg)
 {
   gz_msg.set_all(ros_msg.all);
   gz_msg.set_time_only(ros_msg.time_only);
@@ -642,7 +642,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::WorldReset & gz_msg,
+  const gz::msgs::WorldReset & gz_msg,
   ros_gz_interfaces::msg::WorldReset & ros_msg)
 {
   ros_msg.all = gz_msg.all();
@@ -654,7 +654,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::msg::Float32Array & ros_msg,
-  ignition::msgs::Float_V & gz_msg)
+  gz::msgs::Float_V & gz_msg)
 {
   gz_msg.clear_data();
   for (auto const & t : ros_msg.data) {
@@ -665,7 +665,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Float_V & gz_msg,
+  const gz::msgs::Float_V & gz_msg,
   ros_gz_interfaces::msg::Float32Array & ros_msg)
 {
   ros_msg.data.clear();
diff --git a/ros_gz_bridge/src/convert/ros_gz_interfaces_TEST.cpp b/ros_gz_bridge/src/convert/ros_gz_interfaces_TEST.cpp
index 160685b..a4d0e10 100644
--- a/ros_gz_bridge/src/convert/ros_gz_interfaces_TEST.cpp
+++ b/ros_gz_bridge/src/convert/ros_gz_interfaces_TEST.cpp
@@ -23,11 +23,11 @@ struct RosToGzTest : public ::testing::Test
   using ParameterValue = rcl_interfaces::msg::ParameterValue;
   using ParameterType = rcl_interfaces::msg::ParameterType;
 
-  using Any = ignition::msgs::Any;
-  using Any_ValueType = ignition::msgs::Any_ValueType;
+  using Any = gz::msgs::Any;
+  using Any_ValueType = gz::msgs::Any_ValueType;
 
   using ParamVec = ros_gz_interfaces::msg::ParamVec;
-  using Param = ignition::msgs::Param;
+  using Param = gz::msgs::Param;
 
   Param gz_msg;
   ParamVec ros_msg;
diff --git a/ros_gz_bridge/src/convert/rosgraph_msgs.cpp b/ros_gz_bridge/src/convert/rosgraph_msgs.cpp
index c6da7fc..26bab38 100644
--- a/ros_gz_bridge/src/convert/rosgraph_msgs.cpp
+++ b/ros_gz_bridge/src/convert/rosgraph_msgs.cpp
@@ -23,7 +23,7 @@ namespace ros_gz_bridge
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Clock & gz_msg,
+  const gz::msgs::Clock & gz_msg,
   rosgraph_msgs::msg::Clock & ros_msg)
 {
   ros_msg.clock = rclcpp::Time(gz_msg.sim().sec(), gz_msg.sim().nsec());
@@ -33,7 +33,7 @@ template<>
 void
 convert_ros_to_gz(
   const rosgraph_msgs::msg::Clock & ros_msg,
-  ignition::msgs::Clock & gz_msg)
+  gz::msgs::Clock & gz_msg)
 {
   gz_msg.mutable_sim()->set_sec(ros_msg.clock.sec);
   gz_msg.mutable_sim()->set_nsec(ros_msg.clock.nanosec);
diff --git a/ros_gz_bridge/src/convert/sensor_msgs.cpp b/ros_gz_bridge/src/convert/sensor_msgs.cpp
index 2942bc6..f93df31 100644
--- a/ros_gz_bridge/src/convert/sensor_msgs.cpp
+++ b/ros_gz_bridge/src/convert/sensor_msgs.cpp
@@ -24,7 +24,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::FluidPressure & ros_msg,
-  ignition::msgs::FluidPressure & gz_msg)
+  gz::msgs::FluidPressure & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   gz_msg.set_pressure(ros_msg.fluid_pressure);
@@ -34,7 +34,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::FluidPressure & gz_msg,
+  const gz::msgs::FluidPressure & gz_msg,
   sensor_msgs::msg::FluidPressure & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -46,7 +46,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::Image & ros_msg,
-  ignition::msgs::Image & gz_msg)
+  gz::msgs::Image & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -57,43 +57,43 @@ convert_ros_to_gz(
   unsigned int octets_per_channel;
 
   if (ros_msg.encoding == "mono8") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::L_INT8);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::L_INT8);
     num_channels = 1;
     octets_per_channel = 1u;
   } else if (ros_msg.encoding == "mono16") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::L_INT16);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::L_INT16);
     num_channels = 1;
     octets_per_channel = 2u;
   } else if (ros_msg.encoding == "rgb8") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::RGB_INT8);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::RGB_INT8);
     num_channels = 3;
     octets_per_channel = 1u;
   } else if (ros_msg.encoding == "rgba8") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::RGBA_INT8);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::RGBA_INT8);
     num_channels = 4;
     octets_per_channel = 1u;
   } else if (ros_msg.encoding == "bgra8") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::BGRA_INT8);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::BGRA_INT8);
     num_channels = 4;
     octets_per_channel = 1u;
   } else if (ros_msg.encoding == "rgb16") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::RGB_INT16);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::RGB_INT16);
     num_channels = 3;
     octets_per_channel = 2u;
   } else if (ros_msg.encoding == "bgr8") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::BGR_INT8);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::BGR_INT8);
     num_channels = 3;
     octets_per_channel = 1u;
   } else if (ros_msg.encoding == "bgr16") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::BGR_INT16);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::BGR_INT16);
     num_channels = 3;
     octets_per_channel = 2u;
   } else if (ros_msg.encoding == "32FC1") {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::R_FLOAT32);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::R_FLOAT32);
     num_channels = 1;
     octets_per_channel = 4u;
   } else {
-    gz_msg.set_pixel_format_type(ignition::msgs::PixelFormatType::UNKNOWN_PIXEL_FORMAT);
+    gz_msg.set_pixel_format_type(gz::msgs::PixelFormatType::UNKNOWN_PIXEL_FORMAT);
     std::cerr << "Unsupported pixel format [" << ros_msg.encoding << "]" << std::endl;
     return;
   }
@@ -106,7 +106,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Image & gz_msg,
+  const gz::msgs::Image & gz_msg,
   sensor_msgs::msg::Image & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -117,39 +117,39 @@ convert_gz_to_ros(
   unsigned int num_channels;
   unsigned int octets_per_channel;
 
-  if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::L_INT8) {
+  if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::L_INT8) {
     ros_msg.encoding = "mono8";
     num_channels = 1;
     octets_per_channel = 1u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::L_INT16) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::L_INT16) {
     ros_msg.encoding = "mono16";
     num_channels = 1;
     octets_per_channel = 2u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::RGB_INT8) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::RGB_INT8) {
     ros_msg.encoding = "rgb8";
     num_channels = 3;
     octets_per_channel = 1u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::RGBA_INT8) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::RGBA_INT8) {
     ros_msg.encoding = "rgba8";
     num_channels = 4;
     octets_per_channel = 1u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::BGRA_INT8) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::BGRA_INT8) {
     ros_msg.encoding = "bgra8";
     num_channels = 4;
     octets_per_channel = 1u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::RGB_INT16) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::RGB_INT16) {
     ros_msg.encoding = "rgb16";
     num_channels = 3;
     octets_per_channel = 2u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::BGR_INT8) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::BGR_INT8) {
     ros_msg.encoding = "bgr8";
     num_channels = 3;
     octets_per_channel = 1u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::BGR_INT16) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::BGR_INT16) {
     ros_msg.encoding = "bgr16";
     num_channels = 3;
     octets_per_channel = 2u;
-  } else if (gz_msg.pixel_format_type() == ignition::msgs::PixelFormatType::R_FLOAT32) {
+  } else if (gz_msg.pixel_format_type() == gz::msgs::PixelFormatType::R_FLOAT32) {
     ros_msg.encoding = "32FC1";
     num_channels = 1;
     octets_per_channel = 4u;
@@ -173,7 +173,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::CameraInfo & ros_msg,
-  ignition::msgs::CameraInfo & gz_msg)
+  gz::msgs::CameraInfo & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -182,11 +182,11 @@ convert_ros_to_gz(
 
   auto distortion = gz_msg.mutable_distortion();
   if (ros_msg.distortion_model == "plumb_bob") {
-    distortion->set_model(ignition::msgs::CameraInfo::Distortion::PLUMB_BOB);
+    distortion->set_model(gz::msgs::CameraInfo::Distortion::PLUMB_BOB);
   } else if (ros_msg.distortion_model == "rational_polynomial") {
-    distortion->set_model(ignition::msgs::CameraInfo::Distortion::RATIONAL_POLYNOMIAL);
+    distortion->set_model(gz::msgs::CameraInfo::Distortion::RATIONAL_POLYNOMIAL);
   } else if (ros_msg.distortion_model == "equidistant") {
-    distortion->set_model(ignition::msgs::CameraInfo::Distortion::EQUIDISTANT);
+    distortion->set_model(gz::msgs::CameraInfo::Distortion::EQUIDISTANT);
   } else {
     std::cerr << "Unsupported distortion model [" << ros_msg.distortion_model << "]" << std::endl;
   }
@@ -213,7 +213,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::CameraInfo & gz_msg,
+  const gz::msgs::CameraInfo & gz_msg,
   sensor_msgs::msg::CameraInfo & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -223,11 +223,11 @@ convert_gz_to_ros(
 
   if (gz_msg.has_distortion()) {
     const auto & distortion = gz_msg.distortion();
-    if (distortion.model() == ignition::msgs::CameraInfo::Distortion::PLUMB_BOB) {
+    if (distortion.model() == gz::msgs::CameraInfo::Distortion::PLUMB_BOB) {
       ros_msg.distortion_model = "plumb_bob";
-    } else if (distortion.model() == ignition::msgs::CameraInfo::Distortion::RATIONAL_POLYNOMIAL) {
+    } else if (distortion.model() == gz::msgs::CameraInfo::Distortion::RATIONAL_POLYNOMIAL) {
       ros_msg.distortion_model = "rational_polynomial";
-    } else if (distortion.model() == ignition::msgs::CameraInfo::Distortion::EQUIDISTANT) {
+    } else if (distortion.model() == gz::msgs::CameraInfo::Distortion::EQUIDISTANT) {
       ros_msg.distortion_model = "equidistant";
     } else {
       std::cerr << "Unsupported distortion model [" << distortion.model() << "]" << std::endl;
@@ -264,7 +264,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::Imu & ros_msg,
-  ignition::msgs::IMU & gz_msg)
+  gz::msgs::IMU & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -279,7 +279,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::IMU & gz_msg,
+  const gz::msgs::IMU & gz_msg,
   sensor_msgs::msg::Imu & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -294,7 +294,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::JointState & ros_msg,
-  ignition::msgs::Model & gz_msg)
+  gz::msgs::Model & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -310,7 +310,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Model & gz_msg,
+  const gz::msgs::Model & gz_msg,
   sensor_msgs::msg::JointState & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -327,7 +327,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::Joy & ros_msg,
-  ignition::msgs::Joy & gz_msg)
+  gz::msgs::Joy & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -343,7 +343,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Joy & gz_msg,
+  const gz::msgs::Joy & gz_msg,
   sensor_msgs::msg::Joy & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -361,7 +361,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::LaserScan & ros_msg,
-  ignition::msgs::LaserScan & gz_msg)
+  gz::msgs::LaserScan & gz_msg)
 {
   const unsigned int num_readings =
     (ros_msg.angle_max - ros_msg.angle_min) / ros_msg.angle_increment;
@@ -390,7 +390,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::LaserScan & gz_msg,
+  const gz::msgs::LaserScan & gz_msg,
   sensor_msgs::msg::LaserScan & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -432,7 +432,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::MagneticField & ros_msg,
-  ignition::msgs::Magnetometer & gz_msg)
+  gz::msgs::Magnetometer & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   convert_ros_to_gz(ros_msg.magnetic_field, (*gz_msg.mutable_field_tesla()));
@@ -441,7 +441,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Magnetometer & gz_msg,
+  const gz::msgs::Magnetometer & gz_msg,
   sensor_msgs::msg::MagneticField & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -454,7 +454,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::NavSatFix & ros_msg,
-  ignition::msgs::NavSat & gz_msg)
+  gz::msgs::NavSat & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
   gz_msg.set_latitude_deg(ros_msg.latitude);
@@ -471,7 +471,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::NavSat & gz_msg,
+  const gz::msgs::NavSat & gz_msg,
   sensor_msgs::msg::NavSatFix & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -480,7 +480,7 @@ convert_gz_to_ros(
   ros_msg.longitude = gz_msg.longitude_deg();
   ros_msg.altitude = gz_msg.altitude();
 
-  // position_covariance is not supported in Ignition::Msgs::NavSat.
+  // position_covariance is not supported in gz::Msgs::NavSat.
   ros_msg.position_covariance_type = sensor_msgs::msg::NavSatFix::COVARIANCE_TYPE_UNKNOWN;
   ros_msg.status.status = sensor_msgs::msg::NavSatStatus::STATUS_FIX;
 }
@@ -489,7 +489,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::PointCloud2 & ros_msg,
-  ignition::msgs::PointCloudPacked & gz_msg)
+  gz::msgs::PointCloudPacked & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -503,35 +503,35 @@ convert_ros_to_gz(
   memcpy(gz_msg.mutable_data()->data(), ros_msg.data.data(), ros_msg.data.size());
 
   for (const auto & field : ros_msg.fields) {
-    ignition::msgs::PointCloudPacked::Field * pf = gz_msg.add_field();
+    gz::msgs::PointCloudPacked::Field * pf = gz_msg.add_field();
     pf->set_name(field.name);
     pf->set_count(field.count);
     pf->set_offset(field.offset);
     switch (field.datatype) {
       default:
       case sensor_msgs::msg::PointField::INT8:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::INT8);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::INT8);
         break;
       case sensor_msgs::msg::PointField::UINT8:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::UINT8);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::UINT8);
         break;
       case sensor_msgs::msg::PointField::INT16:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::INT16);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::INT16);
         break;
       case sensor_msgs::msg::PointField::UINT16:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::UINT16);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::UINT16);
         break;
       case sensor_msgs::msg::PointField::INT32:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::INT32);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::INT32);
         break;
       case sensor_msgs::msg::PointField::UINT32:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::UINT32);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::UINT32);
         break;
       case sensor_msgs::msg::PointField::FLOAT32:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::FLOAT32);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::FLOAT32);
         break;
       case sensor_msgs::msg::PointField::FLOAT64:
-        pf->set_datatype(ignition::msgs::PointCloudPacked::Field::FLOAT64);
+        pf->set_datatype(gz::msgs::PointCloudPacked::Field::FLOAT64);
         break;
     }
   }
@@ -540,7 +540,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::PointCloudPacked & gz_msg,
+  const gz::msgs::PointCloudPacked & gz_msg,
   sensor_msgs::msg::PointCloud2 & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -561,28 +561,28 @@ convert_gz_to_ros(
     pf.offset = gz_msg.field(i).offset();
     switch (gz_msg.field(i).datatype()) {
       default:
-      case ignition::msgs::PointCloudPacked::Field::INT8:
+      case gz::msgs::PointCloudPacked::Field::INT8:
         pf.datatype = sensor_msgs::msg::PointField::INT8;
         break;
-      case ignition::msgs::PointCloudPacked::Field::UINT8:
+      case gz::msgs::PointCloudPacked::Field::UINT8:
         pf.datatype = sensor_msgs::msg::PointField::UINT8;
         break;
-      case ignition::msgs::PointCloudPacked::Field::INT16:
+      case gz::msgs::PointCloudPacked::Field::INT16:
         pf.datatype = sensor_msgs::msg::PointField::INT16;
         break;
-      case ignition::msgs::PointCloudPacked::Field::UINT16:
+      case gz::msgs::PointCloudPacked::Field::UINT16:
         pf.datatype = sensor_msgs::msg::PointField::UINT16;
         break;
-      case ignition::msgs::PointCloudPacked::Field::INT32:
+      case gz::msgs::PointCloudPacked::Field::INT32:
         pf.datatype = sensor_msgs::msg::PointField::INT32;
         break;
-      case ignition::msgs::PointCloudPacked::Field::UINT32:
+      case gz::msgs::PointCloudPacked::Field::UINT32:
         pf.datatype = sensor_msgs::msg::PointField::UINT32;
         break;
-      case ignition::msgs::PointCloudPacked::Field::FLOAT32:
+      case gz::msgs::PointCloudPacked::Field::FLOAT32:
         pf.datatype = sensor_msgs::msg::PointField::FLOAT32;
         break;
-      case ignition::msgs::PointCloudPacked::Field::FLOAT64:
+      case gz::msgs::PointCloudPacked::Field::FLOAT64:
         pf.datatype = sensor_msgs::msg::PointField::FLOAT64;
         break;
     }
@@ -594,7 +594,7 @@ template<>
 void
 convert_ros_to_gz(
   const sensor_msgs::msg::BatteryState & ros_msg,
-  ignition::msgs::BatteryState & gz_msg)
+  gz::msgs::BatteryState & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -606,19 +606,19 @@ convert_ros_to_gz(
 
   switch (ros_msg.power_supply_status) {
     case sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_UNKNOWN:
-      gz_msg.set_power_supply_status(ignition::msgs::BatteryState::UNKNOWN);
+      gz_msg.set_power_supply_status(gz::msgs::BatteryState::UNKNOWN);
       break;
     case sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_CHARGING:
-      gz_msg.set_power_supply_status(ignition::msgs::BatteryState::CHARGING);
+      gz_msg.set_power_supply_status(gz::msgs::BatteryState::CHARGING);
       break;
     case sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_DISCHARGING:
-      gz_msg.set_power_supply_status(ignition::msgs::BatteryState::DISCHARGING);
+      gz_msg.set_power_supply_status(gz::msgs::BatteryState::DISCHARGING);
       break;
     case sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_NOT_CHARGING:
-      gz_msg.set_power_supply_status(ignition::msgs::BatteryState::NOT_CHARGING);
+      gz_msg.set_power_supply_status(gz::msgs::BatteryState::NOT_CHARGING);
       break;
     case sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_FULL:
-      gz_msg.set_power_supply_status(ignition::msgs::BatteryState::FULL);
+      gz_msg.set_power_supply_status(gz::msgs::BatteryState::FULL);
       break;
     default:
       std::cerr << "Unsupported power supply status [" << ros_msg.power_supply_status << "]\n";
@@ -628,7 +628,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::BatteryState & gz_msg,
+  const gz::msgs::BatteryState & gz_msg,
   sensor_msgs::msg::BatteryState & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
@@ -640,15 +640,15 @@ convert_gz_to_ros(
   ros_msg.design_capacity = std::numeric_limits<double>::quiet_NaN();
   ros_msg.percentage = gz_msg.percentage();
 
-  if (gz_msg.power_supply_status() == ignition::msgs::BatteryState::UNKNOWN) {
+  if (gz_msg.power_supply_status() == gz::msgs::BatteryState::UNKNOWN) {
     ros_msg.power_supply_status = sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_UNKNOWN;
-  } else if (gz_msg.power_supply_status() == ignition::msgs::BatteryState::CHARGING) {
+  } else if (gz_msg.power_supply_status() == gz::msgs::BatteryState::CHARGING) {
     ros_msg.power_supply_status = sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_CHARGING;
-  } else if (gz_msg.power_supply_status() == ignition::msgs::BatteryState::DISCHARGING) {
+  } else if (gz_msg.power_supply_status() == gz::msgs::BatteryState::DISCHARGING) {
     ros_msg.power_supply_status = sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_DISCHARGING;
-  } else if (gz_msg.power_supply_status() == ignition::msgs::BatteryState::NOT_CHARGING) {
+  } else if (gz_msg.power_supply_status() == gz::msgs::BatteryState::NOT_CHARGING) {
     ros_msg.power_supply_status = sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_NOT_CHARGING;
-  } else if (gz_msg.power_supply_status() == ignition::msgs::BatteryState::FULL) {
+  } else if (gz_msg.power_supply_status() == gz::msgs::BatteryState::FULL) {
     ros_msg.power_supply_status = sensor_msgs::msg::BatteryState::POWER_SUPPLY_STATUS_FULL;
   } else {
     std::cerr << "Unsupported power supply status [" <<
diff --git a/ros_gz_bridge/src/convert/std_msgs.cpp b/ros_gz_bridge/src/convert/std_msgs.cpp
index dcde74b..1607bba 100644
--- a/ros_gz_bridge/src/convert/std_msgs.cpp
+++ b/ros_gz_bridge/src/convert/std_msgs.cpp
@@ -23,7 +23,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Bool & ros_msg,
-  ignition::msgs::Boolean & gz_msg)
+  gz::msgs::Boolean & gz_msg)
 {
   gz_msg.set_data(ros_msg.data);
 }
@@ -31,7 +31,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Boolean & gz_msg,
+  const gz::msgs::Boolean & gz_msg,
   std_msgs::msg::Bool & ros_msg)
 {
   ros_msg.data = gz_msg.data();
@@ -41,7 +41,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::ColorRGBA & ros_msg,
-  ignition::msgs::Color & gz_msg)
+  gz::msgs::Color & gz_msg)
 {
   gz_msg.set_r(ros_msg.r);
   gz_msg.set_g(ros_msg.g);
@@ -52,7 +52,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Color & gz_msg,
+  const gz::msgs::Color & gz_msg,
   std_msgs::msg::ColorRGBA & ros_msg)
 {
   ros_msg.r = gz_msg.r();
@@ -65,14 +65,14 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Empty &,
-  ignition::msgs::Empty &)
+  gz::msgs::Empty &)
 {
 }
 
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Empty &,
+  const gz::msgs::Empty &,
   std_msgs::msg::Empty &)
 {
 }
@@ -81,7 +81,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::UInt32 & ros_msg,
-  ignition::msgs::UInt32 & gz_msg)
+  gz::msgs::UInt32 & gz_msg)
 {
   gz_msg.set_data(ros_msg.data);
 }
@@ -89,7 +89,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::UInt32 & gz_msg,
+  const gz::msgs::UInt32 & gz_msg,
   std_msgs::msg::UInt32 & ros_msg)
 {
   ros_msg.data = gz_msg.data();
@@ -99,7 +99,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Float32 & ros_msg,
-  ignition::msgs::Float & gz_msg)
+  gz::msgs::Float & gz_msg)
 {
   gz_msg.set_data(ros_msg.data);
 }
@@ -107,7 +107,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Float & gz_msg,
+  const gz::msgs::Float & gz_msg,
   std_msgs::msg::Float32 & ros_msg)
 {
   ros_msg.data = gz_msg.data();
@@ -117,7 +117,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Float64 & ros_msg,
-  ignition::msgs::Double & gz_msg)
+  gz::msgs::Double & gz_msg)
 {
   gz_msg.set_data(ros_msg.data);
 }
@@ -125,7 +125,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Double & gz_msg,
+  const gz::msgs::Double & gz_msg,
   std_msgs::msg::Float64 & ros_msg)
 {
   ros_msg.data = gz_msg.data();
@@ -135,7 +135,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Header & ros_msg,
-  ignition::msgs::Header & gz_msg)
+  gz::msgs::Header & gz_msg)
 {
   convert_ros_to_gz(ros_msg.stamp, *gz_msg.mutable_stamp());
   auto newPair = gz_msg.add_data();
@@ -147,7 +147,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::Int32 & ros_msg,
-  ignition::msgs::Int32 & gz_msg)
+  gz::msgs::Int32 & gz_msg)
 {
   gz_msg.set_data(ros_msg.data);
 }
@@ -155,7 +155,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Int32 & gz_msg,
+  const gz::msgs::Int32 & gz_msg,
   std_msgs::msg::Int32 & ros_msg)
 {
   ros_msg.data = gz_msg.data();
@@ -164,7 +164,7 @@ convert_gz_to_ros(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Header & gz_msg,
+  const gz::msgs::Header & gz_msg,
   std_msgs::msg::Header & ros_msg)
 {
   convert_gz_to_ros(gz_msg.stamp(), ros_msg.stamp);
@@ -180,7 +180,7 @@ template<>
 void
 convert_ros_to_gz(
   const std_msgs::msg::String & ros_msg,
-  ignition::msgs::StringMsg & gz_msg)
+  gz::msgs::StringMsg & gz_msg)
 {
   gz_msg.set_data(ros_msg.data);
 }
@@ -188,7 +188,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::StringMsg & gz_msg,
+  const gz::msgs::StringMsg & gz_msg,
   std_msgs::msg::String & ros_msg)
 {
   ros_msg.data = gz_msg.data();
diff --git a/ros_gz_bridge/src/convert/tf2_msgs.cpp b/ros_gz_bridge/src/convert/tf2_msgs.cpp
index 2a1b214..b3d6f87 100644
--- a/ros_gz_bridge/src/convert/tf2_msgs.cpp
+++ b/ros_gz_bridge/src/convert/tf2_msgs.cpp
@@ -22,7 +22,7 @@ template<>
 void
 convert_ros_to_gz(
   const tf2_msgs::msg::TFMessage & ros_msg,
-  ignition::msgs::Pose_V & gz_msg)
+  gz::msgs::Pose_V & gz_msg)
 {
   gz_msg.clear_pose();
   for (auto const & t : ros_msg.transforms) {
@@ -40,7 +40,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Pose_V & gz_msg,
+  const gz::msgs::Pose_V & gz_msg,
   tf2_msgs::msg::TFMessage & ros_msg)
 {
   ros_msg.transforms.clear();
diff --git a/ros_gz_bridge/src/convert/trajectory_msgs.cpp b/ros_gz_bridge/src/convert/trajectory_msgs.cpp
index db877c2..270309c 100644
--- a/ros_gz_bridge/src/convert/trajectory_msgs.cpp
+++ b/ros_gz_bridge/src/convert/trajectory_msgs.cpp
@@ -24,7 +24,7 @@ template<>
 void
 convert_ros_to_gz(
   const trajectory_msgs::msg::JointTrajectoryPoint & ros_msg,
-  ignition::msgs::JointTrajectoryPoint & gz_msg)
+  gz::msgs::JointTrajectoryPoint & gz_msg)
 {
   for (const auto & ros_position : ros_msg.positions) {
     gz_msg.add_positions(ros_position);
@@ -39,7 +39,7 @@ convert_ros_to_gz(
     gz_msg.add_effort(ros_effort);
   }
 
-  ignition::msgs::Duration * gz_duration = gz_msg.mutable_time_from_start();
+  gz::msgs::Duration * gz_duration = gz_msg.mutable_time_from_start();
   gz_duration->set_sec(ros_msg.time_from_start.sec);
   gz_duration->set_nsec(ros_msg.time_from_start.nanosec);
 }
@@ -47,7 +47,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::JointTrajectoryPoint & gz_msg,
+  const gz::msgs::JointTrajectoryPoint & gz_msg,
   trajectory_msgs::msg::JointTrajectoryPoint & ros_msg)
 {
   for (auto i = 0; i < gz_msg.positions_size(); ++i) {
@@ -72,7 +72,7 @@ template<>
 void
 convert_ros_to_gz(
   const trajectory_msgs::msg::JointTrajectory & ros_msg,
-  ignition::msgs::JointTrajectory & gz_msg)
+  gz::msgs::JointTrajectory & gz_msg)
 {
   convert_ros_to_gz(ros_msg.header, (*gz_msg.mutable_header()));
 
@@ -81,7 +81,7 @@ convert_ros_to_gz(
   }
 
   for (const auto & ros_point : ros_msg.points) {
-    ignition::msgs::JointTrajectoryPoint * gz_point = gz_msg.add_points();
+    gz::msgs::JointTrajectoryPoint * gz_point = gz_msg.add_points();
     convert_ros_to_gz(ros_point, (*gz_point));
   }
 }
@@ -89,7 +89,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::JointTrajectory & gz_msg,
+  const gz::msgs::JointTrajectory & gz_msg,
   trajectory_msgs::msg::JointTrajectory & ros_msg)
 {
   convert_gz_to_ros(gz_msg.header(), ros_msg.header);
diff --git a/ros_gz_bridge/src/factory.hpp b/ros_gz_bridge/src/factory.hpp
index 607d976..35daf41 100644
--- a/ros_gz_bridge/src/factory.hpp
+++ b/ros_gz_bridge/src/factory.hpp
@@ -19,7 +19,7 @@
 #include <memory>
 #include <string>
 
-#include <ignition/transport/Node.hh>
+#include <gz/transport/Node.hh>
 
 // include ROS 2
 #include <rclcpp/rclcpp.hpp>
@@ -65,9 +65,9 @@ public:
     return publisher;
   }
 
-  ignition::transport::Node::Publisher
+  gz::transport::Node::Publisher
   create_gz_publisher(
-    std::shared_ptr<ignition::transport::Node> gz_node,
+    std::shared_ptr<gz::transport::Node> gz_node,
     const std::string & topic_name,
     size_t /*queue_size*/)
   {
@@ -79,7 +79,7 @@ public:
     rclcpp::Node::SharedPtr ros_node,
     const std::string & topic_name,
     size_t queue_size,
-    ignition::transport::Node::Publisher & gz_pub)
+    gz::transport::Node::Publisher & gz_pub)
   {
     std::function<void(std::shared_ptr<const ROS_T>)> fn = std::bind(
       &Factory<ROS_T, GZ_T>::ros_callback,
@@ -100,15 +100,15 @@ public:
 
   void
   create_gz_subscriber(
-    std::shared_ptr<ignition::transport::Node> node,
+    std::shared_ptr<gz::transport::Node> node,
     const std::string & topic_name,
     size_t /*queue_size*/,
     rclcpp::PublisherBase::SharedPtr ros_pub)
   {
     std::function<void(const GZ_T &,
-      const ignition::transport::MessageInfo &)> subCb =
+      const gz::transport::MessageInfo &)> subCb =
       [this, ros_pub](const GZ_T & _msg,
-        const ignition::transport::MessageInfo & _info)
+        const gz::transport::MessageInfo & _info)
       {
         // Ignore messages that are published from this bridge.
         if (!_info.IntraProcess()) {
@@ -123,7 +123,7 @@ protected:
   static
   void ros_callback(
     std::shared_ptr<const ROS_T> ros_msg,
-    ignition::transport::Node::Publisher & gz_pub,
+    gz::transport::Node::Publisher & gz_pub,
     const std::string & ros_type_name,
     const std::string & gz_type_name,
     rclcpp::Node::SharedPtr ros_node)
diff --git a/ros_gz_bridge/src/factory_interface.hpp b/ros_gz_bridge/src/factory_interface.hpp
index 181a191..b760bcd 100644
--- a/ros_gz_bridge/src/factory_interface.hpp
+++ b/ros_gz_bridge/src/factory_interface.hpp
@@ -19,7 +19,7 @@
 #include <string>
 
 // include Gazebo Transport
-#include <ignition/transport/Node.hh>
+#include <gz/transport/Node.hh>
 
 // include ROS 2
 #include <rclcpp/rclcpp.hpp>
@@ -40,9 +40,9 @@ public:
     size_t queue_size) = 0;
 
   virtual
-  ignition::transport::Node::Publisher
+  gz::transport::Node::Publisher
   create_gz_publisher(
-    std::shared_ptr<ignition::transport::Node> gz_node,
+    std::shared_ptr<gz::transport::Node> gz_node,
     const std::string & topic_name,
     size_t queue_size) = 0;
 
@@ -52,12 +52,12 @@ public:
     rclcpp::Node::SharedPtr ros_node,
     const std::string & topic_name,
     size_t queue_size,
-    ignition::transport::Node::Publisher & gz_pub) = 0;
+    gz::transport::Node::Publisher & gz_pub) = 0;
 
   virtual
   void
   create_gz_subscriber(
-    std::shared_ptr<ignition::transport::Node> node,
+    std::shared_ptr<gz::transport::Node> node,
     const std::string & topic_name,
     size_t queue_size,
     rclcpp::PublisherBase::SharedPtr ros_pub) = 0;
diff --git a/ros_gz_bridge/src/ros_gz_bridge.cpp b/ros_gz_bridge/src/ros_gz_bridge.cpp
index 423a2d3..f542ee9 100644
--- a/ros_gz_bridge/src/ros_gz_bridge.cpp
+++ b/ros_gz_bridge/src/ros_gz_bridge.cpp
@@ -26,7 +26,7 @@ namespace ros_gz_bridge
 RosGzBridge::RosGzBridge(const rclcpp::NodeOptions & options)
 : rclcpp::Node("ros_gz_bridge", options)
 {
-  gz_node_ = std::make_shared<ignition::transport::Node>();
+  gz_node_ = std::make_shared<gz::transport::Node>();
 
   this->declare_parameter<int>("subscription_heartbeat", 1000);
   this->declare_parameter<std::string>("config_file", "");
diff --git a/ros_gz_bridge/src/service_factories/ros_gz_interfaces.cpp b/ros_gz_bridge/src/service_factories/ros_gz_interfaces.cpp
index d5b464d..a3c25a8 100644
--- a/ros_gz_bridge/src/service_factories/ros_gz_interfaces.cpp
+++ b/ros_gz_bridge/src/service_factories/ros_gz_interfaces.cpp
@@ -12,8 +12,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#include <ignition/msgs/boolean.pb.h>
-#include <ignition/msgs/world_control.pb.h>
+#include <gz/msgs/boolean.pb.h>
+#include <gz/msgs/world_control.pb.h>
 
 #include <memory>
 #include <string>
@@ -35,15 +35,15 @@ get_service_factory__ros_gz_interfaces(
 {
   if (
     ros_type_name == "ros_gz_interfaces/srv/ControlWorld" &&
-    (gz_req_type_name.empty() || gz_req_type_name == "ignition.msgs.WorldControl") &&
-    (gz_rep_type_name.empty() || gz_rep_type_name == "ignition.msgs.Boolean"))
+    (gz_req_type_name.empty() || gz_req_type_name == "gz.msgs.WorldControl") &&
+    (gz_rep_type_name.empty() || gz_rep_type_name == "gz.msgs.Boolean"))
   {
     return std::make_shared<
       ServiceFactory<
         ros_gz_interfaces::srv::ControlWorld,
-        ignition::msgs::WorldControl,
-        ignition::msgs::Boolean>
-    >(ros_type_name, "ignition.msgs.WorldControl", "ignition.msgs.Boolean");
+        gz::msgs::WorldControl,
+        gz::msgs::Boolean>
+    >(ros_type_name, "gz.msgs.WorldControl", "gz.msgs.Boolean");
   }
 
   return nullptr;
@@ -53,7 +53,7 @@ template<>
 void
 convert_ros_to_gz(
   const ros_gz_interfaces::srv::ControlWorld::Request & ros_req,
-  ignition::msgs::WorldControl & gz_req)
+  gz::msgs::WorldControl & gz_req)
 {
   convert_ros_to_gz(ros_req.world_control, gz_req);
 }
@@ -61,7 +61,7 @@ convert_ros_to_gz(
 template<>
 void
 convert_gz_to_ros(
-  const ignition::msgs::Boolean & gz_rep,
+  const gz::msgs::Boolean & gz_rep,
   ros_gz_interfaces::srv::ControlWorld::Response & ros_res)
 {
   ros_res.success = gz_rep.data();
diff --git a/ros_gz_bridge/src/service_factory.hpp b/ros_gz_bridge/src/service_factory.hpp
index d4a44d7..f771d61 100644
--- a/ros_gz_bridge/src/service_factory.hpp
+++ b/ros_gz_bridge/src/service_factory.hpp
@@ -20,7 +20,7 @@
 #include <string>
 #include <utility>
 
-#include <ignition/transport/Node.hh>
+#include <gz/transport/Node.hh>
 
 #include <rclcpp/rclcpp.hpp>
 
@@ -50,7 +50,7 @@ public:
   rclcpp::ServiceBase::SharedPtr
   create_ros_service(
     rclcpp::Node::SharedPtr ros_node,
-    std::shared_ptr<ignition::transport::Node> gz_node,
+    std::shared_ptr<gz::transport::Node> gz_node,
     const std::string & service_name) override
   {
     return ros_node->create_service<RosServiceT>(
diff --git a/ros_gz_bridge/src/service_factory_interface.hpp b/ros_gz_bridge/src/service_factory_interface.hpp
index 4905994..9d4f733 100644
--- a/ros_gz_bridge/src/service_factory_interface.hpp
+++ b/ros_gz_bridge/src/service_factory_interface.hpp
@@ -18,7 +18,7 @@
 #include <memory>
 #include <string>
 
-#include <ignition/transport/Node.hh>
+#include <gz/transport/Node.hh>
 
 #include <rclcpp/service.hpp>
 #include <rclcpp/node.hpp>
@@ -33,7 +33,7 @@ public:
   rclcpp::ServiceBase::SharedPtr
   create_ros_service(
     rclcpp::Node::SharedPtr ros_node,
-    std::shared_ptr<ignition::transport::Node> gz_node,
+    std::shared_ptr<gz::transport::Node> gz_node,
     const std::string & service_name) = 0;
 };
 
diff --git a/ros_gz_bridge/test/resource/gz_publisher.cpp.em b/ros_gz_bridge/test/resource/gz_publisher.cpp.em
index 25bc59f..9cccbfe 100644
--- a/ros_gz_bridge/test/resource/gz_publisher.cpp.em
+++ b/ros_gz_bridge/test/resource/gz_publisher.cpp.em
@@ -14,8 +14,8 @@
 
 // This file is generated from test/resource/gz_publisher.cpp.em
 
-#include <ignition/msgs.hh>
-#include <ignition/transport.hh>
+#include <gz/msgs.hh>
+#include <gz/transport.hh>
 
 #include <atomic>
 #include <chrono>
@@ -50,7 +50,7 @@ int main(int /*argc*/, char **/*argv*/)
   std::signal(SIGTERM, signal_handler);
 
   // Create a transport node and advertise a topic.
-  ignition::transport::Node node;
+  gz::transport::Node node;
 
 @[for m in mappings]@
   // @(m.gz_string()).
diff --git a/ros_gz_bridge/test/resource/gz_subscriber.cpp.em b/ros_gz_bridge/test/resource/gz_subscriber.cpp.em
index 9c55f3d..6edae07 100644
--- a/ros_gz_bridge/test/resource/gz_subscriber.cpp.em
+++ b/ros_gz_bridge/test/resource/gz_subscriber.cpp.em
@@ -14,7 +14,7 @@
 
 
 #include <gtest/gtest.h>
-#include <ignition/transport.hh>
+#include <gz/transport.hh>
 
 #include <chrono>
 #include <memory>
@@ -47,7 +47,7 @@ public: void Cb(const GZ_T & _msg)
 public: bool callbackExecuted = false;
 
 /// \brief Transport node;
-private: ignition::transport::Node node;
+private: gz::transport::Node node;
 };
 
 @[for m in mappings]@
diff --git a/ros_gz_bridge/test/serverclient/gz_server.cpp b/ros_gz_bridge/test/serverclient/gz_server.cpp
index c8f10e3..10fa334 100644
--- a/ros_gz_bridge/test/serverclient/gz_server.cpp
+++ b/ros_gz_bridge/test/serverclient/gz_server.cpp
@@ -12,8 +12,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#include <ignition/msgs/boolean.pb.h>
-#include <ignition/msgs/world_control.pb.h>
+#include <gz/msgs/boolean.pb.h>
+#include <gz/msgs/world_control.pb.h>
 
 #include <atomic>
 #include <chrono>
@@ -21,7 +21,7 @@
 #include <iostream>
 #include <thread>
 
-#include <ignition/transport.hh>
+#include <gz/transport.hh>
 
 #include "utils/test_utils.hpp"
 #include "utils/gz_test_msg.hpp"
@@ -42,8 +42,8 @@ void signal_handler(int _signal)
 
 //////////////////////////////////////////////////
 bool control_world(
-  const ignition::msgs::WorldControl &,
-  ignition::msgs::Boolean & _res)
+  const gz::msgs::WorldControl &,
+  gz::msgs::Boolean & _res)
 {
   _res.set_data(true);
   return true;
@@ -58,7 +58,7 @@ int main(int /*argc*/, char **/*argv*/)
   std::signal(SIGTERM, signal_handler);
 
   // Create a transport node and advertise a topic.
-  ignition::transport::Node node;
+  gz::transport::Node node;
 
   // gz::msgs::WorldControl.
   node.Advertise(
diff --git a/ros_gz_bridge/test/utils/gz_test_msg.cpp b/ros_gz_bridge/test/utils/gz_test_msg.cpp
index 11330bc..7e4f642 100644
--- a/ros_gz_bridge/test/utils/gz_test_msg.cpp
+++ b/ros_gz_bridge/test/utils/gz_test_msg.cpp
@@ -24,35 +24,35 @@ namespace ros_gz_bridge
 namespace testing
 {
 
-void createTestMsg(ignition::msgs::Any & _msg)
+void createTestMsg(gz::msgs::Any & _msg)
 {
-  _msg.set_type(ignition::msgs::Any_ValueType::Any_ValueType_STRING);
+  _msg.set_type(gz::msgs::Any_ValueType::Any_ValueType_STRING);
   _msg.set_string_value("foobar");
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Any> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Any> & _msg)
 {
-  ignition::msgs::Any expected_msg;
+  gz::msgs::Any expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.type(), _msg->type());
   EXPECT_EQ(expected_msg.string_value(), _msg->string_value());
 }
 
-void createTestMsg(ignition::msgs::Boolean & _msg)
+void createTestMsg(gz::msgs::Boolean & _msg)
 {
   _msg.set_data(true);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Boolean> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Boolean> & _msg)
 {
-  ignition::msgs::Boolean expected_msg;
+  gz::msgs::Boolean expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.data(), _msg->data());
 }
 
-void createTestMsg(ignition::msgs::Color & _msg)
+void createTestMsg(gz::msgs::Color & _msg)
 {
   _msg.set_r(0.2);
   _msg.set_g(0.4);
@@ -60,9 +60,9 @@ void createTestMsg(ignition::msgs::Color & _msg)
   _msg.set_a(0.8);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Color> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Color> & _msg)
 {
-  ignition::msgs::Color expected_msg;
+  gz::msgs::Color expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.r(), _msg->r());
@@ -71,37 +71,37 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Color> & _msg)
   EXPECT_EQ(expected_msg.a(), _msg->a());
 }
 
-void createTestMsg(ignition::msgs::Empty &)
+void createTestMsg(gz::msgs::Empty &)
 {
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Empty> &)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Empty> &)
 {
 }
 
-void createTestMsg(ignition::msgs::Float & _msg)
+void createTestMsg(gz::msgs::Float & _msg)
 {
   _msg.set_data(1.5);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Float> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Float> & _msg)
 {
-  ignition::msgs::Float expected_msg;
+  gz::msgs::Float expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_FLOAT_EQ(expected_msg.data(), _msg->data());
 }
 
-void createTestMsg(ignition::msgs::Float_V & _msg)
+void createTestMsg(gz::msgs::Float_V & _msg)
 {
-  ignition::msgs::Float msg;
+  gz::msgs::Float msg;
   createTestMsg(msg);
   _msg.add_data(msg.data());
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Float_V> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Float_V> & _msg)
 {
-  ignition::msgs::Float_V expected_msg;
+  gz::msgs::Float_V expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.data().size(), _msg->data().size());
@@ -109,46 +109,46 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Float_V> & _msg)
   EXPECT_FLOAT_EQ(expected_msg.data()[0], _msg->data()[0]);
 }
 
-void createTestMsg(ignition::msgs::Double & _msg)
+void createTestMsg(gz::msgs::Double & _msg)
 {
   _msg.set_data(1.5);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Double> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Double> & _msg)
 {
-  ignition::msgs::Double expected_msg;
+  gz::msgs::Double expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_DOUBLE_EQ(expected_msg.data(), _msg->data());
 }
 
-void createTestMsg(ignition::msgs::Int32 & _msg)
+void createTestMsg(gz::msgs::Int32 & _msg)
 {
   _msg.set_data(-10);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Int32> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Int32> & _msg)
 {
-  ignition::msgs::Int32 expected_msg;
+  gz::msgs::Int32 expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_DOUBLE_EQ(expected_msg.data(), _msg->data());
 }
 
-void createTestMsg(ignition::msgs::UInt32 & _msg)
+void createTestMsg(gz::msgs::UInt32 & _msg)
 {
   _msg.set_data(1);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::UInt32> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::UInt32> & _msg)
 {
-  ignition::msgs::UInt32 expected_msg;
+  gz::msgs::UInt32 expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_DOUBLE_EQ(expected_msg.data(), _msg->data());
 }
 
-void createTestMsg(ignition::msgs::Header & _msg)
+void createTestMsg(gz::msgs::Header & _msg)
 {
   auto seq_entry = _msg.add_data();
   seq_entry->set_key("seq");
@@ -160,10 +160,10 @@ void createTestMsg(ignition::msgs::Header & _msg)
   frame_id_entry->add_value("frame_id_value");
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Header> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Header> & _msg)
 {
   // TODO(anyone): Review this
-  ignition::msgs::Header expected_msg;
+  gz::msgs::Header expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.stamp().sec(), _msg->stamp().sec());
@@ -183,35 +183,35 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Header> & _msg)
   // EXPECT_EQ(expected_msg.data(1).value(0), _msg->data(1).value(0));
 }
 
-void createTestMsg(ignition::msgs::Clock & _msg)
+void createTestMsg(gz::msgs::Clock & _msg)
 {
   _msg.mutable_sim()->set_sec(1);
   _msg.mutable_sim()->set_nsec(2);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Clock> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Clock> & _msg)
 {
-  ignition::msgs::Clock expected_msg;
+  gz::msgs::Clock expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.sim().sec(), _msg->sim().sec());
   EXPECT_EQ(expected_msg.sim().nsec(), _msg->sim().nsec());
 }
 
-void createTestMsg(ignition::msgs::StringMsg & _msg)
+void createTestMsg(gz::msgs::StringMsg & _msg)
 {
   _msg.set_data("string");
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::StringMsg> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::StringMsg> & _msg)
 {
-  ignition::msgs::StringMsg expected_msg;
+  gz::msgs::StringMsg expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.data(), _msg->data());
 }
 
-void createTestMsg(ignition::msgs::Quaternion & _msg)
+void createTestMsg(gz::msgs::Quaternion & _msg)
 {
   _msg.set_x(1.0);
   _msg.set_y(2.0);
@@ -219,9 +219,9 @@ void createTestMsg(ignition::msgs::Quaternion & _msg)
   _msg.set_w(4.0);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Quaternion> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Quaternion> & _msg)
 {
-  ignition::msgs::Quaternion expected_msg;
+  gz::msgs::Quaternion expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.x(), _msg->x());
@@ -230,16 +230,16 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Quaternion> & _msg)
   EXPECT_EQ(expected_msg.w(), _msg->w());
 }
 
-void createTestMsg(ignition::msgs::Vector3d & _msg)
+void createTestMsg(gz::msgs::Vector3d & _msg)
 {
   _msg.set_x(1.0);
   _msg.set_y(2.0);
   _msg.set_z(3.0);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Vector3d> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Vector3d> & _msg)
 {
-  ignition::msgs::Vector3d expected_msg;
+  gz::msgs::Vector3d expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.x(), _msg->x());
@@ -247,7 +247,7 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Vector3d> & _msg)
   EXPECT_EQ(expected_msg.z(), _msg->z());
 }
 
-void createTestMsg(ignition::msgs::Altimeter & _msg)
+void createTestMsg(gz::msgs::Altimeter & _msg)
 {
   createTestMsg(*_msg.mutable_header());
   _msg.set_vertical_position(100);
@@ -255,21 +255,21 @@ void createTestMsg(ignition::msgs::Altimeter & _msg)
   _msg.set_vertical_reference(300);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Altimeter> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Altimeter> & _msg)
 {
-  ignition::msgs::Altimeter expected_msg;
+  gz::msgs::Altimeter expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.vertical_position(), _msg->vertical_position());
   EXPECT_EQ(expected_msg.vertical_velocity(), _msg->vertical_velocity());
   EXPECT_EQ(expected_msg.vertical_reference(), _msg->vertical_reference());
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 }
 
-void createTestMsg(ignition::msgs::SensorNoise & _msg)
+void createTestMsg(gz::msgs::SensorNoise & _msg)
 {
   createTestMsg(*_msg.mutable_header());
-  _msg.set_type(ignition::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED);
+  _msg.set_type(gz::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED);
   _msg.set_mean(100);
   _msg.set_stddev(200);
   _msg.set_bias_mean(300);
@@ -278,59 +278,59 @@ void createTestMsg(ignition::msgs::SensorNoise & _msg)
   _msg.set_dynamic_bias_stddev(600);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::SensorNoise> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::SensorNoise> & _msg)
 {
-  ignition::msgs::SensorNoise expected_msg;
+  gz::msgs::SensorNoise expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(
     expected_msg.type(),
-    ignition::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED);
+    gz::msgs::SensorNoise_Type::SensorNoise_Type_GAUSSIAN_QUANTIZED);
   EXPECT_EQ(expected_msg.mean(), _msg->mean());
   EXPECT_EQ(expected_msg.stddev(), _msg->stddev());
   EXPECT_EQ(expected_msg.bias_mean(), _msg->bias_mean());
   EXPECT_EQ(expected_msg.bias_stddev(), _msg->bias_stddev());
   EXPECT_EQ(expected_msg.precision(), _msg->precision());
   EXPECT_EQ(expected_msg.dynamic_bias_stddev(), _msg->dynamic_bias_stddev());
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 }
 
-void createTestMsg(ignition::msgs::Param & _msg)
+void createTestMsg(gz::msgs::Param & _msg)
 {
   createTestMsg(*_msg.mutable_header());
   auto * params = _msg.mutable_params();
   {
-    ignition::msgs::Any param;
-    param.set_type(ignition::msgs::Any_ValueType::Any_ValueType_STRING);
+    gz::msgs::Any param;
+    param.set_type(gz::msgs::Any_ValueType::Any_ValueType_STRING);
     param.set_string_value("parameter_value_foo");
     (*params)["parameter_name_foo"] = param;
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Param> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Param> & _msg)
 {
-  ignition::msgs::Param expected_msg;
+  gz::msgs::Param expected_msg;
   createTestMsg(expected_msg);
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_EQ(expected_msg.params().size(), _msg->params().size());
 }
 
-void createTestMsg(ignition::msgs::Param_V & _msg)
+void createTestMsg(gz::msgs::Param_V & _msg)
 {
   createTestMsg(*_msg.mutable_header());
   auto param = _msg.mutable_param()->Add();
   createTestMsg(*param);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Param_V> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Param_V> & _msg)
 {
-  ignition::msgs::Param_V expected_msg;
+  gz::msgs::Param_V expected_msg;
   createTestMsg(expected_msg);
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Param>(_msg->param().Get(0)));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Param>(_msg->param().Get(0)));
 }
 
-void createTestMsg(ignition::msgs::Pose & _msg)
+void createTestMsg(gz::msgs::Pose & _msg)
 {
   createTestMsg(*_msg.mutable_header());
   auto child_frame_id_entry = _msg.mutable_header()->add_data();
@@ -341,12 +341,12 @@ void createTestMsg(ignition::msgs::Pose & _msg)
   createTestMsg(*_msg.mutable_orientation());
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Pose> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Pose> & _msg)
 {
   if (_msg->header().data_size() > 0) {
-    compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+    compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
-    ignition::msgs::Pose expected_msg;
+    gz::msgs::Pose expected_msg;
     createTestMsg(expected_msg);
 
     if (_msg->header().data_size() > 2) {
@@ -363,11 +363,11 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Pose> & _msg)
     }
   }
 
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->position()));
-  compareTestMsg(std::make_shared<ignition::msgs::Quaternion>(_msg->orientation()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->position()));
+  compareTestMsg(std::make_shared<gz::msgs::Quaternion>(_msg->orientation()));
 }
 
-void createTestMsg(ignition::msgs::PoseWithCovariance & _msg)
+void createTestMsg(gz::msgs::PoseWithCovariance & _msg)
 {
   createTestMsg(*_msg.mutable_pose()->mutable_position());
   createTestMsg(*_msg.mutable_pose()->mutable_orientation());
@@ -376,35 +376,35 @@ void createTestMsg(ignition::msgs::PoseWithCovariance & _msg)
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::PoseWithCovariance> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::PoseWithCovariance> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->pose().position()));
-  compareTestMsg(std::make_shared<ignition::msgs::Quaternion>(_msg->pose().orientation()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->pose().position()));
+  compareTestMsg(std::make_shared<gz::msgs::Quaternion>(_msg->pose().orientation()));
   for (int i = 0; i < 36; i++) {
     EXPECT_EQ(_msg->covariance().data(i), i);
   }
 }
 
-void createTestMsg(ignition::msgs::Pose_V & _msg)
+void createTestMsg(gz::msgs::Pose_V & _msg)
 {
   createTestMsg(*(_msg.mutable_header()));
   createTestMsg(*(_msg.add_pose()));
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Pose_V> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Pose_V> & _msg)
 {
-  ignition::msgs::Pose_V expected_msg;
+  gz::msgs::Pose_V expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Pose>(_msg->pose(0)));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Pose>(_msg->pose(0)));
 }
 
-void createTestMsg(ignition::msgs::Twist & _msg)
+void createTestMsg(gz::msgs::Twist & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Vector3d linear_msg;
-  ignition::msgs::Vector3d angular_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Vector3d linear_msg;
+  gz::msgs::Vector3d angular_msg;
 
   createTestMsg(header_msg);
   createTestMsg(linear_msg);
@@ -415,16 +415,16 @@ void createTestMsg(ignition::msgs::Twist & _msg)
   _msg.mutable_angular()->CopyFrom(angular_msg);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Twist> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Twist> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->linear()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->angular()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->linear()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->angular()));
 }
 
-void createTestMsg(ignition::msgs::TwistWithCovariance & _msg)
+void createTestMsg(gz::msgs::TwistWithCovariance & _msg)
 {
-  ignition::msgs::Vector3d linear_msg;
-  ignition::msgs::Vector3d angular_msg;
+  gz::msgs::Vector3d linear_msg;
+  gz::msgs::Vector3d angular_msg;
 
   createTestMsg(linear_msg);
   createTestMsg(angular_msg);
@@ -436,20 +436,20 @@ void createTestMsg(ignition::msgs::TwistWithCovariance & _msg)
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::TwistWithCovariance> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::TwistWithCovariance> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->twist().linear()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->twist().angular()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->twist().linear()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->twist().angular()));
   for (int i = 0; i < 36; i++) {
     EXPECT_EQ(_msg->covariance().data()[i], i);
   }
 }
 
-void createTestMsg(ignition::msgs::Wrench & _msg)
+void createTestMsg(gz::msgs::Wrench & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Vector3d force_msg;
-  ignition::msgs::Vector3d torque_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Vector3d force_msg;
+  gz::msgs::Vector3d torque_msg;
 
   createTestMsg(header_msg);
   createTestMsg(force_msg);
@@ -460,17 +460,17 @@ void createTestMsg(ignition::msgs::Wrench & _msg)
   _msg.mutable_torque()->CopyFrom(torque_msg);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Wrench> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Wrench> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->force()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->torque()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->force()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->torque()));
 }
 
-void createTestMsg(ignition::msgs::JointWrench & _msg)
+void createTestMsg(gz::msgs::JointWrench & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Wrench body_1_wrench_msg;
-  ignition::msgs::Wrench body_2_wrench_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Wrench body_1_wrench_msg;
+  gz::msgs::Wrench body_2_wrench_msg;
 
   createTestMsg(header_msg);
   createTestMsg(body_1_wrench_msg);
@@ -485,42 +485,42 @@ void createTestMsg(ignition::msgs::JointWrench & _msg)
   _msg.mutable_body_2_wrench()->CopyFrom(body_2_wrench_msg);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::JointWrench> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::JointWrench> & _msg)
 {
-  ignition::msgs::JointWrench expected_msg;
+  gz::msgs::JointWrench expected_msg;
   createTestMsg(expected_msg);
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_EQ(expected_msg.body_1_name(), _msg->body_1_name());
   EXPECT_EQ(expected_msg.body_2_name(), _msg->body_2_name());
   EXPECT_EQ(expected_msg.body_1_id(), _msg->body_1_id());
   EXPECT_EQ(expected_msg.body_2_id(), _msg->body_2_id());
-  compareTestMsg(std::make_shared<ignition::msgs::Wrench>(_msg->body_1_wrench()));
-  compareTestMsg(std::make_shared<ignition::msgs::Wrench>(_msg->body_2_wrench()));
+  compareTestMsg(std::make_shared<gz::msgs::Wrench>(_msg->body_1_wrench()));
+  compareTestMsg(std::make_shared<gz::msgs::Wrench>(_msg->body_2_wrench()));
 }
 
-void createTestMsg(ignition::msgs::Entity & _msg)
+void createTestMsg(gz::msgs::Entity & _msg)
 {
   _msg.set_id(1);
   _msg.set_name("entity");
-  _msg.set_type(ignition::msgs::Entity::VISUAL);
+  _msg.set_type(gz::msgs::Entity::VISUAL);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Entity> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Entity> & _msg)
 {
-  ignition::msgs::Entity expected_msg;
+  gz::msgs::Entity expected_msg;
   createTestMsg(expected_msg);
   EXPECT_EQ(expected_msg.id(), _msg->id());
   EXPECT_EQ(expected_msg.name(), _msg->name());
   EXPECT_EQ(expected_msg.type(), _msg->type());
 }
 
-void createTestMsg(ignition::msgs::Contact & _msg)
+void createTestMsg(gz::msgs::Contact & _msg)
 {
-  ignition::msgs::Entity collision1;
-  ignition::msgs::Entity collision2;
-  ignition::msgs::Vector3d position_msg;
-  ignition::msgs::Vector3d normal_msg;
-  ignition::msgs::JointWrench wrench_msg;
+  gz::msgs::Entity collision1;
+  gz::msgs::Entity collision2;
+  gz::msgs::Vector3d position_msg;
+  gz::msgs::Vector3d normal_msg;
+  gz::msgs::JointWrench wrench_msg;
 
   createTestMsg(collision1);
   createTestMsg(collision2);
@@ -555,28 +555,28 @@ void createTestMsg(ignition::msgs::Contact & _msg)
   _msg.mutable_collision2()->CopyFrom(collision2);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Contact> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Contact> & _msg)
 {
-  ignition::msgs::Contact expected_msg;
+  gz::msgs::Contact expected_msg;
   createTestMsg(expected_msg);
-  compareTestMsg(std::make_shared<ignition::msgs::Entity>(_msg->collision1()));
-  compareTestMsg(std::make_shared<ignition::msgs::Entity>(_msg->collision2()));
+  compareTestMsg(std::make_shared<gz::msgs::Entity>(_msg->collision1()));
+  compareTestMsg(std::make_shared<gz::msgs::Entity>(_msg->collision2()));
   EXPECT_EQ(expected_msg.depth_size(), _msg->depth_size());
   EXPECT_EQ(expected_msg.position_size(), _msg->position_size());
   EXPECT_EQ(expected_msg.normal_size(), _msg->normal_size());
   EXPECT_EQ(expected_msg.wrench_size(), _msg->wrench_size());
   for (int i = 0; i < expected_msg.depth_size(); i++) {
     EXPECT_EQ(expected_msg.depth(i), _msg->depth(i));
-    compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->position(i)));
-    compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->normal(i)));
-    compareTestMsg(std::make_shared<ignition::msgs::JointWrench>(_msg->wrench(i)));
+    compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->position(i)));
+    compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->normal(i)));
+    compareTestMsg(std::make_shared<gz::msgs::JointWrench>(_msg->wrench(i)));
   }
 }
 
-void createTestMsg(ignition::msgs::Contacts & _msg)
+void createTestMsg(gz::msgs::Contacts & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Contact contact_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Contact contact_msg;
 
   createTestMsg(header_msg);
   createTestMsg(contact_msg);
@@ -594,21 +594,21 @@ void createTestMsg(ignition::msgs::Contacts & _msg)
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Contacts> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Contacts> & _msg)
 {
-  ignition::msgs::Contacts expected_msg;
+  gz::msgs::Contacts expected_msg;
   createTestMsg(expected_msg);
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_EQ(expected_msg.contact_size(), _msg->contact_size());
   for (int i = 0; i < expected_msg.contact_size(); i++) {
-    compareTestMsg(std::make_shared<ignition::msgs::Contact>(_msg->contact(i)));
+    compareTestMsg(std::make_shared<gz::msgs::Contact>(_msg->contact(i)));
   }
 }
 
 #if HAVE_DATAFRAME
-void createTestMsg(ignition::msgs::Dataframe & _msg)
+void createTestMsg(gz::msgs::Dataframe & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
   _msg.mutable_header()->CopyFrom(header_msg);
 
@@ -621,11 +621,11 @@ void createTestMsg(ignition::msgs::Dataframe & _msg)
   _msg.set_data(std::string(150, '1'));
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Dataframe> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Dataframe> & _msg)
 {
-  ignition::msgs::Dataframe expected_msg;
+  gz::msgs::Dataframe expected_msg;
   createTestMsg(expected_msg);
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
   ASSERT_GT(_msg->header().data_size(), 0);
   bool rssiFound = false;
@@ -645,25 +645,25 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Dataframe> & _msg)
 }
 #endif  // HAVE_DATAFRAME
 
-void createTestMsg(ignition::msgs::Image & _msg)
+void createTestMsg(gz::msgs::Image & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
 
   _msg.mutable_header()->CopyFrom(header_msg);
   _msg.set_width(320);
   _msg.set_height(240);
-  _msg.set_pixel_format_type(ignition::msgs::PixelFormatType::RGB_INT8);
+  _msg.set_pixel_format_type(gz::msgs::PixelFormatType::RGB_INT8);
   _msg.set_step(_msg.width() * 3);
   _msg.set_data(std::string(_msg.height() * _msg.step(), '1'));
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Image> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Image> & _msg)
 {
-  ignition::msgs::Image expected_msg;
+  gz::msgs::Image expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_EQ(expected_msg.width(), _msg->width());
   EXPECT_EQ(expected_msg.height(), _msg->height());
   EXPECT_EQ(expected_msg.pixel_format_type(), _msg->pixel_format_type());
@@ -671,9 +671,9 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Image> & _msg)
   EXPECT_EQ(expected_msg.data(), _msg->data());
 }
 
-void createTestMsg(ignition::msgs::CameraInfo & _msg)
+void createTestMsg(gz::msgs::CameraInfo & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
 
   _msg.mutable_header()->CopyFrom(header_msg);
@@ -681,7 +681,7 @@ void createTestMsg(ignition::msgs::CameraInfo & _msg)
   _msg.set_height(240);
 
   auto distortion = _msg.mutable_distortion();
-  distortion->set_model(ignition::msgs::CameraInfo::Distortion::PLUMB_BOB);
+  distortion->set_model(gz::msgs::CameraInfo::Distortion::PLUMB_BOB);
   distortion->add_k(1);
   distortion->add_k(2);
   distortion->add_k(3);
@@ -724,15 +724,15 @@ void createTestMsg(ignition::msgs::CameraInfo & _msg)
   _msg.add_rectification_matrix(1);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::CameraInfo> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::CameraInfo> & _msg)
 {
-  ignition::msgs::CameraInfo expected_msg;
+  gz::msgs::CameraInfo expected_msg;
   createTestMsg(expected_msg);
 
   ASSERT_TRUE(expected_msg.has_header());
   ASSERT_TRUE(_msg->has_header());
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_EQ(expected_msg.width(), _msg->width());
   EXPECT_EQ(expected_msg.height(), _msg->height());
 
@@ -773,9 +773,9 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::CameraInfo> & _msg)
   }
 }
 
-void createTestMsg(ignition::msgs::FluidPressure & _msg)
+void createTestMsg(gz::msgs::FluidPressure & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
 
   _msg.mutable_header()->CopyFrom(header_msg);
@@ -783,21 +783,21 @@ void createTestMsg(ignition::msgs::FluidPressure & _msg)
   _msg.set_variance(0.456);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::FluidPressure> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::FluidPressure> & _msg)
 {
-  ignition::msgs::FluidPressure expected_msg;
+  gz::msgs::FluidPressure expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_FLOAT_EQ(expected_msg.pressure(), _msg->pressure());
   EXPECT_FLOAT_EQ(expected_msg.variance(), _msg->variance());
 }
 
-void createTestMsg(ignition::msgs::IMU & _msg)
+void createTestMsg(gz::msgs::IMU & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Quaternion quaternion_msg;
-  ignition::msgs::Vector3d vector3_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Quaternion quaternion_msg;
+  gz::msgs::Vector3d vector3_msg;
 
   createTestMsg(header_msg);
   createTestMsg(quaternion_msg);
@@ -809,24 +809,24 @@ void createTestMsg(ignition::msgs::IMU & _msg)
   _msg.mutable_linear_acceleration()->CopyFrom(vector3_msg);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::IMU> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::IMU> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Quaternion>(_msg->orientation()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->angular_velocity()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->linear_acceleration()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Quaternion>(_msg->orientation()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->angular_velocity()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->linear_acceleration()));
 }
 
-void createTestMsg(ignition::msgs::Axis & _msg)
+void createTestMsg(gz::msgs::Axis & _msg)
 {
   _msg.set_position(1.0);
   _msg.set_velocity(2.0);
   _msg.set_force(3.0);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Axis> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Axis> & _msg)
 {
-  ignition::msgs::Axis expected_msg;
+  gz::msgs::Axis expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_DOUBLE_EQ(expected_msg.position(), _msg->position());
@@ -834,9 +834,9 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Axis> & _msg)
   EXPECT_DOUBLE_EQ(expected_msg.force(), _msg->force());
 }
 
-void createTestMsg(ignition::msgs::Model & _msg)
+void createTestMsg(gz::msgs::Model & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
   _msg.mutable_header()->CopyFrom(header_msg);
 
@@ -844,29 +844,29 @@ void createTestMsg(ignition::msgs::Model & _msg)
     auto newJoint = _msg.add_joint();
     newJoint->set_name("joint_" + std::to_string(i));
 
-    ignition::msgs::Axis axis_msg;
+    gz::msgs::Axis axis_msg;
     createTestMsg(axis_msg);
     newJoint->mutable_axis1()->CopyFrom(axis_msg);
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Model> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Model> & _msg)
 {
-  ignition::msgs::Model expected_msg;
+  gz::msgs::Model expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
   ASSERT_EQ(expected_msg.joint_size(), _msg->joint_size());
   for (auto i = 0; i < _msg->joint_size(); ++i) {
     EXPECT_EQ(expected_msg.joint(i).name(), _msg->joint(i).name());
-    compareTestMsg(std::make_shared<ignition::msgs::Axis>(_msg->joint(i).axis1()));
+    compareTestMsg(std::make_shared<gz::msgs::Axis>(_msg->joint(i).axis1()));
   }
 }
 
-void createTestMsg(ignition::msgs::Joy & _msg)
+void createTestMsg(gz::msgs::Joy & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
 
   createTestMsg(header_msg);
   _msg.mutable_header()->CopyFrom(header_msg);
@@ -877,12 +877,12 @@ void createTestMsg(ignition::msgs::Joy & _msg)
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Joy> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Joy> & _msg)
 {
-  ignition::msgs::Joy expected_msg;
+  gz::msgs::Joy expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
   for (int i = 0; i < expected_msg.axes_size(); ++i) {
     EXPECT_FLOAT_EQ(expected_msg.axes(i), _msg->axes(i));
@@ -893,9 +893,9 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Joy> & _msg)
   }
 }
 
-void createTestMsg(ignition::msgs::LaserScan & _msg)
+void createTestMsg(gz::msgs::LaserScan & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
 
   const unsigned int num_readings = 100u;
@@ -918,12 +918,12 @@ void createTestMsg(ignition::msgs::LaserScan & _msg)
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::LaserScan> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::LaserScan> & _msg)
 {
-  ignition::msgs::LaserScan expected_msg;
+  gz::msgs::LaserScan expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_FLOAT_EQ(expected_msg.angle_min(), _msg->angle_min());
   EXPECT_FLOAT_EQ(expected_msg.angle_max(), _msg->angle_max());
   EXPECT_FLOAT_EQ(expected_msg.angle_step(), _msg->angle_step());
@@ -949,10 +949,10 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::LaserScan> & _msg)
   }
 }
 
-void createTestMsg(ignition::msgs::Magnetometer & _msg)
+void createTestMsg(gz::msgs::Magnetometer & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Vector3d vector3_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Vector3d vector3_msg;
 
   createTestMsg(header_msg);
   createTestMsg(vector3_msg);
@@ -961,15 +961,15 @@ void createTestMsg(ignition::msgs::Magnetometer & _msg)
   _msg.mutable_field_tesla()->CopyFrom(vector3_msg);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Magnetometer> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Magnetometer> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->field_tesla()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->field_tesla()));
 }
 
-void createTestMsg(ignition::msgs::NavSat & _msg)
+void createTestMsg(gz::msgs::NavSat & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
 
   _msg.mutable_header()->CopyFrom(header_msg);
@@ -982,12 +982,12 @@ void createTestMsg(ignition::msgs::NavSat & _msg)
   _msg.set_velocity_up(0.00);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::NavSat> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::NavSat> & _msg)
 {
-  ignition::msgs::NavSat expected_msg;
+  gz::msgs::NavSat expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_FLOAT_EQ(expected_msg.latitude_deg(), _msg->latitude_deg());
   EXPECT_FLOAT_EQ(expected_msg.longitude_deg(), _msg->longitude_deg());
   EXPECT_FLOAT_EQ(expected_msg.altitude(), _msg->altitude());
@@ -996,9 +996,9 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::NavSat> & _msg)
   EXPECT_FLOAT_EQ(expected_msg.velocity_up(), _msg->velocity_up());
 }
 
-void createTestMsg(ignition::msgs::Actuators & _msg)
+void createTestMsg(gz::msgs::Actuators & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
 
   createTestMsg(header_msg);
   _msg.mutable_header()->CopyFrom(header_msg);
@@ -1010,12 +1010,12 @@ void createTestMsg(ignition::msgs::Actuators & _msg)
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Actuators> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Actuators> & _msg)
 {
-  ignition::msgs::Actuators expected_msg;
+  gz::msgs::Actuators expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
   for (int i = 0; i < expected_msg.position_size(); ++i) {
     EXPECT_FLOAT_EQ(expected_msg.position(i), _msg->position(i));
@@ -1030,11 +1030,11 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Actuators> & _msg)
   }
 }
 
-void createTestMsg(ignition::msgs::Odometry & _msg)
+void createTestMsg(gz::msgs::Odometry & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Pose pose_msg;
-  ignition::msgs::Twist twist_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Pose pose_msg;
+  gz::msgs::Twist twist_msg;
 
   createTestMsg(header_msg);
   createTestMsg(pose_msg);
@@ -1045,18 +1045,18 @@ void createTestMsg(ignition::msgs::Odometry & _msg)
   _msg.mutable_twist()->CopyFrom(twist_msg);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Odometry> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Odometry> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Pose>(_msg->pose()));
-  compareTestMsg(std::make_shared<ignition::msgs::Twist>(_msg->twist()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Pose>(_msg->pose()));
+  compareTestMsg(std::make_shared<gz::msgs::Twist>(_msg->twist()));
 }
 
-void createTestMsg(ignition::msgs::OdometryWithCovariance & _msg)
+void createTestMsg(gz::msgs::OdometryWithCovariance & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::PoseWithCovariance pose_cov_msg;
-  ignition::msgs::TwistWithCovariance twist_cov_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::PoseWithCovariance pose_cov_msg;
+  gz::msgs::TwistWithCovariance twist_cov_msg;
 
   createTestMsg(header_msg);
   createTestMsg(pose_cov_msg);
@@ -1067,30 +1067,30 @@ void createTestMsg(ignition::msgs::OdometryWithCovariance & _msg)
   _msg.mutable_twist_with_covariance()->CopyFrom(twist_cov_msg);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::OdometryWithCovariance> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::OdometryWithCovariance> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   compareTestMsg(
-    std::make_shared<ignition::msgs::PoseWithCovariance>(
+    std::make_shared<gz::msgs::PoseWithCovariance>(
       _msg->
       pose_with_covariance()));
   compareTestMsg(
-    std::make_shared<ignition::msgs::TwistWithCovariance>(
+    std::make_shared<gz::msgs::TwistWithCovariance>(
       _msg->
       twist_with_covariance()));
 }
 
-void createTestMsg(ignition::msgs::PointCloudPacked & _msg)
+void createTestMsg(gz::msgs::PointCloudPacked & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
 
   createTestMsg(header_msg);
 
   _msg.mutable_header()->CopyFrom(header_msg);
-  ignition::msgs::PointCloudPacked::Field * field = _msg.add_field();
+  gz::msgs::PointCloudPacked::Field * field = _msg.add_field();
   field->set_name("x");
   field->set_offset(0);
-  field->set_datatype(ignition::msgs::PointCloudPacked::Field::FLOAT32);
+  field->set_datatype(gz::msgs::PointCloudPacked::Field::FLOAT32);
   field->set_count(1);
 
   uint32_t height = 4;
@@ -1116,9 +1116,9 @@ void createTestMsg(ignition::msgs::PointCloudPacked & _msg)
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::PointCloudPacked> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::PointCloudPacked> & _msg)
 {
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
   uint32_t height = 4;
   uint32_t width = 2;
@@ -1143,9 +1143,9 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::PointCloudPacked> & _m
   }
 }
 
-void createTestMsg(ignition::msgs::BatteryState & _msg)
+void createTestMsg(gz::msgs::BatteryState & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
 
   _msg.mutable_header()->CopyFrom(header_msg);
@@ -1155,18 +1155,18 @@ void createTestMsg(ignition::msgs::BatteryState & _msg)
   _msg.set_charge(789);
   _msg.set_capacity(321);
   _msg.set_percentage(654);
-  _msg.set_power_supply_status(ignition::msgs::BatteryState::DISCHARGING);
+  _msg.set_power_supply_status(gz::msgs::BatteryState::DISCHARGING);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::BatteryState> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::BatteryState> & _msg)
 {
-  ignition::msgs::BatteryState expected_msg;
+  gz::msgs::BatteryState expected_msg;
   createTestMsg(expected_msg);
 
   ASSERT_TRUE(expected_msg.has_header());
   ASSERT_TRUE(_msg->has_header());
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
   EXPECT_EQ(expected_msg.voltage(), _msg->voltage());
   EXPECT_EQ(expected_msg.current(), _msg->current());
   EXPECT_EQ(expected_msg.charge(), _msg->charge());
@@ -1175,7 +1175,7 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::BatteryState> & _msg)
   EXPECT_EQ(expected_msg.power_supply_status(), _msg->power_supply_status());
 }
 
-void createTestMsg(ignition::msgs::JointTrajectoryPoint & _msg)
+void createTestMsg(gz::msgs::JointTrajectoryPoint & _msg)
 {
   const auto number_of_joints = 7;
 
@@ -1190,9 +1190,9 @@ void createTestMsg(ignition::msgs::JointTrajectoryPoint & _msg)
   time_from_start->set_nsec(67890);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::JointTrajectoryPoint> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::JointTrajectoryPoint> & _msg)
 {
-  ignition::msgs::JointTrajectoryPoint expected_msg;
+  gz::msgs::JointTrajectoryPoint expected_msg;
   createTestMsg(expected_msg);
 
   for (int i = 0; i < _msg->positions_size(); ++i) {
@@ -1215,12 +1215,12 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::JointTrajectoryPoint>
   EXPECT_EQ(expected_msg.time_from_start().nsec(), _msg->time_from_start().nsec());
 }
 
-void createTestMsg(ignition::msgs::JointTrajectory & _msg)
+void createTestMsg(gz::msgs::JointTrajectory & _msg)
 {
   const auto number_of_joints = 7;
   const auto number_of_trajectory_points = 10;
 
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
   createTestMsg(header_msg);
   _msg.mutable_header()->CopyFrom(header_msg);
 
@@ -1229,16 +1229,16 @@ void createTestMsg(ignition::msgs::JointTrajectory & _msg)
   }
 
   for (auto j = 0; j < number_of_trajectory_points; ++j) {
-    ignition::msgs::JointTrajectoryPoint point;
+    gz::msgs::JointTrajectoryPoint point;
     createTestMsg(point);
     _msg.add_points();
     _msg.mutable_points(j)->CopyFrom(point);
   }
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::JointTrajectory> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::JointTrajectory> & _msg)
 {
-  ignition::msgs::JointTrajectory expected_msg;
+  gz::msgs::JointTrajectory expected_msg;
   createTestMsg(expected_msg);
 
   ASSERT_TRUE(expected_msg.has_header());
@@ -1249,17 +1249,17 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::JointTrajectory> & _ms
   }
 
   for (int i = 0; i < _msg->points_size(); ++i) {
-    compareTestMsg(std::make_shared<ignition::msgs::JointTrajectoryPoint>(_msg->points(i)));
+    compareTestMsg(std::make_shared<gz::msgs::JointTrajectoryPoint>(_msg->points(i)));
   }
 }
 
-void createTestMsg(ignition::msgs::Light & _msg)
+void createTestMsg(gz::msgs::Light & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Pose pose_msg;
-  ignition::msgs::Color diffuse_msg;
-  ignition::msgs::Color specular_msg;
-  ignition::msgs::Vector3d direction_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Pose pose_msg;
+  gz::msgs::Color diffuse_msg;
+  gz::msgs::Color specular_msg;
+  gz::msgs::Vector3d direction_msg;
 
   createTestMsg(header_msg);
   createTestMsg(pose_msg);
@@ -1274,7 +1274,7 @@ void createTestMsg(ignition::msgs::Light & _msg)
   _msg.mutable_direction()->CopyFrom(direction_msg);
 
   _msg.set_name("test_light");
-  _msg.set_type(ignition::msgs::Light_LightType::Light_LightType_SPOT);
+  _msg.set_type(gz::msgs::Light_LightType::Light_LightType_SPOT);
 
   _msg.set_attenuation_constant(0.2);
   _msg.set_attenuation_linear(0.4);
@@ -1292,16 +1292,16 @@ void createTestMsg(ignition::msgs::Light & _msg)
   _msg.set_intensity(125.0);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Light> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Light> & _msg)
 {
-  ignition::msgs::Light expected_msg;
+  gz::msgs::Light expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Pose>(_msg->pose()));
-  compareTestMsg(std::make_shared<ignition::msgs::Color>(_msg->diffuse()));
-  compareTestMsg(std::make_shared<ignition::msgs::Color>(_msg->specular()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->direction()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Pose>(_msg->pose()));
+  compareTestMsg(std::make_shared<gz::msgs::Color>(_msg->diffuse()));
+  compareTestMsg(std::make_shared<gz::msgs::Color>(_msg->specular()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->direction()));
 
   EXPECT_EQ(expected_msg.name(), _msg->name());
   EXPECT_EQ(expected_msg.type(), _msg->type());
@@ -1322,11 +1322,11 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::Light> & _msg)
   EXPECT_FLOAT_EQ(expected_msg.intensity(), _msg->intensity());
 }
 
-void createTestMsg(ignition::msgs::GUICamera & _msg)
+void createTestMsg(gz::msgs::GUICamera & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::TrackVisual track_visual_msg;
-  ignition::msgs::Pose pose_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::TrackVisual track_visual_msg;
+  gz::msgs::Pose pose_msg;
 
   createTestMsg(header_msg);
   createTestMsg(track_visual_msg);
@@ -1343,23 +1343,23 @@ void createTestMsg(ignition::msgs::GUICamera & _msg)
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::GUICamera> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::GUICamera> & _msg)
 {
-  ignition::msgs::GUICamera expected_msg;
+  gz::msgs::GUICamera expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Pose>(_msg->pose()));
-  compareTestMsg(std::make_shared<ignition::msgs::TrackVisual>(_msg->track()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Pose>(_msg->pose()));
+  compareTestMsg(std::make_shared<gz::msgs::TrackVisual>(_msg->track()));
 
   EXPECT_EQ(expected_msg.name(), _msg->name());
   EXPECT_EQ(expected_msg.view_controller(), _msg->view_controller());
   EXPECT_EQ(expected_msg.projection_type(), _msg->projection_type());
 }
 
-void createTestMsg(ignition::msgs::StringMsg_V & _msg)
+void createTestMsg(gz::msgs::StringMsg_V & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
 
   createTestMsg(header_msg);
 
@@ -1369,36 +1369,36 @@ void createTestMsg(ignition::msgs::StringMsg_V & _msg)
   *data = "test_string_msg_v_data";
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::StringMsg_V> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::StringMsg_V> & _msg)
 {
-  ignition::msgs::StringMsg_V expected_msg;
+  gz::msgs::StringMsg_V expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
   ASSERT_EQ(expected_msg.data_size(), _msg->data_size());
   EXPECT_EQ(expected_msg.data(0), _msg->data(0));
 }
 
-void createTestMsg(ignition::msgs::Time & _msg)
+void createTestMsg(gz::msgs::Time & _msg)
 {
   _msg.set_sec(12);
   _msg.set_nsec(150);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Time> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::Time> & _msg)
 {
-  ignition::msgs::Time expected_msg;
+  gz::msgs::Time expected_msg;
   createTestMsg(expected_msg);
 
   EXPECT_EQ(expected_msg.sec(), _msg->sec());
   EXPECT_EQ(expected_msg.nsec(), _msg->nsec());
 }
 
-void createTestMsg(ignition::msgs::TrackVisual & _msg)
+void createTestMsg(gz::msgs::TrackVisual & _msg)
 {
-  ignition::msgs::Header header_msg;
-  ignition::msgs::Vector3d xyz_msg;
+  gz::msgs::Header header_msg;
+  gz::msgs::Vector3d xyz_msg;
 
   createTestMsg(header_msg);
   createTestMsg(xyz_msg);
@@ -1416,13 +1416,13 @@ void createTestMsg(ignition::msgs::TrackVisual & _msg)
   _msg.set_inherit_yaw(true);
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::TrackVisual> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::TrackVisual> & _msg)
 {
-  ignition::msgs::TrackVisual expected_msg;
+  gz::msgs::TrackVisual expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
-  compareTestMsg(std::make_shared<ignition::msgs::Vector3d>(_msg->xyz()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Vector3d>(_msg->xyz()));
 
   EXPECT_EQ(expected_msg.name(), _msg->name());
   EXPECT_EQ(expected_msg.id(), _msg->id());
@@ -1434,9 +1434,9 @@ void compareTestMsg(const std::shared_ptr<ignition::msgs::TrackVisual> & _msg)
   EXPECT_EQ(expected_msg.inherit_yaw(), _msg->inherit_yaw());
 }
 
-void createTestMsg(ignition::msgs::VideoRecord & _msg)
+void createTestMsg(gz::msgs::VideoRecord & _msg)
 {
-  ignition::msgs::Header header_msg;
+  gz::msgs::Header header_msg;
 
   createTestMsg(header_msg);
 
@@ -1448,12 +1448,12 @@ void createTestMsg(ignition::msgs::VideoRecord & _msg)
   _msg.set_save_filename("test_video_record_save_filename");
 }
 
-void compareTestMsg(const std::shared_ptr<ignition::msgs::VideoRecord> & _msg)
+void compareTestMsg(const std::shared_ptr<gz::msgs::VideoRecord> & _msg)
 {
-  ignition::msgs::VideoRecord expected_msg;
+  gz::msgs::VideoRecord expected_msg;
   createTestMsg(expected_msg);
 
-  compareTestMsg(std::make_shared<ignition::msgs::Header>(_msg->header()));
+  compareTestMsg(std::make_shared<gz::msgs::Header>(_msg->header()));
 
   EXPECT_EQ(expected_msg.start(), _msg->start());
   EXPECT_EQ(expected_msg.stop(), _msg->stop());
diff --git a/ros_gz_bridge/test/utils/gz_test_msg.hpp b/ros_gz_bridge/test/utils/gz_test_msg.hpp
index 582954e..2bc530d 100644
--- a/ros_gz_bridge/test/utils/gz_test_msg.hpp
+++ b/ros_gz_bridge/test/utils/gz_test_msg.hpp
@@ -15,61 +15,61 @@
 #ifndef UTILS__GZ_TEST_MSG_HPP_
 #define UTILS__GZ_TEST_MSG_HPP_
 
-#include <ignition/msgs/actuators.pb.h>
-#include <ignition/msgs/altimeter.pb.h>
-#include <ignition/msgs/any.pb.h>
-#include <ignition/msgs/axis.pb.h>
-#include <ignition/msgs/battery_state.pb.h>
-#include <ignition/msgs/boolean.pb.h>
-#include <ignition/msgs/camera_info.pb.h>
-#include <ignition/msgs/clock.pb.h>
-#include <ignition/msgs/color.pb.h>
-#include <ignition/msgs/contact.pb.h>
-#include <ignition/msgs/contacts.pb.h>
-#include <ignition/msgs/double.pb.h>
-#include <ignition/msgs/empty.pb.h>
-#include <ignition/msgs/entity.pb.h>
-#include <ignition/msgs/float.pb.h>
-#include <ignition/msgs/float_v.pb.h>
-#include <ignition/msgs/fluid_pressure.pb.h>
-#include <ignition/msgs/gui_camera.pb.h>
-#include <ignition/msgs/header.pb.h>
-#include <ignition/msgs/image.pb.h>
-#include <ignition/msgs/imu.pb.h>
-#include <ignition/msgs/int32.pb.h>
-#include <ignition/msgs/joint_trajectory.pb.h>
-#include <ignition/msgs/joint_wrench.pb.h>
-#include <ignition/msgs/joy.pb.h>
-#include <ignition/msgs/laserscan.pb.h>
-#include <ignition/msgs/light.pb.h>
-#include <ignition/msgs/magnetometer.pb.h>
-#include <ignition/msgs/model.pb.h>
-#include <ignition/msgs/navsat.pb.h>
-#include <ignition/msgs/odometry.pb.h>
-#include <ignition/msgs/odometry_with_covariance.pb.h>
-#include <ignition/msgs/param.pb.h>
-#include <ignition/msgs/param_v.pb.h>
-#include <ignition/msgs/pointcloud_packed.pb.h>
-#include <ignition/msgs/pose.pb.h>
-#include <ignition/msgs/pose_with_covariance.pb.h>
-#include <ignition/msgs/pose_v.pb.h>
-#include <ignition/msgs/quaternion.pb.h>
-#include <ignition/msgs/sensor_noise.pb.h>
-#include <ignition/msgs/stringmsg.pb.h>
-#include <ignition/msgs/stringmsg_v.pb.h>
-#include <ignition/msgs/track_visual.pb.h>
-#include <ignition/msgs/twist.pb.h>
-#include <ignition/msgs/twist_with_covariance.pb.h>
-#include <ignition/msgs/uint32.pb.h>
-#include <ignition/msgs/vector3d.pb.h>
-#include <ignition/msgs/video_record.pb.h>
-#include <ignition/msgs/wrench.pb.h>
+#include <gz/msgs/actuators.pb.h>
+#include <gz/msgs/altimeter.pb.h>
+#include <gz/msgs/any.pb.h>
+#include <gz/msgs/axis.pb.h>
+#include <gz/msgs/battery_state.pb.h>
+#include <gz/msgs/boolean.pb.h>
+#include <gz/msgs/camera_info.pb.h>
+#include <gz/msgs/clock.pb.h>
+#include <gz/msgs/color.pb.h>
+#include <gz/msgs/contact.pb.h>
+#include <gz/msgs/contacts.pb.h>
+#include <gz/msgs/double.pb.h>
+#include <gz/msgs/empty.pb.h>
+#include <gz/msgs/entity.pb.h>
+#include <gz/msgs/float.pb.h>
+#include <gz/msgs/float_v.pb.h>
+#include <gz/msgs/fluid_pressure.pb.h>
+#include <gz/msgs/gui_camera.pb.h>
+#include <gz/msgs/header.pb.h>
+#include <gz/msgs/image.pb.h>
+#include <gz/msgs/imu.pb.h>
+#include <gz/msgs/int32.pb.h>
+#include <gz/msgs/joint_trajectory.pb.h>
+#include <gz/msgs/joint_wrench.pb.h>
+#include <gz/msgs/joy.pb.h>
+#include <gz/msgs/laserscan.pb.h>
+#include <gz/msgs/light.pb.h>
+#include <gz/msgs/magnetometer.pb.h>
+#include <gz/msgs/model.pb.h>
+#include <gz/msgs/navsat.pb.h>
+#include <gz/msgs/odometry.pb.h>
+#include <gz/msgs/odometry_with_covariance.pb.h>
+#include <gz/msgs/param.pb.h>
+#include <gz/msgs/param_v.pb.h>
+#include <gz/msgs/pointcloud_packed.pb.h>
+#include <gz/msgs/pose.pb.h>
+#include <gz/msgs/pose_with_covariance.pb.h>
+#include <gz/msgs/pose_v.pb.h>
+#include <gz/msgs/quaternion.pb.h>
+#include <gz/msgs/sensor_noise.pb.h>
+#include <gz/msgs/stringmsg.pb.h>
+#include <gz/msgs/stringmsg_v.pb.h>
+#include <gz/msgs/track_visual.pb.h>
+#include <gz/msgs/twist.pb.h>
+#include <gz/msgs/twist_with_covariance.pb.h>
+#include <gz/msgs/uint32.pb.h>
+#include <gz/msgs/vector3d.pb.h>
+#include <gz/msgs/video_record.pb.h>
+#include <gz/msgs/wrench.pb.h>
 
 #include <memory>
 
 #include <ros_gz_bridge/ros_gz_bridge.hpp>
 #if HAVE_DATAFRAME
-#include <ignition/msgs/dataframe.pb.h>
+#include <gz/msgs/dataframe.pb.h>
 #endif  // HAVE_DATAFRAME
 
 namespace ros_gz_bridge
@@ -78,421 +78,421 @@ namespace testing
 {
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Any & _msg);
+void createTestMsg(gz::msgs::Any & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Any> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Any> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Boolean & _msg);
+void createTestMsg(gz::msgs::Boolean & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Boolean> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Boolean> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Color & _msg);
+void createTestMsg(gz::msgs::Color & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Color> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Color> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Empty & _msg);
+void createTestMsg(gz::msgs::Empty & _msg);
 
 /// \brief Compare a message with the populated for testing. Noop for Empty
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Empty> &);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Empty> &);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Float & _msg);
+void createTestMsg(gz::msgs::Float & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Float> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Float> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Float_V & _msg);
+void createTestMsg(gz::msgs::Float_V & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Float_V> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Float_V> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Double & _msg);
+void createTestMsg(gz::msgs::Double & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Double> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Double> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Int32 & _msg);
+void createTestMsg(gz::msgs::Int32 & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Int32> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Int32> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::UInt32 & _msg);
+void createTestMsg(gz::msgs::UInt32 & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::UInt32> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::UInt32> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Header & _msg);
+void createTestMsg(gz::msgs::Header & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Header> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Header> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Clock & _msg);
+void createTestMsg(gz::msgs::Clock & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Clock> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Clock> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::StringMsg & _msg);
+void createTestMsg(gz::msgs::StringMsg & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::SensorNoise & _msg);
+void createTestMsg(gz::msgs::SensorNoise & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::SensorNoise> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::SensorNoise> & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::StringMsg> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::StringMsg> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Quaternion & _msg);
+void createTestMsg(gz::msgs::Quaternion & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Quaternion> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Quaternion> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Vector3d & _msg);
+void createTestMsg(gz::msgs::Vector3d & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Vector3d> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Vector3d> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Param_V & _msg);
+void createTestMsg(gz::msgs::Param_V & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Param_V> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Param_V> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Param & _msg);
+void createTestMsg(gz::msgs::Param & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Param> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Param> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Pose & _msg);
+void createTestMsg(gz::msgs::Pose & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Pose> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Pose> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::PoseWithCovariance & _msg);
+void createTestMsg(gz::msgs::PoseWithCovariance & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::PoseWithCovariance> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::PoseWithCovariance> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Pose_V & _msg);
+void createTestMsg(gz::msgs::Pose_V & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Pose_V> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Pose_V> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Twist & _msg);
+void createTestMsg(gz::msgs::Twist & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Twist> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Twist> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::TwistWithCovariance & _msg);
+void createTestMsg(gz::msgs::TwistWithCovariance & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::TwistWithCovariance> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::TwistWithCovariance> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Wrench & _msg);
+void createTestMsg(gz::msgs::Wrench & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Wrench> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Wrench> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::JointWrench & _msg);
+void createTestMsg(gz::msgs::JointWrench & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::JointWrench> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::JointWrench> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Altimeter & _msg);
+void createTestMsg(gz::msgs::Altimeter & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Altimeter> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Altimeter> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Joy & _msg);
+void createTestMsg(gz::msgs::Joy & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Joy> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Joy> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Entity & _msg);
+void createTestMsg(gz::msgs::Entity & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Entity> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Entity> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Contact & _msg);
+void createTestMsg(gz::msgs::Contact & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Contact> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Contact> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Contacts & _msg);
+void createTestMsg(gz::msgs::Contacts & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Contacts> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Contacts> & _msg);
 
 #if HAVE_DATAFRAME
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Dataframe & _msg);
+void createTestMsg(gz::msgs::Dataframe & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Dataframe> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Dataframe> & _msg);
 #endif  // HAVE_DATAFRAME
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Image & _msg);
+void createTestMsg(gz::msgs::Image & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Image> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Image> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::CameraInfo & _msg);
+void createTestMsg(gz::msgs::CameraInfo & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::CameraInfo> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::CameraInfo> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::FluidPressure & _msg);
+void createTestMsg(gz::msgs::FluidPressure & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::FluidPressure> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::FluidPressure> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::IMU & _msg);
+void createTestMsg(gz::msgs::IMU & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::IMU> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::IMU> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Axis & _msg);
+void createTestMsg(gz::msgs::Axis & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Axis> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Axis> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Model & _msg);
+void createTestMsg(gz::msgs::Model & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Model> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Model> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::LaserScan & _msg);
+void createTestMsg(gz::msgs::LaserScan & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::LaserScan> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::LaserScan> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Magnetometer & _msg);
+void createTestMsg(gz::msgs::Magnetometer & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Magnetometer> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Magnetometer> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::NavSat & _msg);
+void createTestMsg(gz::msgs::NavSat & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::NavSat> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::NavSat> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Actuators & _msg);
+void createTestMsg(gz::msgs::Actuators & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Actuators> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Actuators> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Odometry & _msg);
+void createTestMsg(gz::msgs::Odometry & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Odometry> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Odometry> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::OdometryWithCovariance & _msg);
+void createTestMsg(gz::msgs::OdometryWithCovariance & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::OdometryWithCovariance> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::OdometryWithCovariance> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::PointCloudPacked & _msg);
+void createTestMsg(gz::msgs::PointCloudPacked & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::PointCloudPacked> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::PointCloudPacked> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::BatteryState & _msg);
+void createTestMsg(gz::msgs::BatteryState & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::BatteryState> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::BatteryState> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::JointTrajectoryPoint & _msg);
+void createTestMsg(gz::msgs::JointTrajectoryPoint & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::JointTrajectoryPoint> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::JointTrajectoryPoint> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::JointTrajectory & _msg);
+void createTestMsg(gz::msgs::JointTrajectory & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::JointTrajectory> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::JointTrajectory> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Light & _msg);
+void createTestMsg(gz::msgs::Light & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Light> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Light> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::GUICamera & _msg);
+void createTestMsg(gz::msgs::GUICamera & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::GUICamera> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::GUICamera> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::StringMsg_V & _msg);
+void createTestMsg(gz::msgs::StringMsg_V & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::StringMsg_V> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::StringMsg_V> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::Time & _msg);
+void createTestMsg(gz::msgs::Time & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::Time> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::Time> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::TrackVisual & _msg);
+void createTestMsg(gz::msgs::TrackVisual & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::TrackVisual> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::TrackVisual> & _msg);
 
 /// \brief Create a message used for testing.
 /// \param[out] _msg The message populated.
-void createTestMsg(ignition::msgs::VideoRecord & _msg);
+void createTestMsg(gz::msgs::VideoRecord & _msg);
 
 /// \brief Compare a message with the populated for testing.
 /// \param[in] _msg The message to compare.
-void compareTestMsg(const std::shared_ptr<ignition::msgs::VideoRecord> & _msg);
+void compareTestMsg(const std::shared_ptr<gz::msgs::VideoRecord> & _msg);
 
 }  // namespace testing
 }  // namespace ros_gz_bridge
diff --git a/ros_gz_image/CHANGELOG.rst b/ros_gz_image/CHANGELOG.rst
deleted file mode 100644
index a647f0c..0000000
--- a/ros_gz_image/CHANGELOG.rst
+++ /dev/null
@@ -1,129 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros1_ign_image
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.245.0 (2023-05-23)
---------------------
-
-0.244.11 (2023-05-23)
----------------------
-
-0.244.10 (2023-05-03)
----------------------
-
-0.244.9 (2022-11-03)
---------------------
-
-0.244.8 (2022-10-28)
---------------------
-
-0.244.7 (2022-10-12)
---------------------
-* Merge branch 'ros2' into ports/galactic_to_ros2
-* Contributors: Michael Carroll
-
-0.244.6 (2022-09-14)
---------------------
-
-0.244.5 (2022-09-12)
---------------------
-* Add missing GZ_VERSION ticktocks (`#289 <https://github.com/gazebosim/ros_gz/issues/289>`_)
-* Support ros_ign migration (`#282 <https://github.com/gazebosim/ros_gz/issues/282>`_)
-  Clean up shared libraries, and tick-tock RosGzPointCloud
-  Tick-tock launch args
-  Hard-tock ign\_ in sources
-  Migrate ign, ign\_, IGN\_ for sources, launch, and test files
-  Migrate IGN_XXX_VER, IGN_T, header guards
-  Migrate launchfile, launchfile args, and test source references
-  Migrate ros_ign_XXX and gz_gazebo -> gz_sim
-  Migrate ros_ign_XXX project names
-  Migrate Ign, ign-, IGN_DEPS, ign-gazebo
-  Migrate ignitionrobotics, ignitionrobotics/ros_ign, osrf/ros_ign
-  Migrate ignition-version, IGNITION_VERSION, Ignition <LIB>, ros_ign_ci
-* Move packages and files to gz (`#282 <https://github.com/gazebosim/ros_gz/issues/282>`_)
-* Contributors: methylDragon
-
-0.244.3 (2022-05-19)
---------------------
-* [ros2] README updates (service bridge, Gazebo rename) (`#252 <https://github.com/gazebosim/ros_gz/issues/252>`_)
-* Fix linter tests (`#251 <https://github.com/gazebosim/ros_gz/issues/251>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: Daisuke Nishimatsu, Louise Poubel
-
-0.244.2 (2022-04-25)
---------------------
-* Bring ros2 branch up-to-date with Rolling (`#213 <https://github.com/gazebosim/ros_gz/issues/213>`_)
-* Separate galactic branch from ros2 branch (`#201 <https://github.com/gazebosim/ros_gz/issues/201>`_)
-* 🏁 Dome EOL (`#198 <https://github.com/gazebosim/ros_gz/issues/198>`_)
-* Fix Deprecation Warning (`#158 <https://github.com/gazebosim/ros_gz/issues/158>`_)
-* Contributors: David V. Lu!!, Louise Poubel, Michael Carroll
-
-0.244.1 (2022-01-04)
---------------------
-
-0.244.0 (2021-12-30)
---------------------
-* Default to Fortress for Rolling (future Humble) (`#195 <https://github.com/gazebosim/ros_gz/issues/195>`_)
-* [ros2] 🏁 Dome EOL (`#199 <https://github.com/gazebosim/ros_gz/issues/199>`_)
-* Statically link each translation unit (`#193 <https://github.com/gazebosim/ros_gz/issues/193>`_)
-* Contributors: Guillaume Doisy, Louise Poubel, Michael Carroll
-
-0.233.2 (2021-07-20)
---------------------
-* [ros2] Update version docs, add Galactic and Fortress (`#164 <https://github.com/gazebosim/ros_gz/issues/164>`_)
-* Fix Deprecation Warning (`#158 <https://github.com/gazebosim/ros_gz/issues/158>`_)
-* Contributors: David V. Lu!!, Louise Poubel
-
-0.233.1 (2021-04-16)
---------------------
-* Default to Edifice for Rolling (`#150 <https://github.com/gazebosim/ros_gz/issues/150>`_)
-* Edifice support (`#140 <https://github.com/gazebosim/ros_gz/issues/140>`_)
-* Update releases (`#108 <https://github.com/gazebosim/ros_gz/issues/108>`_)
-* Add support for Dome (`#103 <https://github.com/gazebosim/ros_gz/issues/103>`_)
-* Contributors: Louise Poubel, Luca Della Vedova
-
-0.221.1 (2020-08-19)
---------------------
-* Add pkg-config as a buildtool dependency (`#102 <https://github.com/gazebosim/ros_gz/issues/102>`_)
-* Contributors: Louise Poubel
-
-0.221.0 (2020-07-23)
---------------------
-* Install only what's necessary, rename builtin_interfaces (`#95 <https://github.com/gazebosim/ros_gz/issues/95>`_)
-* Add CI for Eloquent (`#86 <https://github.com/gazebosim/ros_gz/issues/86>`_)
-* Avoid the use of --ros-args arguments outside ros (`#84 <https://github.com/gazebosim/ros_gz/issues/84>`_)
-* [WIP] Port ign_ros_gazebo_demos to ROS2 (`#58 <https://github.com/gazebosim/ros_gz/issues/58>`_)
-  Port ros_gz_image to ROS2
-  Port ros_gz_sim_demos to ROS2
-* Enable ROS2 CI for Dashing branch (`#43 <https://github.com/gazebosim/ros_gz/issues/43>`_)
-* Make all API and comments ROS-version agnostic
-* Rename packages and fix compilation + tests
-* Move files ros1 -> ros
-* Contributors: Alejandro Hernández Cordero, Jose Luis Rivero, Louise Poubel, chapulina
-
-0.7.0 (2019-08-15)
-------------------
-
-0.6.3 (2019-08-04)
-------------------
-* Merge pull request `#36 <https://github.com/osrf/ros1_ign_bridge/issues/36>`_ from osrf/restest_depen_image
-  Missing rostest dependency in image package
-* Contributors: Jose Luis Rivero
-
-0.6.2 (2019-08-04)
-------------------
-
-0.6.1 (2019-08-04)
-------------------
-
-0.6.0 (2019-08-02)
-------------------
-* Image bridge using image_transport (`#34 <https://github.com/osrf/ros1_ign_bridge/issues/34>`_)
-  * Image bridge using image_transport
-  * tests for image
-  * correct metapackage
-  * tests with catkin
-  Signed-off-by: Louise Poubel <louise@openrobotics.org>
-  * Revert changes from `#32 <https://github.com/osrf/ros1_ign_bridge/issues/32>`_
-  Signed-off-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: chapulina
diff --git a/ros_gz_image/CMakeLists.txt b/ros_gz_image/CMakeLists.txt
deleted file mode 100644
index fbd5a18..0000000
--- a/ros_gz_image/CMakeLists.txt
+++ /dev/null
@@ -1,125 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-
-project(ros_gz_image)
-
-# Default to C++17
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 17)
-endif()
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  add_compile_options(-Wall -Wextra)
-endif()
-
-find_package(ament_cmake REQUIRED)
-find_package(image_transport REQUIRED)
-find_package(ros_gz_bridge REQUIRED)
-find_package(rclcpp REQUIRED)
-find_package(sensor_msgs REQUIRED)
-
-# TODO(CH3): Deprecated. Remove on tock.
-if("$ENV{GZ_VERSION}" STREQUAL "" AND NOT "$ENV{IGNITION_VERSION}" STREQUAL "")
-  message(DEPRECATION "Environment variable [IGNITION_VERSION] is deprecated. Use [GZ_VERSION] instead.")
-  set(ENV{GZ_VERSION} $ENV{IGNITION_VERSION})
-endif()
-
-# Edifice
-if("$ENV{GZ_VERSION}" STREQUAL "edifice")
-  find_package(ignition-transport10 REQUIRED)
-  set(GZ_TRANSPORT_VER ${ignition-transport10_VERSION_MAJOR})
-
-  find_package(ignition-msgs7 REQUIRED)
-  set(GZ_MSGS_VER ${ignition-msgs7_VERSION_MAJOR})
-
-  set(GZ_TARGET_PREFIX ignition)
-
-  message(STATUS "Compiling against Ignition Edifice")
-# Fortress
-elseif("$ENV{GZ_VERSION}" STREQUAL "garden")
-  find_package(gz-transport12 REQUIRED)
-  set(GZ_TRANSPORT_VER ${gz-transport12_VERSION_MAJOR})
-
-  find_package(gz-msgs9 REQUIRED)
-  set(GZ_MSGS_VER ${gz-msgs9_VERSION_MAJOR})
-
-  set(GZ_TARGET_PREFIX gz)
-
-  message(STATUS "Compiling against Gazebo Garden")
-# Default to Fortress
-else()
-  find_package(ignition-transport11 REQUIRED)
-  set(GZ_TRANSPORT_VER ${ignition-transport11_VERSION_MAJOR})
-
-  find_package(ignition-msgs8 REQUIRED)
-  set(GZ_MSGS_VER ${ignition-msgs8_VERSION_MAJOR})
-
-  set(GZ_TARGET_PREFIX ignition)
-
-  message(STATUS "Compiling against Ignition Fortress")
-endif()
-
-include_directories(include)
-
-set(executable
-  image_bridge
-)
-
-add_executable(${executable}
-  src/image_bridge.cpp
-)
-
-target_link_libraries(${executable}
-  ${GZ_TARGET_PREFIX}-msgs${GZ_MSGS_VER}::core
-  ${GZ_TARGET_PREFIX}-transport${GZ_TRANSPORT_VER}::core
-)
-
-ament_target_dependencies(${executable}
-  "image_transport"
-  "ros_gz_bridge"
-  "rclcpp"
-  "sensor_msgs"
-)
-
-install(TARGETS ${executable}
-  DESTINATION lib/${PROJECT_NAME}
-)
-
-if(BUILD_TESTING)
-  find_package(ament_lint_auto REQUIRED)
-  ament_lint_auto_find_test_dependencies()
-
-  # find_package(rostest REQUIRED)
-  #
-  # set(test_publishers
-  #   gz_publisher
-  # )
-  #
-  # set(test_subscribers
-  #   ros_subscriber
-  # )
-  #
-  # foreach(test_publisher ${test_publishers})
-  #   add_executable(${test_publisher}_image
-  #     test/publishers/${test_publisher}.cpp
-  #   )
-  #   target_link_libraries(${test_publisher}_image
-  #     ${catkin_LIBRARIES}
-  #     ${GZ_TARGET_PREFIX}-msgs${GZ_MSGS_VER}::core
-  #     ${GZ_TARGET_PREFIX}-transport${GZ_TRANSPORT_VER}::core
-  #     gtest
-  #     gtest_main
-  #   )
-  # endforeach(test_publisher)
-  #
-  # foreach(test_subscriber ${test_subscribers})
-  #   add_rostest_gtest(test_${test_subscriber}_image
-  #     test/${test_subscriber}.test
-  #     test/subscribers/${test_subscriber}.cpp)
-  #   target_link_libraries(test_${test_subscriber}_image
-  #     ${catkin_LIBRARIES}
-  #     ${GZ_TARGET_PREFIX}-msgs${GZ_MSGS_VER}::core
-  #     ${GZ_TARGET_PREFIX}-transport${GZ_TRANSPORT_VER}::core
-  #   )
-  # endforeach(test_subscriber)
-endif()
-
-ament_package()
diff --git a/ros_gz_image/README.md b/ros_gz_image/README.md
deleted file mode 100644
index b7b27e1..0000000
--- a/ros_gz_image/README.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Image utilities for using ROS and Gazebo Transport
-
-This package provides a unidirectional bridge for images from Gazebo to ROS.
-The bridge subscribes to Gazebo image messages (`ignition::msgs::Image`)
-and republishes them to ROS using [image_transport](http://wiki.ros.org/image_transport).
-
-For compressed images, install
-[compressed_image_transport](http://wiki.ros.org/compressed_image_transport)
-and the bridge will publish `/compressed` images. The same goes for other
-`image_transport` plugins.
-
diff --git a/ros_gz_image/package.xml b/ros_gz_image/package.xml
deleted file mode 100644
index f6d48c5..0000000
--- a/ros_gz_image/package.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<package format="3">
-  <name>ros_gz_image</name>
-  <version>0.245.0</version>
-  <description>Image utilities for Gazebo simulation with ROS.</description>
-  <license>Apache 2.0</license>
-  <maintainer email="louise@openrobotics.org">Louise Poubel</maintainer>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <buildtool_depend>pkg-config</buildtool_depend>
-
-  <depend>image_transport</depend>
-  <depend>ros_gz_bridge</depend>
-  <depend>rclcpp</depend>
-  <depend>sensor_msgs</depend>
-
-  <!-- Garden -->
-  <depend condition="$GZ_VERSION == garden or $IGNITION_VERSION == garden">gz-msgs9</depend>
-  <depend condition="$GZ_VERSION == garden or $IGNITION_VERSION == garden">gz-transport12</depend>
-  <!-- Fortress (default) -->
-  <depend condition="$GZ_VERSION == fortress or $IGNITION_VERSION == fortress">ignition-msgs8</depend>
-  <depend condition="$GZ_VERSION == fortress or $IGNITION_VERSION == fortress">ignition-transport11</depend>
-  <depend condition="$GZ_VERSION == '' and $IGNITION_VERSION == ''">ignition-msgs8</depend>
-  <depend condition="$GZ_VERSION == '' and $IGNITION_VERSION == ''">ignition-transport11</depend>
-  <!-- Edifice -->
-  <depend condition="$GZ_VERSION == edifice or $IGNITION_VERSION == edifice">ignition-msgs7</depend>
-  <depend condition="$GZ_VERSION == edifice or $IGNITION_VERSION == edifice">ignition-transport10</depend>
-
-  <test_depend>ament_lint_auto</test_depend>
-  <test_depend>ament_lint_common</test_depend>
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-</package>
diff --git a/ros_gz_image/src/image_bridge.cpp b/ros_gz_image/src/image_bridge.cpp
deleted file mode 100644
index c7edf9d..0000000
--- a/ros_gz_image/src/image_bridge.cpp
+++ /dev/null
@@ -1,101 +0,0 @@
-// Copyright 2019 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-
-#include <iostream>
-#include <memory>
-#include <string>
-#include <vector>
-
-#include <ignition/transport/Node.hh>
-#include <rclcpp/rclcpp.hpp>
-#include <image_transport/image_transport.hpp>
-#include <ros_gz_bridge/convert.hpp>
-
-//////////////////////////////////////////////////
-/// \brief Bridges one topic
-class Handler
-{
-public:
-  /// \brief Constructor
-  /// \param[in] _topic Image base topic
-  /// \param[in] _it_node Pointer to image transport node
-  /// \param[in] _gz_node Pointer to Gazebo node
-  Handler(
-    const std::string & _topic,
-    std::shared_ptr<image_transport::ImageTransport> _it_node,
-    std::shared_ptr<ignition::transport::Node> _gz_node)
-  {
-    this->ros_pub = _it_node->advertise(_topic, 1);
-
-    _gz_node->Subscribe(_topic, &Handler::OnImage, this);
-  }
-
-private:
-  /// \brief Callback when Gazebo image is received
-  /// \param[in] _gz_msg Gazebo message
-  void OnImage(const ignition::msgs::Image & _gz_msg)
-  {
-    sensor_msgs::msg::Image ros_msg;
-    ros_gz_bridge::convert_gz_to_ros(_gz_msg, ros_msg);
-    this->ros_pub.publish(ros_msg);
-  }
-
-  /// \brief ROS image publisher
-  image_transport::Publisher ros_pub;
-};
-
-//////////////////////////////////////////////////
-void usage()
-{
-  std::cerr << "Bridge a collection of Gazebo Transport image topics to ROS " <<
-    "using image_transport.\n\n" <<
-    "  image_bridge <topic> <topic> ..\n\n" <<
-    "E.g.: image_bridge /camera/front/image_raw" << std::endl;
-}
-
-//////////////////////////////////////////////////
-int main(int argc, char * argv[])
-{
-  if (argc < 2) {
-    usage();
-    return -1;
-  }
-
-  rclcpp::init(argc, argv);
-
-  // ROS node
-  auto node_ = rclcpp::Node::make_shared("ros_gz_image");
-  auto it_node = std::make_shared<image_transport::ImageTransport>(node_);
-
-  // Gazebo node
-  auto gz_node = std::make_shared<ignition::transport::Node>();
-
-  std::vector<std::shared_ptr<Handler>> handlers;
-
-  // skip the process name in argument procesing
-  ++argv;
-  --argc;
-  auto args = rclcpp::remove_ros_arguments(argc, argv);
-
-  // Create publishers and subscribers
-  for (auto topic : args) {
-    handlers.push_back(std::make_shared<Handler>(topic, it_node, gz_node));
-  }
-
-  // Spin ROS and Gz until shutdown
-  rclcpp::spin(node_);
-
-  return 0;
-}
diff --git a/ros_gz_image/test/AMENT_IGNORE b/ros_gz_image/test/AMENT_IGNORE
deleted file mode 100644
index e69de29..0000000
diff --git a/ros_gz_image/test/launch/test_ros_subscriber.launch b/ros_gz_image/test/launch/test_ros_subscriber.launch
deleted file mode 100644
index e4e451a..0000000
--- a/ros_gz_image/test/launch/test_ros_subscriber.launch
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<launch>
-  <!-- Launch the bridge -->
-  <node name="image_bridge_ros_subscriber" pkg="ros_gz_image"
-        type="image_bridge"
-        args="/image"
-  />
-
-  <!-- Launch the Gazebo Transport publisher -->
-  <node name="gz_publisher" pkg="ros_gz_image" type="gz_publisher_image" />
-
-</launch>
diff --git a/ros_gz_image/test/publishers/gz_publisher.cpp b/ros_gz_image/test/publishers/gz_publisher.cpp
deleted file mode 100644
index f6605a1..0000000
--- a/ros_gz_image/test/publishers/gz_publisher.cpp
+++ /dev/null
@@ -1,61 +0,0 @@
-// Copyright 2019 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-#include <atomic>
-#include <chrono>
-#include <csignal>
-#include <iostream>
-#include <thread>
-#include <ignition/msgs.hh>
-#include <ignition/transport.hh>
-#include "../test_utils.h"
-
-/// \brief Flag used to break the publisher loop and terminate the program.
-static std::atomic<bool> g_terminatePub(false);
-
-//////////////////////////////////////////////////
-/// \brief Function callback executed when a SIGINT or SIGTERM signals are
-/// captured. This is used to break the infinite loop that publishes messages
-/// and exit the program smoothly.
-void signal_handler(int _signal)
-{
-  if (_signal == SIGINT || _signal == SIGTERM)
-    g_terminatePub = true;
-}
-
-//////////////////////////////////////////////////
-int main(int /*argc*/, char **/*argv*/)
-{
-  // Install a signal handler for SIGINT and SIGTERM.
-  std::signal(SIGINT,  signal_handler);
-  std::signal(SIGTERM, signal_handler);
-
-  // Create a transport node and advertise a topic.
-  ignition::transport::Node node;
-
-  // gz::msgs::Image.
-  auto image_pub = node.Advertise<ignition::msgs::Image>("image");
-  ignition::msgs::Image image_msg;
-  ros_gz_image::testing::createTestMsg(image_msg);
-
-  // Publish messages at 1Hz.
-  while (!g_terminatePub)
-  {
-    image_pub.Publish(image_msg);
-
-    std::this_thread::sleep_for(std::chrono::milliseconds(100));
-  }
-
-  return 0;
-}
diff --git a/ros_gz_image/test/ros_subscriber.test b/ros_gz_image/test/ros_subscriber.test
deleted file mode 100644
index 192a2b3..0000000
--- a/ros_gz_image/test/ros_subscriber.test
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<launch>
-
-  <include file="$(find ros_gz_image)/test/launch/test_ros_subscriber.launch">
-  </include>
-
-  <test test-name="gz_ros" pkg="ros_gz_image" type="test_ros_subscriber_image" time-limit="60.0" />
-
-</launch>
diff --git a/ros_gz_image/test/subscribers/ros_subscriber.cpp b/ros_gz_image/test/subscribers/ros_subscriber.cpp
deleted file mode 100644
index 6fb6b28..0000000
--- a/ros_gz_image/test/subscribers/ros_subscriber.cpp
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2019 Open Source Robotics Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
-*/
-
-#include <gtest/gtest.h>
-#include <ros/ros.h>
-#include <sensor_msgs/Image.h>
-#include <chrono>
-#include "../test_utils.h"
-
-//////////////////////////////////////////////////
-/// \brief A class for testing ROS topic subscription.
-template <typename ROS_T>
-class MyTestClass
-{
-  /// \brief Class constructor.
-  public: MyTestClass(const std::string &_topic)
-  {
-    this->sub = this->n.subscribe(_topic, 1000, &MyTestClass::Cb, this);
-  }
-
-  /// \brief Member function called each time a topic update is received.
-  public: void Cb(const ROS_T& _msg)
-  {
-    ros_gz_image::testing::compareTestMsg(_msg);
-    this->callbackExecuted = true;
-  };
-
-  /// \brief Member variables that flag when the actions are executed.
-  public: bool callbackExecuted = false;
-
-  /// \brief ROS node handle;
-  private: ros::NodeHandle n;
-
-  /// \brief ROS subscriber;
-  private: ros::Subscriber sub;
-};
-
-/////////////////////////////////////////////////
-TEST(ROSSubscriberTest, Image)
-{
-  MyTestClass<sensor_msgs::Image> client("image");
-
-  using namespace std::chrono_literals;
-  ros_gz_image::testing::waitUntilBoolVarAndSpin(
-    client.callbackExecuted, 10ms, 200);
-
-  EXPECT_TRUE(client.callbackExecuted);
-}
-
-/////////////////////////////////////////////////
-int main(int argc, char **argv)
-{
-  ::testing::InitGoogleTest(&argc, argv);
-  ros::init(argc, argv, "ros_image_subscriber");
-
-  return RUN_ALL_TESTS();
-}
diff --git a/ros_gz_image/test/test_utils.h b/ros_gz_image/test/test_utils.h
deleted file mode 100644
index 02996f3..0000000
--- a/ros_gz_image/test/test_utils.h
+++ /dev/null
@@ -1,216 +0,0 @@
-/*
- * Copyright (C) 2018 Open Source Robotics Foundation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
-*/
-
-#ifndef ROS_GZ_IMAGE__TEST_UTILS_H_
-#define ROS_GZ_IMAGE__TEST_UTILS_H_
-
-#include <gtest/gtest.h>
-#include <ros/ros.h>
-#include <std_msgs/Header.h>
-#include <sensor_msgs/Image.h>
-#include <chrono>
-#include <string>
-#include <thread>
-#include <ignition/msgs.hh>
-
-namespace ros_gz_image
-{
-namespace testing
-{
-  /// \brief Wait until a boolean variable is set to true for a given number
-  /// of times.
-  /// \param[in out] _boolVar The bool variable.
-  /// \param[in] _sleepEach Time duration to wait between each retry.
-  /// \param[in] _retries The number of retries.
-  ///
-  /// E.g.:
-  ///   using namespace std::chrono_literals;
-  ///   waitUntilBoolVar(myVar, 1ms, 10);
-  template <class Rep, class Period>
-  void waitUntilBoolVar(
-      bool &_boolVar,
-      const std::chrono::duration<Rep, Period> &_sleepEach,
-      const int _retries)
-  {
-    int i = 0;
-    while (!_boolVar && i < _retries)
-    {
-      ++i;
-      std::this_thread::sleep_for(_sleepEach);
-    }
-  }
-
-  /// \brief Wait until a boolean variable is set to true for a given number
-  /// of times. This function calls ros::spinOnce each iteration.
-  /// \param[in out] _boolVar The bool variable.
-  /// \param[in] _sleepEach Time duration to wait between each retry.
-  /// \param[in] _retries The number of retries.
-  ///
-  /// E.g.:
-  ///   using namespace std::chrono_literals;
-  ///   waitUntilBoolVar(myVar, 1ms, 10);
-  template <class Rep, class Period>
-  void waitUntilBoolVarAndSpin(
-      bool &_boolVar,
-      const std::chrono::duration<Rep, Period> &_sleepEach,
-      const int _retries)
-  {
-    int i = 0;
-    while (!_boolVar && i < _retries)
-    {
-      ++i;
-      std::this_thread::sleep_for(_sleepEach);
-      ros::spinOnce();
-    }
-  }
-
-  //////////////////////////////////////////////////
-  /// ROS test utils
-  //////////////////////////////////////////////////
-
-  /// \brief Create a message used for testing.
-  /// \param[out] _msg The message populated.
-  void createTestMsg(std_msgs::Header &_msg)
-  {
-    _msg.seq        = 1;
-    _msg.stamp.sec  = 2;
-    _msg.stamp.nsec = 3;
-    _msg.frame_id   = "frame_id_value";
-  }
-
-  /// \brief Compare a message with the populated for testing.
-  /// \param[in] _msg The message to compare.
-  void compareTestMsg(const std_msgs::Header &_msg)
-  {
-    std_msgs::Header expected_msg;
-    createTestMsg(expected_msg);
-
-    EXPECT_GE(expected_msg.seq,        0u);
-    EXPECT_EQ(expected_msg.stamp.sec,  _msg.stamp.sec);
-    EXPECT_EQ(expected_msg.stamp.nsec, _msg.stamp.nsec);
-    EXPECT_EQ(expected_msg.frame_id,   _msg.frame_id);
-  }
-
-  /// \brief Create a message used for testing.
-  /// \param[out] _msg The message populated.
-  void createTestMsg(sensor_msgs::Image &_msg)
-  {
-    std_msgs::Header header_msg;
-    createTestMsg(header_msg);
-
-    _msg.header       = header_msg;
-    _msg.width        = 320;
-    _msg.height       = 240;
-    _msg.encoding     = "rgb8";
-    _msg.is_bigendian = false;
-    _msg.step         = _msg.width * 3;
-    _msg.data.resize(_msg.height * _msg.step, '1');
-  }
-
-  /// \brief Compare a message with the populated for testing.
-  /// \param[in] _msg The message to compare.
-  void compareTestMsg(const sensor_msgs::Image &_msg)
-  {
-    sensor_msgs::Image expected_msg;
-    createTestMsg(expected_msg);
-
-    compareTestMsg(_msg.header);
-    EXPECT_EQ(expected_msg.width,        _msg.width);
-    EXPECT_EQ(expected_msg.height,       _msg.height);
-    EXPECT_EQ(expected_msg.encoding,     _msg.encoding);
-    EXPECT_EQ(expected_msg.is_bigendian, _msg.is_bigendian);
-    EXPECT_EQ(expected_msg.step,         _msg.step);
-  }
-
-  //////////////////////////////////////////////////
-  /// gz::msgs test utils
-  //////////////////////////////////////////////////
-
-  /// \brief Create a message used for testing.
-  /// \param[out] _msg The message populated.
-  void createTestMsg(ignition::msgs::Header &_msg)
-  {
-    auto seq_entry = _msg.add_data();
-    seq_entry->set_key("seq");
-    seq_entry->add_value("1");
-    _msg.mutable_stamp()->set_sec(2);
-    _msg.mutable_stamp()->set_nsec(3);
-    auto frame_id_entry = _msg.add_data();
-    frame_id_entry->set_key("frame_id");
-    frame_id_entry->add_value("frame_id_value");
-  }
-
-  /// \brief Compare a message with the populated for testing.
-  /// \param[in] _msg The message to compare.
-  void compareTestMsg(const ignition::msgs::Header &_msg)
-  {
-    ignition::msgs::Header expected_msg;
-    createTestMsg(expected_msg);
-
-    EXPECT_EQ(expected_msg.stamp().sec(),    _msg.stamp().sec());
-    EXPECT_EQ(expected_msg.stamp().nsec(),   _msg.stamp().nsec());
-    EXPECT_GE(_msg.data_size(),              2);
-    EXPECT_EQ(expected_msg.data(0).key(),    _msg.data(0).key());
-    EXPECT_EQ(1,                             _msg.data(0).value_size());
-    std::string value = _msg.data(0).value(0);
-    try
-    {
-      uint32_t ul = std::stoul(value, nullptr);
-      EXPECT_GE(ul, 0u);
-    }
-    catch (std::exception & e)
-    {
-      FAIL();
-    }
-    EXPECT_EQ(expected_msg.data(1).key(),    _msg.data(1).key());
-    EXPECT_EQ(1,                             _msg.data(1).value_size());
-    EXPECT_EQ(expected_msg.data(1).value(0), _msg.data(1).value(0));
-  }
-
-  /// \brief Create a message used for testing.
-  /// \param[out] _msg The message populated.
-  void createTestMsg(ignition::msgs::Image &_msg)
-  {
-    ignition::msgs::Header header_msg;
-    createTestMsg(header_msg);
-
-    _msg.mutable_header()->CopyFrom(header_msg);
-    _msg.set_width(320);
-    _msg.set_height(240);
-    _msg.set_pixel_format_type(ignition::msgs::PixelFormatType::RGB_INT8);
-    _msg.set_step(_msg.width() * 3);
-    _msg.set_data(std::string(_msg.height() * _msg.step(), '1'));
-  }
-
-  /// \brief Compare a message with the populated for testing.
-  /// \param[in] _msg The message to compare.
-  void compareTestMsg(const ignition::msgs::Image &_msg)
-  {
-    ignition::msgs::Image expected_msg;
-    createTestMsg(expected_msg);
-
-    compareTestMsg(_msg.header());
-    EXPECT_EQ(expected_msg.width(),             _msg.width());
-    EXPECT_EQ(expected_msg.height(),            _msg.height());
-    EXPECT_EQ(expected_msg.pixel_format_type(), _msg.pixel_format_type());
-    EXPECT_EQ(expected_msg.step(),              _msg.step());
-    EXPECT_EQ(expected_msg.data(),              _msg.data());
-  }
-}
-}
-
-#endif  // ROS_GZ_BRIDGE__TEST_UTILS_H_
diff --git a/ros_gz_point_cloud/CHANGELOG.rst b/ros_gz_point_cloud/CHANGELOG.rst
deleted file mode 100644
index 6f0104b..0000000
--- a/ros_gz_point_cloud/CHANGELOG.rst
+++ /dev/null
@@ -1,81 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros1_ign_point_cloud
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.7.0 (2019-08-15)
-------------------
-
-0.6.3 (2019-08-04)
-------------------
-
-0.6.2 (2019-08-04)
-------------------
-
-0.6.1 (2019-08-04)
-------------------
-
-0.6.0 (2019-08-02)
-------------------
-
-* 0.5.0
-* Merge pull request `#28 <https://github.com/osrf/ros1_ign_bridge/issues/28>`_ from osrf/pointcloudpacked
-  Bridge point cloud packed
-* Contributors: Nate Koenig
-
-* Merge pull request `#28 <https://github.com/osrf/ros1_ign_bridge/issues/28>`_ from osrf/pointcloudpacked
-  Bridge point cloud packed
-* Contributors: Nate Koenig
-
-0.4.0 (2019-07-16)
-------------------
-
-0.3.1 (2019-07-01)
-------------------
-
-0.3.0 (2019-06-28)
-------------------
-* 0.2.0
-* Merge pull request `#21 <https://github.com/osrf/ros1_ign_bridge/issues/21>`_ from osrf/lidar
-  Point clouds from lidars
-* fix RGBD's color
-* final tweaks
-* PC2 for gpu_lidar, 1 vertical sample
-* Start of lidar PC
-* Demos package (`#19 <https://github.com/osrf/ros1_ign_bridge/issues/19>`_)
-  * Start of demos package: camera
-  * IMU
-  * depth camera
-  * magnetometer
-  * lidar, base launch
-  * READMEs, RGBD camera
-  * screenshots
-  * missing IMU
-  * set plugin path env
-  * It's best to always set it
-* Point clouds for RGBD cameras (`#17 <https://github.com/osrf/ros1_ign_bridge/issues/17>`_)
-  * Beginning of point cloud package
-  * Populating image data, but result is not correct. Must find out where's the source of the problem.
-  * RGB -> BGR: why?
-  * Cleanup code and example
-  * pointcloud -> point_cloud
-  * add keys - how was this working before?
-  * install wget
-  * well, we need ign-gz2 :sweat_smile:
-  * README update
-  * PR feedback
-  * .travis/build: rosdep skip ignition keys (`#18 <https://github.com/osrf/ros1_ign_bridge/issues/18>`_)
-  * .travis/build: rosdep skip ignition keys
-  * Update build
-* Contributors: Nate Koenig, chapulina
-
-0.2.2 (2019-05-20)
-------------------
-
-0.2.1 (2019-05-11)
-------------------
-
-0.2.0 (2019-05-09)
-------------------
-
-0.1.0 (2019-03-20)
-------------------
diff --git a/ros_gz_point_cloud/CMakeLists.txt b/ros_gz_point_cloud/CMakeLists.txt
deleted file mode 100644
index afcce42..0000000
--- a/ros_gz_point_cloud/CMakeLists.txt
+++ /dev/null
@@ -1,67 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-
-project(ros_gz_point_cloud)
-
-# Default to C++17
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 17)
-endif()
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  add_compile_options(-Wall -Wextra)
-endif()
-
-find_package(catkin REQUIRED COMPONENTS
-  roscpp
-  sensor_msgs)
-
-find_package(ignition-gazebo2 2.1 QUIET REQUIRED)
-set(GZ_SIM_VER ${ignition-gazebo2_VERSION_MAJOR})
-
-find_package(ignition-rendering2 QUIET REQUIRED)
-set(GZ_RENDERING_VER ${ignition-rendering2_VERSION_MAJOR})
-
-find_package(ignition-sensors2 QUIET REQUIRED)
-set(GZ_SENSORS_VER ${ignition-sensors2_VERSION_MAJOR})
-
-catkin_package()
-
-include_directories(
-  include
-  ${catkin_INCLUDE_DIRS}
-)
-
-set(plugin_name RosGzPointCloud)
-add_library(${plugin_name} SHARED
-  src/point_cloud.cc
-)
-target_link_libraries(${plugin_name}
-  ignition-gazebo${GZ_SIM_VER}::core
-  ignition-rendering${GZ_RENDERING_VER}::core
-  ignition-sensors${GZ_SENSORS_VER}::core
-  ${catkin_LIBRARIES}
-)
-install(TARGETS ${plugin_name}
-  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
-)
-install(
-  DIRECTORY
-    examples/
-  DESTINATION
-    ${CATKIN_PACKAGE_SHARE_DESTINATION}/examples
-)
-
-# TODO(CH3): Install symlink to deprecated library name. Remove on tock.
-string(REPLACE "RosGz" "RosIgn" plugin_name_ign ${plugin_name})
-if(WIN32)
-  # symlinks on Windows require admin priviledges, fallback to copy
-  ADD_CUSTOM_COMMAND(TARGET ${plugin_name} POST_BUILD
-    COMMAND "${CMAKE_COMMAND}" -E copy
-      "$<TARGET_FILE:${plugin_name}>"
-      "$<TARGET_FILE_DIR:${CATKIN_PACKAGE_LIB_DESTINATION}>/${plugin_name_ign}")
-else()
-  file(MAKE_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
-  EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E create_symlink ${plugin_name} ${plugin_name_ign} WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
-  INSTALL(FILES ${PROJECT_BINARY_DIR}/lib/${plugin_name_ign} DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION})
-endif()
diff --git a/ros_gz_point_cloud/COLCON_IGNORE b/ros_gz_point_cloud/COLCON_IGNORE
deleted file mode 100644
index e69de29..0000000
diff --git a/ros_gz_point_cloud/examples/depth_camera.sdf b/ros_gz_point_cloud/examples/depth_camera.sdf
deleted file mode 100644
index 574d0ce..0000000
--- a/ros_gz_point_cloud/examples/depth_camera.sdf
+++ /dev/null
@@ -1,316 +0,0 @@
-<?xml version="1.0" ?>
-<!--
-  Example publishing point cloud messages to ROS from Gazebo.
-
-  Try it out:
-
-  1. Start ROS core:
-
-          roscore
-
-  2. Make sure Gazebo Sim can find the point cloud plugin by adding your lib install directory
-     to the path, for example:
-
-          export GZ_SIM_SYSTEM_PLUGIN_PATH=<ws>/install/lib/
-
-  3. Load the example world, unpaused:
-
-          ign gazebo -r examples/depth_camera.sdf
-
-  4. Launch RViz to visualize the point cloud:
-
-          rosrun rviz rviz
-
-  5. On RViz, add the `/depth_camera/points` topic for `PointCloud2` messages and change the fixed frame
-     to `map`. You should see the point cloud.
-
--->
-<sdf version="1.6">
-  <world name="ros_gz">
-    <physics name="1ms" type="ode">
-      <max_step_size>0.001</max_step_size>
-      <real_time_factor>1.0</real_time_factor>
-    </physics>
-    <plugin
-      filename="ignition-gazebo-physics-system"
-      name="ignition::gazebo::systems::Physics">
-    </plugin>
-    <plugin
-      filename="ignition-gazebo-sensors-system"
-      name="ignition::gazebo::systems::Sensors">
-      <render_engine>ogre2</render_engine>
-    </plugin>
-    <plugin
-      filename="ignition-gazebo-scene-broadcaster-system"
-      name="ignition::gazebo::systems::SceneBroadcaster">
-    </plugin>
-
-    <gui fullscreen="0">
-
-      <!-- 3D scene -->
-      <plugin filename="GzScene3D" name="3D View">
-        <ignition-gui>
-          <title>3D View</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="string" key="state">docked</property>
-        </ignition-gui>
-
-        <engine>ogre2</engine>
-        <scene>scene</scene>
-        <ambient_light>0.4 0.4 0.4</ambient_light>
-        <background_color>0.8 0.8 0.8</background_color>
-        <camera_pose>-6 0 6 0 0.5 0</camera_pose>
-      </plugin>
-
-      <!-- World control -->
-      <plugin filename="WorldControl" name="World control">
-        <ignition-gui>
-          <title>World control</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="bool" key="resizable">false</property>
-          <property type="double" key="height">72</property>
-          <property type="double" key="width">121</property>
-          <property type="double" key="z">1</property>
-
-          <property type="string" key="state">floating</property>
-          <anchors target="3D View">
-            <line own="left" target="left"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-
-        <play_pause>true</play_pause>
-        <step>true</step>
-        <start_paused>true</start_paused>
-        <service>/world/ros_gz/control</service>
-        <stats_topic>/world/ros_gz/stats</stats_topic>
-
-      </plugin>
-
-      <!-- World statistics -->
-      <plugin filename="WorldStats" name="World stats">
-        <ignition-gui>
-          <title>World stats</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="bool" key="resizable">false</property>
-          <property type="double" key="height">110</property>
-          <property type="double" key="width">290</property>
-          <property type="double" key="z">1</property>
-
-          <property type="string" key="state">floating</property>
-          <anchors target="3D View">
-            <line own="right" target="right"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-
-        <sim_time>true</sim_time>
-        <real_time>true</real_time>
-        <real_time_factor>true</real_time_factor>
-        <iterations>true</iterations>
-        <topic>/world/ros_gz/stats</topic>
-      </plugin>
-
-      <plugin filename="ImageDisplay" name="Image Display">
-        <ignition-gui>
-          <property key="state" type="string">docked</property>
-        </ignition-gui>
-      </plugin>
-    </gui>
-
-    <light type="directional" name="sun">
-      <cast_shadows>true</cast_shadows>
-      <pose>0 0 10 0 0 0</pose>
-      <diffuse>0.8 0.8 0.8 1</diffuse>
-      <specular>0.2 0.2 0.2 1</specular>
-      <attenuation>
-        <range>1000</range>
-        <constant>0.9</constant>
-        <linear>0.01</linear>
-        <quadratic>0.001</quadratic>
-      </attenuation>
-      <direction>-0.5 0.1 -0.9</direction>
-    </light>
-
-    <model name="ground_plane">
-      <static>true</static>
-      <link name="link">
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>20 20 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>20 20 0.1</size>
-            </box>
-          </geometry>
-          <material>
-            <ambient>0.8 0.8 0.8 1</ambient>
-            <diffuse>0.8 0.8 0.8 1</diffuse>
-            <specular>0.8 0.8 0.8 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="box">
-      <pose>0 -1 0.5 0 0 0.7</pose>
-      <link name="link">
-        <inertial>
-          <inertia>
-            <ixx>1</ixx>
-            <ixy>0</ixy>
-            <ixz>0</ixz>
-            <iyy>1</iyy>
-            <iyz>0</iyz>
-            <izz>1</izz>
-          </inertia>
-          <mass>1.0</mass>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>1 1 1</size>
-            </box>
-          </geometry>
-        </collision>
-
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>1 1 1</size>
-            </box>
-          </geometry>
-          <material>
-            <ambient>1 0 0 1</ambient>
-            <diffuse>1 0 0 1</diffuse>
-            <specular>1 0 0 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="sphere">
-      <pose>3 0 0.5 0 0 0</pose>
-      <link name="link">
-        <inertial>
-          <inertia>
-            <ixx>1</ixx>
-            <ixy>0</ixy>
-            <ixz>0</ixz>
-            <iyy>1</iyy>
-            <iyz>0</iyz>
-            <izz>1</izz>
-          </inertia>
-          <mass>1.0</mass>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <sphere>
-              <radius>0.2</radius>
-            </sphere>
-          </geometry>
-        </collision>
-
-        <visual name="visual">
-          <geometry>
-            <sphere>
-              <radius>0.2</radius>
-            </sphere>
-          </geometry>
-          <material>
-            <ambient>1 1 0 1</ambient>
-            <diffuse>1 1 0 1</diffuse>
-            <specular>1 1 0 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="custom_params">
-      <pose>5 0 0.5 0 0.0 3.14</pose>
-      <link name="link">
-        <pose>0.05 0.05 0.05 0 0 0</pose>
-        <inertial>
-          <mass>0.1</mass>
-          <inertia>
-            <ixx>0.000166667</ixx>
-            <iyy>0.000166667</iyy>
-            <izz>0.000166667</izz>
-          </inertia>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </visual>
-        <sensor name="depth_camera" type="depth_camera">
-          <camera>
-            <horizontal_fov>1.047</horizontal_fov>
-            <image>
-              <width>320</width>
-              <height>240</height>
-              <format>R_FLOAT32</format>
-            </image>
-            <clip>
-              <near>0.1</near>
-              <far>100</far>
-            </clip>
-          </camera>
-          <always_on>1</always_on>
-          <update_rate>10</update_rate>
-          <visualize>true</visualize>
-          <topic>depth_camera</topic>
-          <plugin
-            filename="RosGzPointCloud"
-            name="ros_gz_point_cloud::PointCloud">
-            <topic>points</topic>
-            <frame_id>map</frame_id>
-          </plugin>
-        </sensor>
-      </link>
-    </model>
-
-    <model name="default_params">
-      <pose>9 0 0.5 0 0.0 3.14</pose>
-      <static>true</static>
-      <link name="link">
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </visual>
-      </link>
-    </model>
-
-    <include>
-      <pose>0 1 3 0.0 0.0 1.57</pose>
-      <uri>
-      https://fuel.ignitionrobotics.org/1.0/openrobotics/models/Construction Cone
-      </uri>
-    </include>
-
-  </world>
-</sdf>
diff --git a/ros_gz_point_cloud/examples/gpu_lidar.sdf b/ros_gz_point_cloud/examples/gpu_lidar.sdf
deleted file mode 100644
index 7bd3a73..0000000
--- a/ros_gz_point_cloud/examples/gpu_lidar.sdf
+++ /dev/null
@@ -1,299 +0,0 @@
-<?xml version="1.0" ?>
-<!--
-  Example publishing point cloud messages to ROS from Gazebo.
-
-  Try it out:
-
-  1. Start ROS core:
-
-          roscore
-
-  2. Make sure Gazebo Sim can find the point cloud plugin by adding your lib install directory
-     to the path, for example:
-
-          export GZ_SIM_SYSTEM_PLUGIN_PATH=<ws>/install/lib/
-
-  3. Load this world, unpaused:
-
-          ign gazebo -r examples/gpu_lidar.sdf
-
-  4. Launch RViz to visualize the point cloud:
-
-          rosrun rviz rviz
-
-  5. On RViz, add the `/custom_params/pc2` topic for `PointCloud2` messages and change the fixed frame
-     to `custom_params/link`.
-
--->
-<sdf version="1.6">
-  <world name="ros_gz">
-    <physics name="1ms" type="ode">
-      <max_step_size>0.001</max_step_size>
-      <real_time_factor>1.0</real_time_factor>
-    </physics>
-    <plugin
-      filename="ignition-gazebo-physics-system"
-      name="ignition::gazebo::systems::Physics">
-    </plugin>
-    <plugin
-      filename="ignition-gazebo-sensors-system"
-      name="ignition::gazebo::systems::Sensors">
-      <render_engine>ogre2</render_engine>
-    </plugin>
-    <plugin
-      filename="ignition-gazebo-scene-broadcaster-system"
-      name="ignition::gazebo::systems::SceneBroadcaster">
-    </plugin>
-
-    <gui fullscreen="0">
-
-      <!-- 3D scene -->
-      <plugin filename="GzScene3D" name="3D View">
-        <ignition-gui>
-          <title>3D View</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="string" key="state">docked</property>
-        </ignition-gui>
-
-        <engine>ogre2</engine>
-        <scene>scene</scene>
-        <ambient_light>0.4 0.4 0.4</ambient_light>
-        <background_color>0.8 0.8 0.8</background_color>
-        <camera_pose>-6 0 6 0 0.5 0</camera_pose>
-      </plugin>
-
-      <!-- World control -->
-      <plugin filename="WorldControl" name="World control">
-        <ignition-gui>
-          <title>World control</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="bool" key="resizable">false</property>
-          <property type="double" key="height">72</property>
-          <property type="double" key="width">121</property>
-          <property type="double" key="z">1</property>
-
-          <property type="string" key="state">floating</property>
-          <anchors target="3D View">
-            <line own="left" target="left"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-
-        <play_pause>true</play_pause>
-        <step>true</step>
-        <start_paused>true</start_paused>
-        <service>/world/ros_gz/control</service>
-        <stats_topic>/world/ros_gz/stats</stats_topic>
-
-      </plugin>
-
-      <!-- World statistics -->
-      <plugin filename="WorldStats" name="World stats">
-        <ignition-gui>
-          <title>World stats</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="bool" key="resizable">false</property>
-          <property type="double" key="height">110</property>
-          <property type="double" key="width">290</property>
-          <property type="double" key="z">1</property>
-
-          <property type="string" key="state">floating</property>
-          <anchors target="3D View">
-            <line own="right" target="right"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-
-        <sim_time>true</sim_time>
-        <real_time>true</real_time>
-        <real_time_factor>true</real_time_factor>
-        <iterations>true</iterations>
-        <topic>/world/ros_gz/stats</topic>
-      </plugin>
-    </gui>
-
-    <light type="directional" name="sun">
-      <cast_shadows>true</cast_shadows>
-      <pose>0 0 10 0 0 0</pose>
-      <diffuse>0.8 0.8 0.8 1</diffuse>
-      <specular>0.2 0.2 0.2 1</specular>
-      <attenuation>
-        <range>1000</range>
-        <constant>0.9</constant>
-        <linear>0.01</linear>
-        <quadratic>0.001</quadratic>
-      </attenuation>
-      <direction>-0.5 0.1 -0.9</direction>
-    </light>
-
-    <model name="ground_plane">
-      <static>true</static>
-      <link name="link">
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>20 20 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>20 20 0.1</size>
-            </box>
-          </geometry>
-          <material>
-            <ambient>0.8 0.8 0.8 1</ambient>
-            <diffuse>0.8 0.8 0.8 1</diffuse>
-            <specular>0.8 0.8 0.8 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="box">
-      <pose>0 -1 0.5 0 0 0.7</pose>
-      <link name="link">
-        <inertial>
-          <inertia>
-            <ixx>1</ixx>
-            <ixy>0</ixy>
-            <ixz>0</ixz>
-            <iyy>1</iyy>
-            <iyz>0</iyz>
-            <izz>1</izz>
-          </inertia>
-          <mass>1.0</mass>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>1 1 1</size>
-            </box>
-          </geometry>
-        </collision>
-
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>1 1 1</size>
-            </box>
-          </geometry>
-          <material>
-            <ambient>1 0 0 1</ambient>
-            <diffuse>1 0 0 1</diffuse>
-            <specular>1 0 0 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="sphere">
-      <pose>3 0 0.5 0 0 0</pose>
-      <link name="link">
-        <inertial>
-          <inertia>
-            <ixx>1</ixx>
-            <ixy>0</ixy>
-            <ixz>0</ixz>
-            <iyy>1</iyy>
-            <iyz>0</iyz>
-            <izz>1</izz>
-          </inertia>
-          <mass>1.0</mass>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <sphere>
-              <radius>0.2</radius>
-            </sphere>
-          </geometry>
-        </collision>
-
-        <visual name="visual">
-          <geometry>
-            <sphere>
-              <radius>0.2</radius>
-            </sphere>
-          </geometry>
-          <material>
-            <ambient>1 1 0 1</ambient>
-            <diffuse>1 1 0 1</diffuse>
-            <specular>1 1 0 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="custom_params">
-      <pose>5 0 0.5 0 0.0 3.14</pose>
-      <link name="link">
-        <pose>0.05 0.05 0.05 0 0 0</pose>
-        <inertial>
-          <mass>0.1</mass>
-          <inertia>
-            <ixx>0.000166667</ixx>
-            <iyy>0.000166667</iyy>
-            <izz>0.000166667</izz>
-          </inertia>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </visual>
-        <sensor name='gpu_lidar' type='gpu_lidar'>
-          <topic>lidar</topic>
-          <update_rate>10</update_rate>
-          <lidar>
-            <scan>
-              <horizontal>
-                <samples>640</samples>
-                <resolution>1</resolution>
-                <min_angle>-1.396263</min_angle>
-                <max_angle>1.396263</max_angle>
-              </horizontal>
-              <vertical>
-                <samples>16</samples>
-                <resolution>1</resolution>
-                <min_angle>-0.261799</min_angle>
-                <max_angle>0.261799</max_angle>
-              </vertical>
-            </scan>
-            <range>
-              <min>0.08</min>
-              <max>10.0</max>
-              <resolution>0.01</resolution>
-            </range>
-          </lidar>
-          <alwaysOn>1</alwaysOn>
-          <visualize>true</visualize>
-          <plugin
-            filename="RosGzPointCloud"
-            name="ros_gz_point_cloud::PointCloud">
-            <namespace>custom_params</namespace>
-            <topic>pc2</topic>
-            <frame_id>custom_params/link</frame_id>
-          </plugin>
-        </sensor>
-      </link>
-    </model>
-
-    <include>
-      <pose>0 1 3 0.0 0.0 1.57</pose>
-      <uri>
-      https://fuel.ignitionrobotics.org/1.0/openrobotics/models/Construction Cone
-      </uri>
-    </include>
-
-  </world>
-</sdf>
diff --git a/ros_gz_point_cloud/examples/rgbd_camera.sdf b/ros_gz_point_cloud/examples/rgbd_camera.sdf
deleted file mode 100644
index 64a77b6..0000000
--- a/ros_gz_point_cloud/examples/rgbd_camera.sdf
+++ /dev/null
@@ -1,393 +0,0 @@
-<?xml version="1.0" ?>
-<!--
-  Example publishing point cloud messages to ROS from Gazebo.
-  There are 2 RGBD cameras: one with custom plugin parameters and another one with default parameters.
-
-  Try it out:
-
-  1. Start ROS core:
-
-          roscore
-
-  2. Make sure Gazebo Sim can find the point cloud plugin by adding your lib install directory
-     to the path, for example:
-
-          export GZ_SIM_SYSTEM_PLUGIN_PATH=<ws>/install/lib/
-
-  3. Load the example world, unpaused:
-
-          ign gazebo -r examples/rgbd_camera.sdf
-
-  4. Launch RViz to visualize the point cloud:
-
-          rosrun rviz rviz
-
-  5. On RViz, add the `/custom_params/pc2` topic for `PointCloud2` messages and change the fixed frame
-     to `map`. You should see the point cloud from the `custom_params` camera.
-
-  6. On RViz, add the `/default_params/points` topic for `PointCloud2` messages and change the fixed
-     frame to `default_params`. You should see the point cloud from the `default_params` camera.
-
--->
-<sdf version="1.6">
-  <world name="ros_gz">
-    <physics name="1ms" type="ode">
-      <max_step_size>0.001</max_step_size>
-      <real_time_factor>1.0</real_time_factor>
-    </physics>
-    <plugin
-      filename="ignition-gazebo-physics-system"
-      name="ignition::gazebo::systems::Physics">
-    </plugin>
-    <plugin
-      filename="ignition-gazebo-sensors-system"
-      name="ignition::gazebo::systems::Sensors">
-      <render_engine>ogre2</render_engine>
-    </plugin>
-    <plugin
-      filename="ignition-gazebo-scene-broadcaster-system"
-      name="ignition::gazebo::systems::SceneBroadcaster">
-    </plugin>
-
-    <gui fullscreen="0">
-
-      <!-- 3D scene -->
-      <plugin filename="GzScene3D" name="3D View">
-        <ignition-gui>
-          <title>3D View</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="string" key="state">docked</property>
-        </ignition-gui>
-
-        <engine>ogre2</engine>
-        <scene>scene</scene>
-        <ambient_light>0.4 0.4 0.4</ambient_light>
-        <background_color>0.8 0.8 0.8</background_color>
-        <camera_pose>-6 0 6 0 0.5 0</camera_pose>
-      </plugin>
-
-      <!-- World control -->
-      <plugin filename="WorldControl" name="World control">
-        <ignition-gui>
-          <title>World control</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="bool" key="resizable">false</property>
-          <property type="double" key="height">72</property>
-          <property type="double" key="width">121</property>
-          <property type="double" key="z">1</property>
-
-          <property type="string" key="state">floating</property>
-          <anchors target="3D View">
-            <line own="left" target="left"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-
-        <play_pause>true</play_pause>
-        <step>true</step>
-        <start_paused>true</start_paused>
-        <service>/world/ros_gz/control</service>
-        <stats_topic>/world/ros_gz/stats</stats_topic>
-
-      </plugin>
-
-      <!-- World statistics -->
-      <plugin filename="WorldStats" name="World stats">
-        <ignition-gui>
-          <title>World stats</title>
-          <property type="bool" key="showTitleBar">false</property>
-          <property type="bool" key="resizable">false</property>
-          <property type="double" key="height">110</property>
-          <property type="double" key="width">290</property>
-          <property type="double" key="z">1</property>
-
-          <property type="string" key="state">floating</property>
-          <anchors target="3D View">
-            <line own="right" target="right"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-
-        <sim_time>true</sim_time>
-        <real_time>true</real_time>
-        <real_time_factor>true</real_time_factor>
-        <iterations>true</iterations>
-        <topic>/world/ros_gz/stats</topic>
-      </plugin>
-
-      <plugin filename="ImageDisplay" name="Image Display">
-        <ignition-gui>
-          <title>Custom: depth</title>
-          <property key="width" type="double">400</property>
-          <property key="state" type="string">floating</property>
-          <anchors target="3D View">
-            <line own="left" target="left"/>
-            <line own="top" target="top"/>
-          </anchors>
-        </ignition-gui>
-        <topic>custom_params/depth_image</topic>
-        <topic_picker>false</topic_picker>
-      </plugin>
-
-      <plugin filename="ImageDisplay" name="Image Display">
-        <ignition-gui>
-          <title>Custom: RGB</title>
-          <property key="width" type="double">400</property>
-          <property key="state" type="string">floating</property>
-          <anchors target="3D View">
-            <line own="right" target="right"/>
-            <line own="top" target="top"/>
-          </anchors>
-        </ignition-gui>
-        <topic>custom_params/image</topic>
-        <topic_picker>false</topic_picker>
-      </plugin>
-
-      <plugin filename="ImageDisplay" name="Image Display">
-        <ignition-gui>
-          <title>Default: depth</title>
-          <property key="width" type="double">400</property>
-          <property key="height" type="double">315</property>
-          <property key="state" type="string">floating</property>
-          <anchors target="3D View">
-            <line own="left" target="left"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-        <topic>rgbd_camera/depth_image</topic>
-        <topic_picker>false</topic_picker>
-      </plugin>
-
-      <plugin filename="ImageDisplay" name="Image Display">
-        <ignition-gui>
-          <title>Default: RGB</title>
-          <property key="width" type="double">400</property>
-          <property key="height" type="double">315</property>
-          <property key="state" type="string">floating</property>
-          <anchors target="3D View">
-            <line own="right" target="right"/>
-            <line own="bottom" target="bottom"/>
-          </anchors>
-        </ignition-gui>
-        <topic>rgbd_camera/image</topic>
-        <topic_picker>false</topic_picker>
-      </plugin>
-    </gui>
-
-    <light type="directional" name="sun">
-      <cast_shadows>true</cast_shadows>
-      <pose>0 0 10 0 0 0</pose>
-      <diffuse>0.8 0.8 0.8 1</diffuse>
-      <specular>0.2 0.2 0.2 1</specular>
-      <attenuation>
-        <range>1000</range>
-        <constant>0.9</constant>
-        <linear>0.01</linear>
-        <quadratic>0.001</quadratic>
-      </attenuation>
-      <direction>-0.5 0.1 -0.9</direction>
-    </light>
-
-    <model name="ground_plane">
-      <static>true</static>
-      <link name="link">
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>20 20 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>20 20 0.1</size>
-            </box>
-          </geometry>
-          <material>
-            <ambient>0.8 0.8 0.8 1</ambient>
-            <diffuse>0.8 0.8 0.8 1</diffuse>
-            <specular>0.8 0.8 0.8 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="box">
-      <pose>0 -1 0.5 0 0 0.7</pose>
-      <link name="link">
-        <inertial>
-          <inertia>
-            <ixx>1</ixx>
-            <ixy>0</ixy>
-            <ixz>0</ixz>
-            <iyy>1</iyy>
-            <iyz>0</iyz>
-            <izz>1</izz>
-          </inertia>
-          <mass>1.0</mass>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>1 1 1</size>
-            </box>
-          </geometry>
-        </collision>
-
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>1 1 1</size>
-            </box>
-          </geometry>
-          <material>
-            <ambient>1 0 0 1</ambient>
-            <diffuse>1 0 0 1</diffuse>
-            <specular>1 0 0 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="sphere">
-      <pose>3 0 0.5 0 0 0</pose>
-      <link name="link">
-        <inertial>
-          <inertia>
-            <ixx>1</ixx>
-            <ixy>0</ixy>
-            <ixz>0</ixz>
-            <iyy>1</iyy>
-            <iyz>0</iyz>
-            <izz>1</izz>
-          </inertia>
-          <mass>1.0</mass>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <sphere>
-              <radius>0.2</radius>
-            </sphere>
-          </geometry>
-        </collision>
-
-        <visual name="visual">
-          <geometry>
-            <sphere>
-              <radius>0.2</radius>
-            </sphere>
-          </geometry>
-          <material>
-            <ambient>1 1 0 1</ambient>
-            <diffuse>1 1 0 1</diffuse>
-            <specular>1 1 0 1</specular>
-          </material>
-        </visual>
-      </link>
-    </model>
-
-    <model name="custom_params">
-      <pose>5 0 0.5 0 0.0 3.14</pose>
-      <link name="link">
-        <pose>0.05 0.05 0.05 0 0 0</pose>
-        <inertial>
-          <mass>0.1</mass>
-          <inertia>
-            <ixx>0.000166667</ixx>
-            <iyy>0.000166667</iyy>
-            <izz>0.000166667</izz>
-          </inertia>
-        </inertial>
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </visual>
-        <sensor name="rgbd_camera" type="rgbd_camera">
-          <camera>
-            <horizontal_fov>1.047</horizontal_fov>
-            <image>
-              <width>320</width>
-              <height>240</height>
-            </image>
-            <clip>
-              <near>0.1</near>
-              <far>100</far>
-            </clip>
-          </camera>
-          <always_on>1</always_on>
-          <update_rate>30</update_rate>
-          <visualize>true</visualize>
-          <topic>custom_params</topic>
-          <plugin
-            filename="RosGzPointCloud"
-            name="ros_gz_point_cloud::PointCloud">
-            <namespace>custom_params</namespace>
-            <topic>pc2</topic>
-            <frame_id>map</frame_id>
-          </plugin>
-        </sensor>
-      </link>
-    </model>
-
-    <model name="default_params">
-      <pose>9 0 0.5 0 0.0 3.14</pose>
-      <static>true</static>
-      <link name="link">
-        <collision name="collision">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </collision>
-        <visual name="visual">
-          <geometry>
-            <box>
-              <size>0.1 0.1 0.1</size>
-            </box>
-          </geometry>
-        </visual>
-        <sensor name="default_params" type="rgbd_camera">
-          <camera>
-            <horizontal_fov>1.047</horizontal_fov>
-            <image>
-              <width>320</width>
-              <height>240</height>
-            </image>
-            <clip>
-              <near>0.1</near>
-              <far>100</far>
-            </clip>
-          </camera>
-          <always_on>1</always_on>
-          <update_rate>30</update_rate>
-          <visualize>true</visualize>
-          <topic>rgbd_camera</topic>
-          <plugin
-            filename="RosGzPointCloud"
-            name="ros_gz_point_cloud::PointCloud">
-          </plugin>
-        </sensor>
-      </link>
-    </model>
-
-    <include>
-      <pose>0 1 3 0.0 0.0 1.57</pose>
-      <uri>
-      https://fuel.ignitionrobotics.org/1.0/openrobotics/models/Construction Cone
-      </uri>
-    </include>
-
-  </world>
-</sdf>
diff --git a/ros_gz_point_cloud/package.xml b/ros_gz_point_cloud/package.xml
deleted file mode 100644
index b3d5717..0000000
--- a/ros_gz_point_cloud/package.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<package format="3">
-  <name>ros_gz_point_cloud</name>
-  <version>0.7.0</version>
-  <description>Point cloud utilities for Gazebo simulation with ROS.</description>
-  <license>Apache 2.0</license>
-  <maintainer email="louise@openrobotics.org">Louise Poubel</maintainer>
-
-  <buildtool_depend>catkin</buildtool_depend>
-
-  <depend>ignition-gazebo2</depend>
-  <depend>ignition-rendering2</depend>
-  <depend>ignition-sensors2</depend>
-  <depend>roscpp</depend>
-  <depend>sensor_msgs</depend>
-
-  <exec_depend>message_runtime</exec_depend>
-</package>
diff --git a/ros_gz_point_cloud/src/point_cloud.cc b/ros_gz_point_cloud/src/point_cloud.cc
deleted file mode 100644
index 66a0e59..0000000
--- a/ros_gz_point_cloud/src/point_cloud.cc
+++ /dev/null
@@ -1,527 +0,0 @@
-// Copyright 2019 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-#include "point_cloud.hh"
-#include <ignition/common/Event.hh>
-#include <ignition/gazebo/components/Name.hh>
-#include <ignition/gazebo/components/DepthCamera.hh>
-#include <ignition/gazebo/components/GpuLidar.hh>
-#include <ignition/gazebo/components/RgbdCamera.hh>
-#include <ignition/gazebo/Util.hh>
-#include <ignition/plugin/Register.hh>
-#include <ignition/rendering/Camera.hh>
-#include <ignition/rendering/DepthCamera.hh>
-#include <ignition/rendering/GpuRays.hh>
-#include <ignition/rendering/RenderEngine.hh>
-#include <ignition/rendering/RenderingIface.hh>
-#include <ignition/rendering/Scene.hh>
-
-#include <ros/ros.h>
-#include <ros/advertise_options.h>
-#include <sensor_msgs/Image.h>
-#include <sensor_msgs/fill_image.h>
-#include <sensor_msgs/point_cloud2_iterator.h>
-
-IGNITION_ADD_PLUGIN(
-  ros_gz_point_cloud::PointCloud,
-  ignition::gazebo::System,
-  ros_gz_point_cloud::PointCloud::ISystemConfigure,
-  ros_gz_point_cloud::PointCloud::ISystemPostUpdate)
-
-using namespace ros_gz_point_cloud;
-
-/// \brief Types of sensors supported by this plugin
-enum class SensorType
-{
-  /// \brief A camera which combines an RGB and a depth camera
-  RGBD_CAMERA,
-
-  /// \brief Depth camera
-  DEPTH_CAMERA,
-
-  /// \brief GPU lidar rays
-  GPU_LIDAR
-};
-
-//////////////////////////////////////////////////
-class ros_gz_point_cloud::PointCloudPrivate
-{
-  /// \brief Callback when the depth camera generates a new frame.
-  /// This is called in the rendering thread.
-  /// \param[in] _scan Depth image data
-  /// \param[in] _width Image width in pixels
-  /// \param[in] _height Image height in pixels
-  /// \param[in] _channels Number of channels in image.
-  /// \param[in] _format Image format as string.
-
-public:
-  void OnNewDepthFrame(
-    const float * _scan,
-    unsigned int _width, unsigned int _height,
-    unsigned int _channels,
-    const std::string & _format);
-
-  /// \brief Get depth camera from rendering.
-  /// \param[in] _ecm Immutable reference to ECM.
-
-public:
-  void LoadDepthCamera(const ignition::gazebo::EntityComponentManager & _ecm);
-
-  /// \brief Get RGB camera from rendering.
-  /// \param[in] _ecm Immutable reference to ECM.
-
-public:
-  void LoadRgbCamera(const ignition::gazebo::EntityComponentManager & _ecm);
-
-  /// \brief Get GPU rays from rendering.
-  /// \param[in] _ecm Immutable reference to ECM.
-
-public:
-  void LoadGpuRays(const ignition::gazebo::EntityComponentManager & _ecm);
-
-  /// \brief Rendering scene which manages the cameras.
-
-public:
-  ignition::rendering::ScenePtr scene_;
-
-  /// \brief Entity ID for sensor within Gazebo.
-
-public:
-  ignition::gazebo::Entity entity_;
-
-  /// \brief Rendering depth camera
-
-public:
-  std::shared_ptr < ignition::rendering::DepthCamera > depth_camera_;
-
-  /// \brief Rendering RGB camera
-
-public:
-  std::shared_ptr < ignition::rendering::Camera > rgb_camera_;
-
-  /// \brief Rendering GPU lidar
-
-public:
-  std::shared_ptr < ignition::rendering::GpuRays > gpu_rays_;
-
-  /// \brief Keep latest image from RGB camera.
-
-public:
-  ignition::rendering::Image rgb_image_;
-
-  /// \brief Message populated with latest image from RGB camera.
-
-public:
-  sensor_msgs::Image rgb_image_msg_;
-
-  /// \brief Connection to depth frame event.
-
-public:
-  ignition::common::ConnectionPtr depth_connection_;
-
-  /// \brief Connection to GPU rays frame event.
-
-public:
-  ignition::common::ConnectionPtr gpu_rays_connection_;
-
-  /// \brief Node to publish ROS messages.
-
-public:
-  std::unique_ptr < ros::NodeHandle > rosnode_;
-
-  /// \brief Point cloud ROS publisher.
-
-public:
-  ros::Publisher pc_pub_;
-
-  /// \brief Current simulation time.
-
-public:
-  std::chrono::steady_clock::duration current_time_;
-
-  /// \brief Frame ID to put in message header. Defaults to sensor scoped name.
-
-public:
-  std::string frame_id_;
-
-  /// \brief Render engine name
-
-public:
-  std::string engine_name_;
-
-  /// \brief Render scene name
-
-public:
-  std::string scene_name_;
-
-  /// \brief Type of sensor which this plugin is attached to.
-
-public:
-  SensorType type_;
-};
-
-//////////////////////////////////////////////////
-PointCloud::PointCloud()
-: dataPtr(std::make_unique < PointCloudPrivate > ())
-{
-}
-
-//////////////////////////////////////////////////
-void PointCloud::Configure(
-  const ignition::gazebo::Entity & _entity,
-  const std::shared_ptr < const sdf::Element > & _sdf,
-  ignition::gazebo::EntityComponentManager & _ecm,
-  ignition::gazebo::EventManager &)
-{
-  this->dataPtr->entity_ = _entity;
-
-  if (_ecm.Component < ignition::gazebo::components::RgbdCamera > (_entity) != nullptr) {
-    this->dataPtr->type_ = SensorType::RGBD_CAMERA;
-  } else if (_ecm.Component < ignition::gazebo::components::DepthCamera > (_entity) != nullptr) {
-    this->dataPtr->type_ = SensorType::DEPTH_CAMERA;
-  } else if (_ecm.Component < ignition::gazebo::components::GpuLidar > (_entity) != nullptr) {
-    this->dataPtr->type_ = SensorType::GPU_LIDAR;
-  } else {
-    ROS_ERROR_NAMED(
-      "ros_gz_point_cloud",
-      "Point cloud plugin must be attached to an RGBD camera, depth camera or GPU lidar.");
-    return;
-  }
-
-  // Initialize ROS
-  if (!ros::isInitialized()) {
-    int argc = 0;
-    char ** argv = NULL;
-    ros::init(argc, argv, "ignition", ros::init_options::NoSigintHandler);
-    ROS_INFO_NAMED("ros_gz_point_cloud", "Initialized ROS");
-  }
-
-  // Sensor scoped name
-  auto scoped_name = ignition::gazebo::scopedName(this->dataPtr->entity_, _ecm, "/", false);
-
-  // ROS node
-  auto ns = _sdf->Get < std::string > ("namespace", scoped_name).first;
-  this->dataPtr->rosnode_ = std::make_unique < ros::NodeHandle > (ns);
-
-  // Publisher
-  auto topic = _sdf->Get < std::string > ("topic", "points").first;
-  this->dataPtr->pc_pub_ = this->dataPtr->rosnode_->advertise < sensor_msgs::PointCloud2 >
-    (topic, 1);
-
-  // TF frame ID
-  this->dataPtr->frame_id_ = _sdf->Get < std::string > ("frame_id", scoped_name).first;
-
-  // Rendering engine and scene
-  this->dataPtr->engine_name_ = _sdf->Get < std::string > ("engine", "ogre2").first;
-  this->dataPtr->scene_name_ = _sdf->Get < std::string > ("scene", "scene").first;
-}
-
-//////////////////////////////////////////////////
-void PointCloud::PostUpdate(
-  const ignition::gazebo::UpdateInfo & _info,
-  const ignition::gazebo::EntityComponentManager & _ecm)
-{
-  this->dataPtr->current_time_ = _info.simTime;
-
-  // Find engine / scene
-  if (!this->dataPtr->scene_) {
-    auto engine = ignition::rendering::engine(this->dataPtr->engine_name_);
-    if (!engine) {
-      return;
-    }
-
-    this->dataPtr->scene_ = engine->SceneByName(this->dataPtr->scene_name_);
-    if (!this->dataPtr->scene_) {
-      return;
-    }
-  }
-
-  // Get rendering objects
-  if (!this->dataPtr->depth_camera_ &&
-    (this->dataPtr->type_ == SensorType::RGBD_CAMERA ||
-    this->dataPtr->type_ == SensorType::DEPTH_CAMERA))
-  {
-    this->dataPtr->LoadDepthCamera(_ecm);
-  }
-  if (!this->dataPtr->rgb_camera_ &&
-    this->dataPtr->type_ == SensorType::RGBD_CAMERA)
-  {
-    this->dataPtr->LoadRgbCamera(_ecm);
-  }
-  if (!this->dataPtr->gpu_rays_ &&
-    this->dataPtr->type_ == SensorType::GPU_LIDAR)
-  {
-    this->dataPtr->LoadGpuRays(_ecm);
-  }
-}
-
-//////////////////////////////////////////////////
-void PointCloudPrivate::LoadDepthCamera(
-  const ignition::gazebo::EntityComponentManager & _ecm)
-{
-  // Sensor name scoped from the model
-  auto sensor_name =
-    ignition::gazebo::scopedName(this->entity_, _ecm, "::", false);
-  sensor_name = sensor_name.substr(sensor_name.find("::") + 2);
-
-  // Get sensor
-  auto sensor = this->scene_->SensorByName(sensor_name + "_depth");
-  if (!sensor) {
-    sensor = this->scene_->SensorByName(sensor_name);
-    if (!sensor) {
-      return;
-    }
-  }
-
-  this->depth_camera_ =
-    std::dynamic_pointer_cast < ignition::rendering::DepthCamera > (sensor);
-  if (!this->depth_camera_) {
-    ROS_ERROR_NAMED(
-      "ros_gz_point_cloud",
-      "Rendering sensor named [%s] is not a depth camera", sensor_name.c_str());
-    return;
-  }
-
-  this->depth_connection_ = this->depth_camera_->ConnectNewDepthFrame(
-    std::bind(
-      &PointCloudPrivate::OnNewDepthFrame, this,
-      std::placeholders::_1, std::placeholders::_2, std::placeholders::_3,
-      std::placeholders::_4, std::placeholders::_5));
-}
-
-//////////////////////////////////////////////////
-void PointCloudPrivate::LoadRgbCamera(
-  const ignition::gazebo::EntityComponentManager & _ecm)
-{
-  // Sensor name scoped from the model
-  auto sensor_name =
-    ignition::gazebo::scopedName(this->entity_, _ecm, "::", false);
-  sensor_name = sensor_name.substr(sensor_name.find("::") + 2);
-
-  // Get sensor
-  auto sensor = this->scene_->SensorByName(sensor_name);
-  if (!sensor) {
-    return;
-  }
-
-  this->rgb_camera_ = std::dynamic_pointer_cast < ignition::rendering::Camera > (sensor);
-  if (!this->rgb_camera_) {
-    ROS_ERROR_NAMED(
-      "ros_gz_point_cloud",
-      "Rendering sensor named [%s] is not an RGB camera", sensor_name.c_str());
-    return;
-  }
-
-  this->rgb_image_ = this->rgb_camera_->CreateImage();
-}
-
-//////////////////////////////////////////////////
-void PointCloudPrivate::LoadGpuRays(
-  const ignition::gazebo::EntityComponentManager & _ecm)
-{
-  // Sensor name scoped from the model
-  auto sensor_name =
-    ignition::gazebo::scopedName(this->entity_, _ecm, "::", false);
-  sensor_name = sensor_name.substr(sensor_name.find("::") + 2);
-
-  // Get sensor
-  auto sensor = this->scene_->SensorByName(sensor_name);
-  if (!sensor) {
-    return;
-  }
-
-  this->gpu_rays_ =
-    std::dynamic_pointer_cast < ignition::rendering::GpuRays > (sensor);
-  if (!this->gpu_rays_) {
-    ROS_ERROR_NAMED(
-      "ros_gz_point_cloud",
-      "Rendering sensor named [%s] is not a depth camera", sensor_name.c_str());
-    return;
-  }
-
-  this->gpu_rays_connection_ = this->gpu_rays_->ConnectNewGpuRaysFrame(
-    std::bind(
-      &PointCloudPrivate::OnNewDepthFrame, this,
-      std::placeholders::_1, std::placeholders::_2, std::placeholders::_3,
-      std::placeholders::_4, std::placeholders::_5));
-}
-
-//////////////////////////////////////////////////
-void PointCloudPrivate::OnNewDepthFrame(
-  const float * _scan,
-  unsigned int _width, unsigned int _height,
-  unsigned int _channels,
-  const std::string & _format)
-{
-  if (this->pc_pub_.getNumSubscribers() <= 0 || _height == 0 || _width == 0) {
-    return;
-  }
-
-  // Just sanity check, but don't prevent publishing
-  if (this->type_ == SensorType::RGBD_CAMERA && _channels != 1) {
-    ROS_WARN_NAMED(
-      "ros_gz_point_cloud",
-      "Expected depth image to have 1 channel, but it has [%i]", _channels);
-  }
-  if (this->type_ == SensorType::GPU_LIDAR && _channels != 3) {
-    ROS_WARN_NAMED(
-      "ros_gz_point_cloud",
-      "Expected GPU rays to have 3 channels, but it has [%i]", _channels);
-  }
-  if ((this->type_ == SensorType::RGBD_CAMERA ||
-    this->type_ == SensorType::DEPTH_CAMERA) && _format != "FLOAT32")
-  {
-    ROS_WARN_NAMED(
-      "ros_gz_point_cloud",
-      "Expected depth image to have [FLOAT32] format, but it has [%s]", _format.c_str());
-  }
-  if (this->type_ == SensorType::GPU_LIDAR && _format != "PF_FLOAT32_RGB") {
-    ROS_WARN_NAMED(
-      "ros_gz_point_cloud",
-      "Expected GPU rays to have [PF_FLOAT32_RGB] format, but it has [%s]", _format.c_str());
-  }
-
-  // Fill message
-  // Logic borrowed from
-  // https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_depth_camera.cpp
-  auto sec_nsec = ignition::math::durationToSecNsec(this->current_time_);
-
-  sensor_msgs::PointCloud2 msg;
-  msg.header.frame_id = this->frame_id_;
-  msg.header.stamp.sec = sec_nsec.first;
-  msg.header.stamp.nsec = sec_nsec.second;
-  msg.width = _width;
-  msg.height = _height;
-  msg.row_step = msg.point_step * _width;
-  msg.is_dense = true;
-
-  sensor_msgs::PointCloud2Modifier modifier(msg);
-  modifier.setPointCloud2FieldsByString(2, "xyz", "rgb");
-  modifier.resize(_width * _height);
-
-  sensor_msgs::PointCloud2Iterator < float > iter_x(msg, "x");
-  sensor_msgs::PointCloud2Iterator < float > iter_y(msg, "y");
-  sensor_msgs::PointCloud2Iterator < float > iter_z(msg, "z");
-  sensor_msgs::PointCloud2Iterator < uint8_t > iter_r(msg, "r");
-  sensor_msgs::PointCloud2Iterator < uint8_t > iter_g(msg, "g");
-  sensor_msgs::PointCloud2Iterator < uint8_t > iter_b(msg, "b");
-
-  if (this->rgb_camera_) {
-    this->rgb_camera_->Capture(this->rgb_image_);
-    fillImage(
-      this->rgb_image_msg_, sensor_msgs::image_encodings::RGB8, _height,
-      _width, 3 * _width, this->rgb_image_.Data < unsigned char > ());
-  }
-
-  // For depth calculation from image
-  double fl {0.0};
-  if (nullptr != this->depth_camera_) {
-    auto hfov = this->depth_camera_->HFOV().Radian();
-    fl = _width / (2.0 * tan(hfov / 2.0));
-  }
-
-  // For depth calculation from laser scan
-  double angle_step {0.0};
-  double vertical_angle_step {0.0};
-  double inclination {0.0};
-  double azimuth {0.0};
-  if (nullptr != this->gpu_rays_) {
-    angle_step = (this->gpu_rays_->AngleMax() - this->gpu_rays_->AngleMin()).Radian() /
-      (this->gpu_rays_->RangeCount() - 1);
-    vertical_angle_step = (this->gpu_rays_->VerticalAngleMax() -
-      this->gpu_rays_->VerticalAngleMin()).Radian() / (this->gpu_rays_->VerticalRangeCount() - 1);
-
-    // Angles of ray currently processing, azimuth is horizontal, inclination is vertical
-    inclination = this->gpu_rays_->VerticalAngleMin().Radian();
-    azimuth = this->gpu_rays_->AngleMin().Radian();
-  }
-
-  // For color calculation
-  uint8_t * image_src;
-  if (nullptr != this->rgb_camera_) {
-    image_src = (uint8_t *)(&(this->rgb_image_msg_.data[0]));
-  }
-
-  // Iterate over scan and populate point cloud
-  for (uint32_t j = 0; j < _height; ++j) {
-    double p_angle {0.0};
-    if (fl > 0 && _height > 1) {
-      p_angle = atan2((double)j - 0.5 * (double)(_height - 1), fl);
-    }
-
-    if (nullptr != this->gpu_rays_) {
-      azimuth = this->gpu_rays_->AngleMin().Radian();
-    }
-    for (uint32_t i = 0; i < _width;
-      ++i, ++iter_x, ++iter_y, ++iter_z, ++iter_r, ++iter_g, ++iter_b)
-    {
-      // Index of current point
-      auto index = j * _width * _channels + i * _channels;
-      double depth = _scan[index];
-
-      double y_angle {0.0};
-      if (fl > 0 && _width > 1) {
-        y_angle = atan2((double)i - 0.5 * (double)(_width - 1), fl);
-      }
-
-      if (nullptr != this->depth_camera_) {
-        // in optical frame
-        // hardcoded rotation rpy(-M_PI/2, 0, -M_PI/2) is built-in
-        // to urdf, where the *_optical_frame should have above relative
-        // rotation from the physical camera *_frame
-        *iter_x = depth * tan(y_angle);
-        *iter_y = depth * tan(p_angle);
-        *iter_z = depth;
-
-        // Clamp according to REP 117
-        if (depth > this->depth_camera_->FarClipPlane()) {
-          *iter_z = ignition::math::INF_D;
-          msg.is_dense = false;
-        }
-        if (depth < this->depth_camera_->NearClipPlane()) {
-          *iter_z = -ignition::math::INF_D;
-          msg.is_dense = false;
-        }
-      } else if (nullptr != this->gpu_rays_) {
-        // Convert spherical coordinates to Cartesian for pointcloud
-        // See https://en.wikipedia.org/wiki/Spherical_coordinate_system
-        *iter_x = depth * cos(inclination) * cos(azimuth);
-        *iter_y = depth * cos(inclination) * sin(azimuth);
-        *iter_z = depth * sin(inclination);
-      }
-
-      // Put image color data for each point
-      if (this->rgb_image_msg_.data.size() == _height * _width * 3) {
-        // color
-        *iter_r = image_src[i * 3 + j * _width * 3 + 0];
-        *iter_g = image_src[i * 3 + j * _width * 3 + 1];
-        *iter_b = image_src[i * 3 + j * _width * 3 + 2];
-      } else if (this->rgb_image_msg_.data.size() == _height * _width) {
-        // mono?
-        *iter_r = image_src[i + j * _width];
-        *iter_g = image_src[i + j * _width];
-        *iter_b = image_src[i + j * _width];
-      } else {
-        // no image
-        *iter_r = 0;
-        *iter_g = 0;
-        *iter_b = 0;
-      }
-      azimuth += angle_step;
-    }
-    inclination += vertical_angle_step;
-  }
-
-  this->pc_pub_.publish(msg);
-}
diff --git a/ros_gz_point_cloud/src/point_cloud.hh b/ros_gz_point_cloud/src/point_cloud.hh
deleted file mode 100644
index 437efac..0000000
--- a/ros_gz_point_cloud/src/point_cloud.hh
+++ /dev/null
@@ -1,76 +0,0 @@
-// Copyright 2019 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-#ifndef ROS_GZ_POINTCLOUD__POINTCLOUD_HPP_
-#define ROS_GZ_POINTCLOUD__POINTCLOUD_HPP_
-
-#include <memory>
-#include <ignition/gazebo/System.hh>
-
-namespace ros_gz_point_cloud
-{
-  // Forward declarations.
-  class PointCloudPrivate;
-
-  /// \brief System which publishes ROS PointCloud2 messages for RGBD or GPU lidar sensors.
-  ///
-  /// This plugin should be attached to an RGBD or GPU lidar sensor (i.e. <sensor...><plugin>)
-  ///
-  /// Important: load `gz::sim::systems::Sensors` as well, which will create the sensor.
-  ///
-  /// SDF parameters:
-  /// * `<namespace>`: Namespace for ROS node, defaults to sensor scoped name
-  /// * `<topic>`: ROS topic to publish to, defaults to "points"
-  /// * `<frame_id>`: TF frame name to populate message header, defaults to sensor scoped name
-  /// * `<engine>`: Render engine name, defaults to 'ogre2'
-  /// * `<scene>`: Scene name, defaults to 'scene'
-  class PointCloud:
-  public ignition::gazebo::System,
-  public ignition::gazebo::ISystemConfigure,
-  public ignition::gazebo::ISystemPostUpdate
-  {
-    /// \brief Constructor
-
-public:
-    PointCloud();
-
-    /// \brief Destructor
-
-public:
-    ~PointCloud() override = default;
-
-    // Documentation inherited
-
-public:
-    void Configure(
-      const ignition::gazebo::Entity & _entity,
-      const std::shared_ptr < const sdf::Element > & _sdf,
-      ignition::gazebo::EntityComponentManager & _ecm,
-      ignition::gazebo::EventManager & _eventMgr) override;
-
-    // Documentation inherited
-
-public:
-    void PostUpdate(
-      const ignition::gazebo::UpdateInfo & _info,
-      const ignition::gazebo::EntityComponentManager & _ecm) override;
-
-    /// \brief Private data pointer.
-
-private:
-    std::unique_ptr < PointCloudPrivate > dataPtr;
-  };
-}
-
-#endif
diff --git a/ros_gz_sim/CMakeLists.txt b/ros_gz_sim/CMakeLists.txt
index 78b938a..36d1b1a 100644
--- a/ros_gz_sim/CMakeLists.txt
+++ b/ros_gz_sim/CMakeLists.txt
@@ -13,6 +13,7 @@ endif()
 find_package(ament_cmake REQUIRED)
 find_package(rclcpp REQUIRED)
 find_package(std_msgs REQUIRED)
+find_package(gz-math7 REQUIRED)
 
 # TODO(CH3): Deprecated. Remove on tock.
 if("$ENV{GZ_VERSION}" STREQUAL "" AND NOT "$ENV{IGNITION_VERSION}" STREQUAL "")
@@ -55,23 +56,40 @@ elseif("$ENV{GZ_VERSION}" STREQUAL "garden")
 
   message(STATUS "Compiling against Gazebo Garden")
 # Default to Fortress
-else()
-  find_package(ignition-math6 REQUIRED)
-  set(GZ_MATH_VER ${ignition-math6_VERSION_MAJOR})
+elseif("$ENV{GZ_VERSION}" STREQUAL "harmonic")
+  find_package(gz-math7 REQUIRED)
+  set(GZ_MATH_VER ${gz-math7_VERSION_MAJOR})
 
-  find_package(ignition-transport11 REQUIRED)
-  set(GZ_TRANSPORT_VER ${ignition-transport11_VERSION_MAJOR})
+  find_package(gz-transport12 REQUIRED)
+  set(GZ_TRANSPORT_VER ${gz-transport12_VERSION_MAJOR})
 
-  find_package(ignition-msgs8 REQUIRED)
-  set(GZ_MSGS_VER ${ignition-msgs8_VERSION_MAJOR})
+  find_package(gz-msgs10 REQUIRED)
+  set(GZ_MSGS_VER ${gz-msgs9_VERSION_MAJOR})
 
-  find_package(ignition-gazebo6 REQUIRED)
-  set(GZ_SIM_VER ${ignition-gazebo6_VERSION_MAJOR})
+  find_package(gz-sim8 REQUIRED)
+  set(GZ_SIM_VER ${gz-sim7_VERSION_MAJOR})
 
-  set(GZ_TARGET_PREFIX ignition)
+  set(GZ_TARGET_PREFIX gz)
 
-  message(STATUS "Compiling against Gazebo Fortress")
+  message(STATUS "Compiling against Gazebo Garden")
+# Default to Fortress
+else()
 endif()
+  find_package(gz-math7 REQUIRED)
+  set(GZ_MATH_VER ${gz-math7_VERSION_MAJOR})
+
+  find_package(gz-transport13 REQUIRED)
+  set(GZ_TRANSPORT_VER ${gz-transport12_VERSION_MAJOR})
+
+  find_package(gz-msgs10 REQUIRED)
+  set(GZ_MSGS_VER ${gz-msgs9_VERSION_MAJOR})
+
+  find_package(gz-sim8 REQUIRED)
+  set(GZ_SIM_VER ${gz-sim7_VERSION_MAJOR})
+
+  set(GZ_TARGET_PREFIX gz)
+
+  message(STATUS "Compiling against Gazebo Garden")
 
 ign_find_package(gflags
     REQUIRED
@@ -85,9 +103,9 @@ ament_target_dependencies(create
 )
 target_link_libraries(create
   gflags
-  ${GZ_TARGET_PREFIX}-math${GZ_MATH_VER}::core
-  ${GZ_TARGET_PREFIX}-msgs${GZ_MSGS_VER}::core
-  ${GZ_TARGET_PREFIX}-transport${GZ_TRANSPORT_VER}::core
+  ${GZ_TARGET_PREFIX}-math7::core
+  ${GZ_TARGET_PREFIX}-msgs10::core
+  ${GZ_TARGET_PREFIX}-transport13::core
 )
 ament_target_dependencies(create std_msgs)
 
diff --git a/ros_gz_sim/src/create.cpp b/ros_gz_sim/src/create.cpp
index 016f8b5..0e8bee1 100644
--- a/ros_gz_sim/src/create.cpp
+++ b/ros_gz_sim/src/create.cpp
@@ -13,14 +13,14 @@
 // limitations under the License.
 
 #include <gflags/gflags.h>
-#include <ignition/msgs/entity_factory.pb.h>
+#include <gz/msgs/entity_factory.pb.h>
 
 #include <sstream>
 #include <string>
 
-#include <ignition/math/Pose3.hh>
-#include <ignition/msgs/Utility.hh>
-#include <ignition/transport/Node.hh>
+#include <gz/math/Pose3.hh>
+#include <gz/msgs/Utility.hh>
+#include <gz/transport/Node.hh>
 
 #include <rclcpp/rclcpp.hpp>
 #include <std_msgs/msg/string.hpp>
@@ -59,13 +59,13 @@ int main(int _argc, char ** _argv)
   std::string world_name = FLAGS_world;
   if (world_name.empty()) {
     // If caller doesn't provide a world name, get list of worlds from gz-sim server
-    ignition::transport::Node node;
+    gz::transport::Node node;
 
     bool executed{false};
     bool result{false};
     unsigned int timeout{5000};
     std::string service{"/gazebo/worlds"};
-    ignition::msgs::StringMsg_V worlds_msg;
+    gz::msgs::StringMsg worlds_msg;
 
     // This loop is here to allow the server time to download resources.
     while (rclcpp::ok() && !executed) {
@@ -83,12 +83,12 @@ int main(int _argc, char ** _argv)
       return -1;
     }
 
-    world_name = worlds_msg.data(0);
+    world_name = worlds_msg.data();
   }
   std::string service{"/world/" + world_name + "/create"};
 
   // Request message
-  ignition::msgs::EntityFactory req;
+  gz::msgs::EntityFactory req;
 
   // File
   if (!FLAGS_file.empty()) {
@@ -142,8 +142,8 @@ int main(int _argc, char ** _argv)
   }
 
   // Pose
-  ignition::math::Pose3d pose{FLAGS_x, FLAGS_y, FLAGS_z, FLAGS_R, FLAGS_P, FLAGS_Y};
-  ignition::msgs::Set(req.mutable_pose(), pose);
+  gz::math::Pose3d pose{FLAGS_x, FLAGS_y, FLAGS_z, FLAGS_R, FLAGS_P, FLAGS_Y};
+  gz::msgs::Set(req.mutable_pose(), pose);
 
   // Name
   if (!FLAGS_name.empty()) {
@@ -155,8 +155,8 @@ int main(int _argc, char ** _argv)
   }
 
   // Request
-  ignition::transport::Node node;
-  ignition::msgs::Boolean rep;
+  gz::transport::Node node;
+  gz::msgs::Boolean rep;
   bool result;
   unsigned int timeout = 5000;
   bool executed = node.Request(service, req, timeout, rep, result);
diff --git a/ros_ign/CHANGELOG.rst b/ros_ign/CHANGELOG.rst
deleted file mode 100644
index d435630..0000000
--- a/ros_ign/CHANGELOG.rst
+++ /dev/null
@@ -1,32 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros_ign
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.245.0 (2023-05-23)
---------------------
-
-0.244.11 (2023-05-23)
----------------------
-
-0.244.10 (2023-05-03)
----------------------
-
-0.244.9 (2022-11-03)
---------------------
-
-0.244.8 (2022-10-28)
---------------------
-
-0.244.7 (2022-10-12)
---------------------
-
-0.244.6 (2022-09-14)
---------------------
-* Restructured directories (`#296 <https://github.com/gazebosim/ros_gz/issues/296>`_)
-* Contributors: Alejandro Hernández Cordero
-
-0.244.5 (2022-09-12)
---------------------
-* ign -> gz : ros_gz Migration (Shims) (`#281 <https://github.com/gazebosim/ros_gz/issues/281>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: methylDragon
diff --git a/ros_ign/CMakeLists.txt b/ros_ign/CMakeLists.txt
deleted file mode 100644
index 80524e9..0000000
--- a/ros_ign/CMakeLists.txt
+++ /dev/null
@@ -1,10 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-project(ros_ign)
-find_package(ament_cmake REQUIRED)
-
-if(BUILD_TESTING)
-  find_package(ament_lint_auto REQUIRED)
-  ament_lint_auto_find_test_dependencies()
-endif()
-
-ament_package()
diff --git a/ros_ign/README.md b/ros_ign/README.md
deleted file mode 100644
index 7f2dcc8..0000000
--- a/ros_ign/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-# This is a shim meta-package
-For [ros_gz](https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz)
diff --git a/ros_ign/package.xml b/ros_ign/package.xml
deleted file mode 100644
index 550b899..0000000
--- a/ros_ign/package.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0"?>
-<?xml-model href="http://download.ros.org/schema/package_format2.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
-<package format="2">
-  <name>ros_ign</name>
-  <version>0.245.0</version>
-  <description>Shim meta-package to redirect to <a href="https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz">ros_gz</a>.</description>
-  <maintainer email="brandon@openrobotics.org">Brandon Ong</maintainer>
-  <license>Apache 2.0</license>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <exec_depend>ros_gz</exec_depend>
-
-  <exec_depend>ros_ign_bridge</exec_depend>
-  <exec_depend>ros_ign_gazebo</exec_depend>
-  <exec_depend>ros_ign_gazebo_demos</exec_depend>
-  <exec_depend>ros_ign_image</exec_depend>
-
-  <test_depend>ament_lint_auto</test_depend>
-  <test_depend>ament_lint_common</test_depend>
-
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-</package>
diff --git a/ros_ign_bridge/CHANGELOG.rst b/ros_ign_bridge/CHANGELOG.rst
deleted file mode 100644
index 87e1e63..0000000
--- a/ros_ign_bridge/CHANGELOG.rst
+++ /dev/null
@@ -1,70 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros_ign_bridge
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.245.0 (2023-05-23)
---------------------
-
-0.244.11 (2023-05-23)
----------------------
-
-0.244.10 (2023-05-03)
----------------------
-
-0.244.9 (2022-11-03)
---------------------
-
-0.244.8 (2022-10-28)
---------------------
-
-0.244.7 (2022-10-12)
---------------------
-* Merge branch 'ros2' into ports/galactic_to_ros2
-* Merge branch 'galactic' into ports/galactic_to_ros2
-* Make tests faster and more robust (`#272 <https://github.com/gazebosim/ros_gz/issues/272>`_)
-* Improve documentation around yaml configuration (`#271 <https://github.com/gazebosim/ros_gz/issues/271>`_)
-* Fix small typo in bridge README (`#270 <https://github.com/gazebosim/ros_gz/issues/270>`_)
-* Port NavSat (`#224 <https://github.com/gazebosim/ros_gz/issues/224>`_) from ROS 1 to ROS 2 (`#268 <https://github.com/gazebosim/ros_gz/issues/268>`_)
-  Co-authored-by: Tyler Howell <76003804+TyHowellWork@users.noreply.github.com>
-* Add ParamVec and bridge from Ignition (`#261 <https://github.com/gazebosim/ros_gz/issues/261>`_)
-  * Introduces `ros_ign_interfaces::msg::ParamVec` for storing a list of Parameters that are int, bool, double, or string.
-  * Introduces bridge for `ignition::msgs::param` to `ros_ign_interfaces::msg::ParamVec`
-  * Introduces bridge for `ignition::msgs::param_v` to `ros_ign_interfaces::msg::ParamVec`
-* Add support for converting Any <-> ParamValue (`#260 <https://github.com/gazebosim/ros_gz/issues/260>`_)
-  * Add support for converting Any <-> ParamValue
-* Feature: set QoS options to override durability (`#250 <https://github.com/gazebosim/ros_gz/issues/250>`_) (`#259 <https://github.com/gazebosim/ros_gz/issues/259>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-  Co-authored-by: Daisuke Nishimatsu <42202095+wep21@users.noreply.github.com>
-* Add node component and yaml-configured bridge node (`#238 <https://github.com/gazebosim/ros_gz/issues/238>`_)
-  * Refactor in support of adding yaml-configured node
-* Add rssi to Dataframe.msg (`#249 <https://github.com/gazebosim/ros_gz/issues/249>`_)
-  * Adding rssi field to ros_ign_interfaces/Dataframe.msg
-* Use the python generator for tests as well (`#234 <https://github.com/gazebosim/ros_gz/issues/234>`_)
-  * Use the python generator for tests as well
-* Generate boilerplate files from Python scripts (`#233 <https://github.com/gazebosim/ros_gz/issues/233>`_)
-  The way that we add factories can be a bit error-prone, as there are a lot of strings that cannot be checked at compilation time. This changes several of the boilerplate files to be generated automatically by python scripts, in line with how ros1_bridge does it.
-* [galactic] Backport GuiCamera, StringVec, TrackVisual, VideoRecord (`#241 <https://github.com/gazebosim/ros_gz/issues/241>`_)
-  * [ros_ign_interfaces] Add more interface definitions.
-  * Add converion functions for the added messages
-  * Update the factory factory function with the new messages
-  * Add new messages to docs
-  * Add test cases for the new messages conversions
-  Co-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>
-* Add Dataframe message and bridging (`#239 <https://github.com/gazebosim/ros_gz/issues/239>`_)
-* Factory interface needs virtual destructor (`#232 <https://github.com/gazebosim/ros_gz/issues/232>`_)
-* Optional "lazy" bridge subscribers (`#225 <https://github.com/gazebosim/ros_gz/issues/225>`_)
-  This allows for the bridge to be created in such a way that it is "lazy". In this case "lazy" means:
-  * The publication (output) side of the bridge is always on and actively looking for subscriptions.
-  * The subscription (input) side of the bridge is only turned on in the case that there are subscriptions on the output side.
-* Contributors: Carlos Agüero, Louise Poubel, Michael Carroll
-
-0.244.6 (2022-09-14)
---------------------
-* Restructured directories (`#296 <https://github.com/gazebosim/ros_gz/issues/296>`_)
-* Contributors: Alejandro Hernández Cordero
-
-0.244.5 (2022-09-12)
---------------------
-* ign -> gz : ros_gz Migration (Shims) (`#281 <https://github.com/gazebosim/ros_gz/issues/281>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: methylDragon
diff --git a/ros_ign_bridge/CMakeLists.txt b/ros_ign_bridge/CMakeLists.txt
deleted file mode 100644
index 7be505b..0000000
--- a/ros_ign_bridge/CMakeLists.txt
+++ /dev/null
@@ -1,29 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-project(ros_ign_bridge)
-
-# Default to C++14
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 14)
-endif()
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
-endif()
-
-find_package(ament_cmake REQUIRED)
-find_package(ament_index_cpp REQUIRED)
-
-add_executable(parameter_bridge src/parameter_bridge_shim.cpp)
-ament_target_dependencies(parameter_bridge ament_index_cpp)
-
-add_executable(static_bridge src/static_bridge_shim.cpp)
-ament_target_dependencies(static_bridge ament_index_cpp)
-
-ament_export_dependencies(ament_index_cpp ros_gz_bridge)
-
-install(TARGETS
-  parameter_bridge
-  static_bridge
-  DESTINATION lib/${PROJECT_NAME}
-)
-
-ament_package()
diff --git a/ros_ign_bridge/README.md b/ros_ign_bridge/README.md
deleted file mode 100644
index e93d8f2..0000000
--- a/ros_ign_bridge/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-# This is a shim package
-For [ros_gz_bridge](https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_bridge)
diff --git a/ros_ign_bridge/package.xml b/ros_ign_bridge/package.xml
deleted file mode 100644
index 83b2ba7..0000000
--- a/ros_ign_bridge/package.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
-<package format="3">
-  <name>ros_ign_bridge</name>
-  <version>0.245.0</version>
-  <description>Shim package to redirect to ros_gz_bridge.</description>
-  <maintainer email="brandon@openrobotics.org">Brandon Ong</maintainer>
-
-  <license>Apache 2.0</license>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <buildtool_depend>ament_index_cpp</buildtool_depend>
-
-  <depend>ros_gz_bridge</depend>
-
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-</package>
diff --git a/ros_ign_bridge/src/parameter_bridge_shim.cpp b/ros_ign_bridge/src/parameter_bridge_shim.cpp
deleted file mode 100644
index df6882b..0000000
--- a/ros_ign_bridge/src/parameter_bridge_shim.cpp
+++ /dev/null
@@ -1,43 +0,0 @@
-// Copyright 2022 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Shim to redirect "ros_ign_bridge parameter_bridge" call to "ros_gz_bridge parameter_bridge"
-
-#include <sstream>
-#include <iostream>
-#include <stdlib.h>
-
-#include <ament_index_cpp/get_package_prefix.hpp>
-
-
-int main(int argc, char * argv[])
-{
-  std::stringstream cli_call;
-
-  cli_call << ament_index_cpp::get_package_prefix("ros_gz_bridge")
-           << "/lib/ros_gz_bridge/parameter_bridge";
-
-  if (argc > 1)
-  {
-    for (int i = 1; i < argc; i++)
-      cli_call << " " << argv[i];
-  }
-
-  std::cerr << "[ros_ign_bridge] is deprecated! "
-            << "Redirecting to use [ros_gz_bridge] instead!"
-            << std::endl << std::endl;
-  system(cli_call.str().c_str());
-
-  return 0;
-}
diff --git a/ros_ign_bridge/src/static_bridge_shim.cpp b/ros_ign_bridge/src/static_bridge_shim.cpp
deleted file mode 100644
index 4ee0fdd..0000000
--- a/ros_ign_bridge/src/static_bridge_shim.cpp
+++ /dev/null
@@ -1,43 +0,0 @@
-// Copyright 2022 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Shim to redirect "ros_ign_bridge static_bridge" call to "ros_gz_bridge static_bridge"
-
-#include <sstream>
-#include <iostream>
-#include <stdlib.h>
-
-#include <ament_index_cpp/get_package_prefix.hpp>
-
-
-int main(int argc, char * argv[])
-{
-  std::stringstream cli_call;
-
-  cli_call << ament_index_cpp::get_package_prefix("ros_gz_bridge")
-           << "/lib/ros_gz_bridge/static_bridge";
-
-  if (argc > 1)
-  {
-    for (int i = 1; i < argc; i++)
-      cli_call << " " << argv[i];
-  }
-
-  std::cerr << "[ros_ign_bridge] is deprecated! "
-            << "Redirecting to use [ros_gz_bridge] instead!"
-            << std::endl << std::endl;
-  system(cli_call.str().c_str());
-
-  return 0;
-}
diff --git a/ros_ign_gazebo/CHANGELOG.rst b/ros_ign_gazebo/CHANGELOG.rst
deleted file mode 100644
index 23e70f0..0000000
--- a/ros_ign_gazebo/CHANGELOG.rst
+++ /dev/null
@@ -1,48 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros_ign_gazebo
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.245.0 (2023-05-23)
---------------------
-
-0.244.11 (2023-05-23)
----------------------
-
-0.244.10 (2023-05-03)
----------------------
-
-0.244.9 (2022-11-03)
---------------------
-
-0.244.8 (2022-10-28)
---------------------
-
-0.244.7 (2022-10-12)
---------------------
-* Fix launch substitutions for ign_args (`#309 <https://github.com/gazebosim/ros_gz/issues/309>`_)
-  * Fix launch substitutions for ign_args
-* Merge branch 'ros2' into ports/galactic_to_ros2
-* Merge branch 'galactic' into ports/galactic_to_ros2
-* Add ROS2 version of Stopwatch (`#287 <https://github.com/gazebosim/ros_gz/issues/287>`_)
-* Add debugger option in launch (`#286 <https://github.com/gazebosim/ros_gz/issues/286>`_)
-  * add debugger option in launch
-  * remove xterm dependency; rely on x-terminal-emulator from update-alternatives
-* [galactic] Backport: Add std_msgs as dependency of ros_ign_gazebo (`#264 <https://github.com/gazebosim/ros_gz/issues/264>`_)
-  Co-authored-by: Kenji Brameld <kenjibrameld@gmail.com>
-* Contributors: Michael Carroll, andermi
-
-0.244.6 (2022-09-14)
---------------------
-* Restructured directories (`#296 <https://github.com/gazebosim/ros_gz/issues/296>`_)
-* Contributors: Alejandro Hernández Cordero
-
-0.244.5 (2022-09-12)
---------------------
-* Fix missing msgs include and packages.xml deps (`#292 <https://github.com/gazebosim/ros_gz/issues/292>`_)
-  * Fix missing msgs include and packages.xml deps
-  * Add additional conditions to support gz sim invocation
-  * Fix cpplint
-* Add missing GZ_VERSION ticktocks (`#289 <https://github.com/gazebosim/ros_gz/issues/289>`_)
-* ign -> gz : ros_gz Migration (Shims) (`#281 <https://github.com/gazebosim/ros_gz/issues/281>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: methylDragon
diff --git a/ros_ign_gazebo/CMakeLists.txt b/ros_ign_gazebo/CMakeLists.txt
deleted file mode 100644
index debdbb5..0000000
--- a/ros_ign_gazebo/CMakeLists.txt
+++ /dev/null
@@ -1,55 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-project(ros_ign_gazebo)
-
-# Default to C++14
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 14)
-endif()
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
-endif()
-
-find_package(ament_cmake REQUIRED)
-find_package(ament_index_cpp REQUIRED)
-
-add_executable(create
-  src/create_shim.cpp
-)
-ament_target_dependencies(create ament_index_cpp)
-
-ament_export_dependencies(
-  ament_index_cpp
-  ros_gz_bridge
-)
-
-# TODO(CH3): Deprecated. Remove on tock.
-if("$ENV{GZ_VERSION}" STREQUAL "" AND NOT "$ENV{IGNITION_VERSION}" STREQUAL "")
-  message(DEPRECATION "Environment variable [IGNITION_VERSION] is deprecated. Use [GZ_VERSION] instead.")
-  set(ENV{GZ_VERSION} $ENV{IGNITION_VERSION})
-endif()
-
-# Edifice
-if("$ENV{GZ_VERSION}" STREQUAL "edifice")
-  find_package(ignition-gazebo5 REQUIRED)
-  message(STATUS "Compiling against Gazebo Edifice")
-# Garden
-elseif("$ENV{GZ_VERSION}" STREQUAL "garden")
-  find_package(gz-sim7 REQUIRED)
-  message(STATUS "Compiling against Gazebo Garden")
-# Default to Fortress
-else()
-  find_package(ignition-gazebo6 REQUIRED)
-  message(STATUS "Compiling against Gazebo Fortress")
-endif()
-
-install(FILES
-  "${CMAKE_CURRENT_SOURCE_DIR}/launch/ign_gazebo.launch.py"
-  DESTINATION share/${PROJECT_NAME}/launch
-)
-
-install(TARGETS
-  create
-  DESTINATION lib/${PROJECT_NAME}
-)
-
-ament_package()
diff --git a/ros_ign_gazebo/README.md b/ros_ign_gazebo/README.md
deleted file mode 100644
index 2df45d4..0000000
--- a/ros_ign_gazebo/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-# This is a shim package
-For [ros_gz_sim](https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_sim)
diff --git a/ros_ign_gazebo/launch/ign_gazebo.launch.py b/ros_ign_gazebo/launch/ign_gazebo.launch.py
deleted file mode 100644
index e8cb534..0000000
--- a/ros_ign_gazebo/launch/ign_gazebo.launch.py
+++ /dev/null
@@ -1,33 +0,0 @@
-# Copyright 2020 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-"""Launch Gazebo Sim with command line arguments."""
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-def generate_launch_description():
-    ros_gz_sim_dir = get_package_share_directory('ros_gz_sim')
-    launch_dir = os.path.join(ros_gz_sim_dir, 'launch')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(os.path.join(launch_dir, 'gz_sim.launch.py'))
-        )
-    ])
diff --git a/ros_ign_gazebo/package.xml b/ros_ign_gazebo/package.xml
deleted file mode 100644
index 82f8425..0000000
--- a/ros_ign_gazebo/package.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
-<package format="3">
-  <name>ros_ign_gazebo</name>
-  <version>0.245.0</version>
-  <description>Shim package to redirect to ros_gz_sim.</description>
-  <maintainer email="brandon@openrobotics.org">Brandon Ong</maintainer>
-
-  <license>Apache 2.0</license>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <buildtool_depend>ament_index_cpp</buildtool_depend>
-
-  <depend>ros_gz_sim</depend>
-
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-</package>
diff --git a/ros_ign_gazebo/src/create_shim.cpp b/ros_ign_gazebo/src/create_shim.cpp
deleted file mode 100644
index 8a6d366..0000000
--- a/ros_ign_gazebo/src/create_shim.cpp
+++ /dev/null
@@ -1,43 +0,0 @@
-// Copyright 2022 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Shim to redirect "ros_ign_bridge parameter_bridge" call to "ros_gz_sim parameter_bridge"
-
-#include <sstream>
-#include <iostream>
-#include <stdlib.h>
-
-#include <ament_index_cpp/get_package_prefix.hpp>
-
-
-int main(int argc, char * argv[])
-{
-  std::stringstream cli_call;
-
-  cli_call << ament_index_cpp::get_package_prefix("ros_gz_sim")
-           << "/lib/ros_gz_sim/create";
-
-  if (argc > 1)
-  {
-    for (int i = 1; i < argc; i++)
-      cli_call << " " << argv[i];
-  }
-
-  std::cerr << "[ros_ign_gazebo] is deprecated! "
-            << "Redirecting to use [ros_gz_sim] instead!"
-            << std::endl << std::endl;
-  system(cli_call.str().c_str());
-
-  return 0;
-}
diff --git a/ros_ign_gazebo_demos/CHANGELOG.rst b/ros_ign_gazebo_demos/CHANGELOG.rst
deleted file mode 100644
index 940860b..0000000
--- a/ros_ign_gazebo_demos/CHANGELOG.rst
+++ /dev/null
@@ -1,38 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros_ign_gazebo_demos
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.245.0 (2023-05-23)
---------------------
-
-0.244.11 (2023-05-23)
----------------------
-
-0.244.10 (2023-05-03)
----------------------
-* Humbly bringing the Joy to gazebo. (`#353 <https://github.com/gazebosim/ros_gz/issues/353>`_)
-* Contributors: Benjamin Perseghetti
-
-0.244.9 (2022-11-03)
---------------------
-
-0.244.8 (2022-10-28)
---------------------
-
-0.244.7 (2022-10-12)
---------------------
-* Merge branch 'galactic' into ports/galactic_to_ros2
-* Port NavSat (`#224 <https://github.com/gazebosim/ros_gz/issues/224>`_) from ROS 1 to ROS 2 (`#268 <https://github.com/gazebosim/ros_gz/issues/268>`_)
-  Co-authored-by: Tyler Howell <76003804+TyHowellWork@users.noreply.github.com>
-* Contributors: Michael Carroll
-
-0.244.6 (2022-09-14)
---------------------
-* Restructured directories (`#296 <https://github.com/gazebosim/ros_gz/issues/296>`_)
-* Contributors: Alejandro Hernández Cordero
-
-0.244.5 (2022-09-12)
---------------------
-* ign -> gz : ros_gz Migration (Shims) (`#281 <https://github.com/gazebosim/ros_gz/issues/281>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: methylDragon
diff --git a/ros_ign_gazebo_demos/CMakeLists.txt b/ros_ign_gazebo_demos/CMakeLists.txt
deleted file mode 100644
index 68b53fe..0000000
--- a/ros_ign_gazebo_demos/CMakeLists.txt
+++ /dev/null
@@ -1,17 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-project(ros_ign_gazebo_demos)
-
-find_package(ament_cmake REQUIRED)
-
-if(BUILD_TESTING)
-  find_package(ament_lint_auto REQUIRED)
-  ament_lint_auto_find_test_dependencies()
-endif()
-
-install(
-  DIRECTORY
-    launch/
-  DESTINATION share/${PROJECT_NAME}/launch
-)
-
-ament_package()
diff --git a/ros_ign_gazebo_demos/README.md b/ros_ign_gazebo_demos/README.md
deleted file mode 100644
index 18ccd42..0000000
--- a/ros_ign_gazebo_demos/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-# This is a shim package
-For [ros_gz_sim_demos](https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_sim_demos)
diff --git a/ros_ign_gazebo_demos/launch/air_pressure.launch.py b/ros_ign_gazebo_demos/launch/air_pressure.launch.py
deleted file mode 100644
index f2e97f7..0000000
--- a/ros_ign_gazebo_demos/launch/air_pressure.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'air_pressure.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/battery.launch.py b/ros_ign_gazebo_demos/launch/battery.launch.py
deleted file mode 100644
index b85a0f2..0000000
--- a/ros_ign_gazebo_demos/launch/battery.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'battery.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/camera.launch.py b/ros_ign_gazebo_demos/launch/camera.launch.py
deleted file mode 100644
index 40cf213..0000000
--- a/ros_ign_gazebo_demos/launch/camera.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'camera.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/depth_camera.launch.py b/ros_ign_gazebo_demos/launch/depth_camera.launch.py
deleted file mode 100644
index 0eda5b4..0000000
--- a/ros_ign_gazebo_demos/launch/depth_camera.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'depth_camera.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/diff_drive.launch.py b/ros_ign_gazebo_demos/launch/diff_drive.launch.py
deleted file mode 100644
index aa1f70a..0000000
--- a/ros_ign_gazebo_demos/launch/diff_drive.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'diff_drive.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/gpu_lidar.launch.py b/ros_ign_gazebo_demos/launch/gpu_lidar.launch.py
deleted file mode 100644
index 49df928..0000000
--- a/ros_ign_gazebo_demos/launch/gpu_lidar.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'gpu_lidar.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/gpu_lidar_bridge.launch.py b/ros_ign_gazebo_demos/launch/gpu_lidar_bridge.launch.py
deleted file mode 100644
index d4c8997..0000000
--- a/ros_ign_gazebo_demos/launch/gpu_lidar_bridge.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'gpu_lidar_bridge.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/image_bridge.launch.py b/ros_ign_gazebo_demos/launch/image_bridge.launch.py
deleted file mode 100644
index 421a1c0..0000000
--- a/ros_ign_gazebo_demos/launch/image_bridge.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'image_bridge.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/imu.launch.py b/ros_ign_gazebo_demos/launch/imu.launch.py
deleted file mode 100644
index 6a580ae..0000000
--- a/ros_ign_gazebo_demos/launch/imu.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'imu.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/joint_states.launch.py b/ros_ign_gazebo_demos/launch/joint_states.launch.py
deleted file mode 100644
index 004a880..0000000
--- a/ros_ign_gazebo_demos/launch/joint_states.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'joint_states.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/magnetometer.launch.py b/ros_ign_gazebo_demos/launch/magnetometer.launch.py
deleted file mode 100644
index 3b66da7..0000000
--- a/ros_ign_gazebo_demos/launch/magnetometer.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'magnetometer.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/rgbd_camera.launch.py b/ros_ign_gazebo_demos/launch/rgbd_camera.launch.py
deleted file mode 100644
index ba3e890..0000000
--- a/ros_ign_gazebo_demos/launch/rgbd_camera.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'rgbd_camera.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/rgbd_camera_bridge.launch.py b/ros_ign_gazebo_demos/launch/rgbd_camera_bridge.launch.py
deleted file mode 100644
index d7812aa..0000000
--- a/ros_ign_gazebo_demos/launch/rgbd_camera_bridge.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'rgbd_camera_bridge.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/robot_description_publisher.launch.py b/ros_ign_gazebo_demos/launch/robot_description_publisher.launch.py
deleted file mode 100755
index f2158c6..0000000
--- a/ros_ign_gazebo_demos/launch/robot_description_publisher.launch.py
+++ /dev/null
@@ -1,37 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(
-                    pkg_ros_gz_sim_demos,
-                    'launch',
-                    'robot_description_publisher.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/tf_bridge.launch.py b/ros_ign_gazebo_demos/launch/tf_bridge.launch.py
deleted file mode 100644
index 2b6fd52..0000000
--- a/ros_ign_gazebo_demos/launch/tf_bridge.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'tf_bridge.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/launch/triggered_camera.launch.py b/ros_ign_gazebo_demos/launch/triggered_camera.launch.py
deleted file mode 100644
index b5a852c..0000000
--- a/ros_ign_gazebo_demos/launch/triggered_camera.launch.py
+++ /dev/null
@@ -1,34 +0,0 @@
-# Copyright 2022 Open Source Robotics Foundation, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import os
-
-from ament_index_python.packages import get_package_share_directory
-
-from launch import LaunchDescription
-from launch.actions import IncludeLaunchDescription
-from launch.launch_description_sources import PythonLaunchDescriptionSource
-
-
-def generate_launch_description():
-    print('ros_ign_gazebo_demos is deprecated! Please use ros_gz_sim_demos instead!')
-
-    pkg_ros_gz_sim_demos = get_package_share_directory('ros_gz_sim_demos')
-
-    return LaunchDescription([
-        IncludeLaunchDescription(
-            PythonLaunchDescriptionSource(
-                os.path.join(pkg_ros_gz_sim_demos, 'launch', 'triggered_camera.launch.py')),
-        )
-    ])
diff --git a/ros_ign_gazebo_demos/package.xml b/ros_ign_gazebo_demos/package.xml
deleted file mode 100644
index cbe829a..0000000
--- a/ros_ign_gazebo_demos/package.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<package format="3">
-  <name>ros_ign_gazebo_demos</name>
-  <version>0.245.0</version>
-  <description>Shim package to redirect to ros_gz_sim_demos.</description>
-  <license>Apache 2.0</license>
-  <maintainer email="brandon@openrobotics.org">Brandon Ong</maintainer>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <exec_depend>ros_gz_sim_demos</exec_depend>
-
-  <test_depend>ament_lint_auto</test_depend>
-  <test_depend>ament_lint_common</test_depend>
-
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-</package>
diff --git a/ros_ign_image/CHANGELOG.rst b/ros_ign_image/CHANGELOG.rst
deleted file mode 100644
index 7f6c6fe..0000000
--- a/ros_ign_image/CHANGELOG.rst
+++ /dev/null
@@ -1,34 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros_ign_image
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.245.0 (2023-05-23)
---------------------
-
-0.244.11 (2023-05-23)
----------------------
-
-0.244.10 (2023-05-03)
----------------------
-
-0.244.9 (2022-11-03)
---------------------
-
-0.244.8 (2022-10-28)
---------------------
-
-0.244.7 (2022-10-12)
---------------------
-* Merge branch 'ros2' into ports/galactic_to_ros2
-* Contributors: Michael Carroll
-
-0.244.6 (2022-09-14)
---------------------
-* Restructured directories (`#296 <https://github.com/gazebosim/ros_gz/issues/296>`_)
-* Contributors: Alejandro Hernández Cordero
-
-0.244.5 (2022-09-12)
---------------------
-* ign -> gz : ros_gz Migration (Shims) (`#281 <https://github.com/gazebosim/ros_gz/issues/281>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: methylDragon
diff --git a/ros_ign_image/CMakeLists.txt b/ros_ign_image/CMakeLists.txt
deleted file mode 100644
index 5fa4b91..0000000
--- a/ros_ign_image/CMakeLists.txt
+++ /dev/null
@@ -1,26 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-
-project(ros_ign_image)
-
-# Default to C++14
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 14)
-endif()
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
-endif()
-
-find_package(ament_cmake REQUIRED)
-find_package(ament_index_cpp REQUIRED)
-
-add_executable(image_bridge src/image_bridge_shim.cpp)
-ament_target_dependencies(image_bridge ament_index_cpp)
-
-ament_export_dependencies(ament_index_cpp ros_gz_image)
-
-install(TARGETS
-  image_bridge
-  DESTINATION lib/${PROJECT_NAME}
-)
-
-ament_package()
diff --git a/ros_ign_image/README.md b/ros_ign_image/README.md
deleted file mode 100644
index 517ccdd..0000000
--- a/ros_ign_image/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-# This is a shim package
-For [ros_gz_image](https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_image)
diff --git a/ros_ign_image/package.xml b/ros_ign_image/package.xml
deleted file mode 100644
index 4b772d4..0000000
--- a/ros_ign_image/package.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
-<package format="3">
-  <name>ros_ign_image</name>
-  <version>0.245.0</version>
-  <description>Shim package to redirect to ros_gz_image.</description>
-  <maintainer email="brandon@openrobotics.org">Brandon Ong</maintainer>
-
-  <license>Apache 2.0</license>
-
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <buildtool_depend>ament_index_cpp</buildtool_depend>
-
-  <depend>ros_gz_image</depend>
-
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-</package>
diff --git a/ros_ign_image/src/image_bridge_shim.cpp b/ros_ign_image/src/image_bridge_shim.cpp
deleted file mode 100644
index 0d44a1c..0000000
--- a/ros_ign_image/src/image_bridge_shim.cpp
+++ /dev/null
@@ -1,43 +0,0 @@
-// Copyright 2022 Open Source Robotics Foundation, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-// Shim to redirect "ros_ign_image image_bridge" call to "ros_gz_image image_bridge"
-
-#include <sstream>
-#include <iostream>
-#include <stdlib.h>
-
-#include <ament_index_cpp/get_package_prefix.hpp>
-
-
-int main(int argc, char * argv[])
-{
-  std::stringstream cli_call;
-
-  cli_call << ament_index_cpp::get_package_prefix("ros_gz_image")
-           << "/lib/ros_gz_image/image_bridge";
-
-  if (argc > 1)
-  {
-    for (int i = 1; i < argc; i++)
-      cli_call << " " << argv[i];
-  }
-
-  std::cerr << "[ros_ign_bridge] is deprecated! "
-            << "Redirecting to use [ros_gz_image] instead!"
-            << std::endl << std::endl;
-  system(cli_call.str().c_str());
-
-  return 0;
-}
diff --git a/ros_ign_interfaces/CHANGELOG.rst b/ros_ign_interfaces/CHANGELOG.rst
deleted file mode 100644
index 4de73f5..0000000
--- a/ros_ign_interfaces/CHANGELOG.rst
+++ /dev/null
@@ -1,49 +0,0 @@
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Changelog for package ros_ign_interfaces
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-0.245.0 (2023-05-23)
---------------------
-
-0.244.11 (2023-05-23)
----------------------
-
-0.244.10 (2023-05-03)
----------------------
-
-0.244.9 (2022-11-03)
---------------------
-
-0.244.8 (2022-10-28)
---------------------
-
-0.244.7 (2022-10-12)
---------------------
-* Merge branch 'ros2' into ports/galactic_to_ros2
-* Merge branch 'galactic' into ports/galactic_to_ros2
-* Add ParamVec and bridge from Ignition (`#261 <https://github.com/gazebosim/ros_gz/issues/261>`_)
-  * Introduces `ros_ign_interfaces::msg::ParamVec` for storing a list of Parameters that are int, bool, double, or string.
-  * Introduces bridge for `ignition::msgs::param` to `ros_ign_interfaces::msg::ParamVec`
-  * Introduces bridge for `ignition::msgs::param_v` to `ros_ign_interfaces::msg::ParamVec`
-* Add rssi to Dataframe.msg (`#249 <https://github.com/gazebosim/ros_gz/issues/249>`_)
-  * Adding rssi field to ros_ign_interfaces/Dataframe.msg
-* [galactic] Backport GuiCamera, StringVec, TrackVisual, VideoRecord (`#241 <https://github.com/gazebosim/ros_gz/issues/241>`_)
-  * [ros_ign_interfaces] Add more interface definitions.
-  * Add converion functions for the added messages
-  * Update the factory factory function with the new messages
-  * Add new messages to docs
-  * Add test cases for the new messages conversions
-  Co-authored-by: Ivan Santiago Paunovic <ivanpauno@ekumenlabs.com>
-* Add Dataframe message and bridging (`#239 <https://github.com/gazebosim/ros_gz/issues/239>`_)
-* Contributors: Carlos Agüero, Michael Carroll
-
-0.244.6 (2022-09-14)
---------------------
-* Restructured directories (`#296 <https://github.com/gazebosim/ros_gz/issues/296>`_)
-* Contributors: Alejandro Hernández Cordero
-
-0.244.5 (2022-09-12)
---------------------
-* ign -> gz : ros_gz Migration (Shims) (`#281 <https://github.com/gazebosim/ros_gz/issues/281>`_)
-  Co-authored-by: Louise Poubel <louise@openrobotics.org>
-* Contributors: methylDragon
diff --git a/ros_ign_interfaces/CMakeLists.txt b/ros_ign_interfaces/CMakeLists.txt
deleted file mode 100644
index b397466..0000000
--- a/ros_ign_interfaces/CMakeLists.txt
+++ /dev/null
@@ -1,49 +0,0 @@
-cmake_minimum_required(VERSION 3.5)
-project(ros_ign_interfaces)
-
-if(NOT CMAKE_CXX_STANDARD)
-  set(CMAKE_CXX_STANDARD 14)
-endif()
-
-if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  add_compile_options(-Wall -Wextra -Wpedantic)
-endif()
-
-find_package(ament_cmake REQUIRED)
-find_package(builtin_interfaces REQUIRED)
-find_package(std_msgs REQUIRED)
-find_package(geometry_msgs REQUIRED)
-find_package(ros_gz_interfaces REQUIRED)
-find_package(rosidl_default_generators REQUIRED)
-
-set(msg_files
-  "msg/Contact.msg"
-  "msg/Contacts.msg"
-  "msg/Entity.msg"
-  "msg/EntityFactory.msg"
-  "msg/GuiCamera.msg"
-  "msg/JointWrench.msg"
-  "msg/Light.msg"
-  "msg/StringVec.msg"
-  "msg/TrackVisual.msg"
-  "msg/VideoRecord.msg"
-  "msg/WorldControl.msg"
-  "msg/WorldReset.msg"
-)
-
-set(srv_files
-  "srv/ControlWorld.srv"
-  "srv/DeleteEntity.srv"
-  "srv/SetEntityPose.srv"
-  "srv/SpawnEntity.srv"
-)
-
-rosidl_generate_interfaces(${PROJECT_NAME}
-  ${msg_files}
-  ${srv_files}
-  DEPENDENCIES builtin_interfaces std_msgs geometry_msgs ros_gz_interfaces
-  ADD_LINTER_TESTS
-)
-
-ament_export_dependencies(rosidl_default_runtime)
-ament_package()
diff --git a/ros_ign_interfaces/README.md b/ros_ign_interfaces/README.md
deleted file mode 100644
index 15a7faf..0000000
--- a/ros_ign_interfaces/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-# This is a shim package
-For [ros_gz_interfaces](https://github.com/gazebosim/ros_gz/tree/ros2/ros_gz_interfaces)
diff --git a/ros_ign_interfaces/msg/Contact.msg b/ros_ign_interfaces/msg/Contact.msg
deleted file mode 100644
index 98d2cef..0000000
--- a/ros_ign_interfaces/msg/Contact.msg
+++ /dev/null
@@ -1,6 +0,0 @@
-ros_gz_interfaces/Entity collision1        # Contact collision1
-ros_gz_interfaces/Entity collision2        # Contact collision2
-geometry_msgs/Vector3[] positions           # List of contact position
-geometry_msgs/Vector3[] normals             # List of contact normals
-float64[] depths                            # List of penetration depths
-ros_gz_interfaces/JointWrench[] wrenches   # List of joint wrenches including forces/torques
diff --git a/ros_ign_interfaces/msg/Contacts.msg b/ros_ign_interfaces/msg/Contacts.msg
deleted file mode 100644
index 40232e5..0000000
--- a/ros_ign_interfaces/msg/Contacts.msg
+++ /dev/null
@@ -1,2 +0,0 @@
-std_msgs/Header header                  # Time stamp
-ros_gz_interfaces/Contact[] contacts   # List of contacts
diff --git a/ros_ign_interfaces/msg/Entity.msg b/ros_ign_interfaces/msg/Entity.msg
deleted file mode 100644
index b785c7e..0000000
--- a/ros_ign_interfaces/msg/Entity.msg
+++ /dev/null
@@ -1,13 +0,0 @@
-# Entity type: constant definition
-uint8 NONE      = 0
-uint8 LIGHT     = 1
-uint8 MODEL     = 2
-uint8 LINK      = 3
-uint8 VISUAL    = 4
-uint8 COLLISION = 5
-uint8 SENSOR    = 6
-uint8 JOINT     = 7
-
-uint64 id      # Entity unique identifier accross all types. Defaults to 0
-string name    # Entity name, which is not guaranteed to be unique.
-uint8 type     # Entity type.
diff --git a/ros_ign_interfaces/msg/EntityFactory.msg b/ros_ign_interfaces/msg/EntityFactory.msg
deleted file mode 100644
index 4576c00..0000000
--- a/ros_ign_interfaces/msg/EntityFactory.msg
+++ /dev/null
@@ -1,11 +0,0 @@
-string name                             # New name for the entity, overrides the name on the SDF
-bool allow_renaming false               # Whether the server is allowed to rename the entity in case of
-                                        # overlap with existing entities.
-
-# Only one method is supported at a time (sdf,sdf_filename,clone_name)
-string sdf                              # SDF description in string format
-string sdf_filename                     # Full path to SDF file.
-string clone_name                       # Name of entity to clone
-
-geometry_msgs/Pose pose                 # Pose where the entity will be spawned in the world.
-string relative_to "world"              # Pose is defined relative to the frame of this entity. 
diff --git a/ros_ign_interfaces/msg/GuiCamera.msg b/ros_ign_interfaces/msg/GuiCamera.msg
deleted file mode 100644
index d45fd9b..0000000
--- a/ros_ign_interfaces/msg/GuiCamera.msg
+++ /dev/null
@@ -1,12 +0,0 @@
-# Message for a GUI Camera.
-
-# Optional header data.
-std_msgs/Header header
-
-string name
-string view_controller
-geometry_msgs/Pose pose
-TrackVisual track
-
-# Type of projection: "perspective" or "orthographic".
-string projection_type
diff --git a/ros_ign_interfaces/msg/JointWrench.msg b/ros_ign_interfaces/msg/JointWrench.msg
deleted file mode 100644
index 2da8909..0000000
--- a/ros_ign_interfaces/msg/JointWrench.msg
+++ /dev/null
@@ -1,8 +0,0 @@
-std_msgs/Header header                  # Time stamp
-std_msgs/String body_1_name             # Body 1 name string
-std_msgs/UInt32 body_1_id               # Body 1 id
-std_msgs/String body_2_name             # Body 2 name string
-std_msgs/UInt32 body_2_id               # Body 2 id
-
-geometry_msgs/Wrench body_1_wrench      # Body 1 wrench
-geometry_msgs/Wrench body_2_wrench      # Body 2 wrench
diff --git a/ros_ign_interfaces/msg/Light.msg b/ros_ign_interfaces/msg/Light.msg
deleted file mode 100644
index 911e20b..0000000
--- a/ros_ign_interfaces/msg/Light.msg
+++ /dev/null
@@ -1,29 +0,0 @@
-std_msgs/Header header            # Optional header data
-
-string name                       # Light name
-
-# Light type: constant definition
-uint8 POINT       = 0
-uint8 SPOT        = 1
-uint8 DIRECTIONAL = 2
-
-uint8 type                        # Light type (from constant definitions)
-
-geometry_msgs/Pose pose           # Light pose
-std_msgs/ColorRGBA diffuse        # Light diffuse emission
-std_msgs/ColorRGBA specular       # Light specular emission
-float32 attenuation_constant      # Constant variable in attenuation formula
-float32 attenuation_linear        # Linear variable in attenuation formula
-float32 attenuation_quadratic     # Quadratic variable in attenuation formula
-geometry_msgs/Vector3 direction   # Light direction
-float32 range                     # Light range
-bool cast_shadows                 # Enable/disable shadow casting
-float32 spot_inner_angle          # Spotlight inner cone angle
-float32 spot_outer_angle          # Spotlight outer cone angle
-float32 spot_falloff              # Falloff between inner and outer cone
-
-uint32 id                         # Unique id of the light
-
-uint32 parent_id                  # Unique id of the light's parent
-
-float32 intensity                 # Light intensity
diff --git a/ros_ign_interfaces/msg/StringVec.msg b/ros_ign_interfaces/msg/StringVec.msg
deleted file mode 100644
index 15a7dda..0000000
--- a/ros_ign_interfaces/msg/StringVec.msg
+++ /dev/null
@@ -1,7 +0,0 @@
-# A message for a vector of string data.
-
-# Optional header data.
-std_msgs/Header header
-
-# The vector of strings.
-string[] data
diff --git a/ros_ign_interfaces/msg/TrackVisual.msg b/ros_ign_interfaces/msg/TrackVisual.msg
deleted file mode 100644
index c09f478..0000000
--- a/ros_ign_interfaces/msg/TrackVisual.msg
+++ /dev/null
@@ -1,33 +0,0 @@
-# Message for a tracking a rendering::Visual with a rendering::Camera.
-
-# Optional header data.
-std_msgs/Header header
-
-# Name of the visual to track.
-string name
-
-# Id of the visual to track.
-uint32 id
-
-# True to have the tracking camera inherit the orientation of
-# the tracked visual.
-bool inherit_orientation
-
-# Minimum follow distance.
-float64 min_dist
-
-# Maximum follow distance.
-float64 max_dist
-
-# If set to true, the position of the camera is fixed.
-bool is_static
-
-# If set to true, the position of the camera is relative to the.
-# model reference frame.
-bool use_model_frame
-
-# Position of the camera.
-geometry_msgs/Vector3 xyz
-
-# If set to true, the camera inherits the yaw rotation of the model.
-bool inherit_yaw
diff --git a/ros_ign_interfaces/msg/VideoRecord.msg b/ros_ign_interfaces/msg/VideoRecord.msg
deleted file mode 100644
index 02bafde..0000000
--- a/ros_ign_interfaces/msg/VideoRecord.msg
+++ /dev/null
@@ -1,16 +0,0 @@
-# A message that allows for control of video recording functions.
-
-# Optional header data.
-std_msgs/Header header
-
-# True to start video recording.
-bool start
-
-# True to stop video recording.
-bool stop
-
-# Video encoding format, e.g. "mp4", "ogv".
-string format
-
-# filename of the recorded video.
-string save_filename
diff --git a/ros_ign_interfaces/msg/WorldControl.msg b/ros_ign_interfaces/msg/WorldControl.msg
deleted file mode 100644
index efa22fb..0000000
--- a/ros_ign_interfaces/msg/WorldControl.msg
+++ /dev/null
@@ -1,7 +0,0 @@
-bool pause                                  # Paused state.      
-bool step                                   #
-uint32 multi_step 0                         # Paused after stepping multi_step.
-ros_gz_interfaces/WorldReset reset         #
-uint32 seed                                 #
-builtin_interfaces/Time run_to_sim_time     # A simulation time in the future to run to and 
-                                            # then pause.
diff --git a/ros_ign_interfaces/msg/WorldReset.msg b/ros_ign_interfaces/msg/WorldReset.msg
deleted file mode 100644
index 46f5971..0000000
--- a/ros_ign_interfaces/msg/WorldReset.msg
+++ /dev/null
@@ -1,3 +0,0 @@
-bool all false            # Reset time and model
-bool time_only false      # Reset time only
-bool model_only false     # Reset model only
diff --git a/ros_ign_interfaces/package.xml b/ros_ign_interfaces/package.xml
deleted file mode 100644
index 1f939ed..0000000
--- a/ros_ign_interfaces/package.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<package format="3">
-  <name>ros_ign_interfaces</name>
-  <version>0.245.0</version>
-  <description>Shim package to redirect to ros_gz_interfaces.</description>
-  <license>Apache 2.0</license>
-  <maintainer email="brandon@openrobotics.org">Brandon Ong</maintainer>
-  <author email="zhenpeng.ge@qq.com">Zhenpeng Ge</author>
-  <buildtool_depend>ament_cmake</buildtool_depend>
-  <buildtool_depend>rosidl_default_generators</buildtool_depend>
-
-  <build_depend>builtin_interfaces</build_depend>
-  <build_depend>ros_gz_interfaces</build_depend>
-  <build_depend>std_msgs</build_depend>
-  <build_depend>geometry_msgs</build_depend>
-
-  <exec_depend>builtin_interfaces</exec_depend>
-  <exec_depend>ros_gz_interfaces</exec_depend>
-  <exec_depend>std_msgs</exec_depend>
-  <exec_depend>geometry_msgs</exec_depend>
-  <exec_depend>rosidl_default_runtime</exec_depend>
-
-  <test_depend>ament_lint_common</test_depend>
-  <member_of_group>rosidl_interface_packages</member_of_group>
-  <export>
-    <build_type>ament_cmake</build_type>
-  </export>
-</package>
diff --git a/ros_ign_interfaces/srv/ControlWorld.srv b/ros_ign_interfaces/srv/ControlWorld.srv
deleted file mode 100644
index d8e41f2..0000000
--- a/ros_ign_interfaces/srv/ControlWorld.srv
+++ /dev/null
@@ -1,3 +0,0 @@
-ros_gz_interfaces/WorldControl world_control  # Message to Control world in Gazebo Sim
----
-bool success                                   # Return true if control is successful.
diff --git a/ros_ign_interfaces/srv/DeleteEntity.srv b/ros_ign_interfaces/srv/DeleteEntity.srv
deleted file mode 100644
index 13b3e1f..0000000
--- a/ros_ign_interfaces/srv/DeleteEntity.srv
+++ /dev/null
@@ -1,3 +0,0 @@
-ros_gz_interfaces/Entity entity  # Gazebo Sim entity to be deleted. 
----
-bool success                      # Return true if deletion is successful.
diff --git a/ros_ign_interfaces/srv/SetEntityPose.srv b/ros_ign_interfaces/srv/SetEntityPose.srv
deleted file mode 100644
index b749488..0000000
--- a/ros_ign_interfaces/srv/SetEntityPose.srv
+++ /dev/null
@@ -1,4 +0,0 @@
-ros_gz_interfaces/Entity entity    # Gazebo Sim entity.
-geometry_msgs/Pose pose             # Pose of entity.
----
-bool success                        # Return true if set successfully.
diff --git a/ros_ign_interfaces/srv/SpawnEntity.srv b/ros_ign_interfaces/srv/SpawnEntity.srv
deleted file mode 100644
index 35d5df5..0000000
--- a/ros_ign_interfaces/srv/SpawnEntity.srv
+++ /dev/null
@@ -1,3 +0,0 @@
-ros_gz_interfaces/EntityFactory entity_factory  # Message to create a new entity
----
-bool success                                     # Return true if spawned successfully.
=== ./src/rqt2/ros-perception/image_common (git) ===
=== ./src/rqt2/ros-perception/vision_opencv (git) ===
=== ./src/rqt2/ros2/message_filters (git) ===
=== ./src/rqt2/rqt2/python_qt_binding (git) ===
=== ./src/rqt2/rqt2/qt_gui_core (git) ===
diff --git a/qt_gui_cpp/CMakeLists.txt b/qt_gui_cpp/CMakeLists.txt
index 9f55620..af40fce 100644
--- a/qt_gui_cpp/CMakeLists.txt
+++ b/qt_gui_cpp/CMakeLists.txt
@@ -62,10 +62,10 @@ target_link_libraries(${PROJECT_NAME}
 add_subdirectory(src/qt_gui_cpp_shiboken)
 add_subdirectory(src/qt_gui_cpp_sip)
 
-message(STATUS "Python binding generators: ${qt_gui_cpp_BINDINGS}")
-if(NOT qt_gui_cpp_BINDINGS)
-  message(FATAL_ERROR "No Python binding generator found.")
-endif()
+# message(STATUS "Python binding generators: ${qt_gui_cpp_BINDINGS}")
+# if(NOT qt_gui_cpp_BINDINGS)
+#   message(FATAL_ERROR "No Python binding generator found.")
+# endif()
 
 install(FILES plugin.xml
   DESTINATION share/${PROJECT_NAME})
=== ./src/rqt2/rqt2/rqt (git) ===
=== ./src/rqt2/rqt2/rqt_console (git) ===
=== ./src/rqt2/rqt2/rqt_image_view (git) ===
=== ./src/rqt2/rqt2/rqt_msg (git) ===
=== ./src/rqt2/rqt2/rqt_plot (git) ===
=== ./src/rqt2/rqt2/rqt_publisher (git) ===
=== ./src/rqt2/rqt2/rqt_py_console (git) ===
=== ./src/rqt2/rqt2/rqt_service_caller (git) ===
=== ./src/rqt2/rqt2/rqt_shell (git) ===
=== ./src/rqt2/rqt2/rqt_srv (git) ===
=== ./src/rqt2/rqt2/rqt_top (git) ===
=== ./src/rviz (git) ===
diff --git a/rviz_default_plugins/CMakeLists.txt b/rviz_default_plugins/CMakeLists.txt
index 1d3d6432..cb341f7e 100644
--- a/rviz_default_plugins/CMakeLists.txt
+++ b/rviz_default_plugins/CMakeLists.txt
@@ -27,6 +27,11 @@ else()
   set(SKIP_DISPLAY_TESTS "SKIP_TEST")
 endif()
 
+#include_directories(/home/saa/src/robo/gazebo_ws/src/gz-math/include/)
+#include_directories(/home/saa/src/robo/gazebo_ws/src/gz-math/include/gz/math/)
+
+find_package(gz-math7 REQUIRED)
+
 # options and directories for visual tests (see visual_testing_framework documentation)
 option(EnableVisualTests "decides whether or not to enable the tests")
 
@@ -61,7 +66,7 @@ find_package(Qt5 REQUIRED COMPONENTS Widgets Test)
 
 find_package(geometry_msgs REQUIRED)
 
-find_package(ignition-math6 REQUIRED)
+find_package(gz-math7 REQUIRED)
 
 find_package(image_transport REQUIRED)
 find_package(interactive_markers REQUIRED)
@@ -259,7 +264,7 @@ target_link_libraries(rviz_default_plugins PUBLIC
 )
 
 target_link_libraries(rviz_default_plugins PRIVATE
-  ignition-math6
+  gz-math7
   resource_retriever::resource_retriever
 )
 
diff --git a/rviz_default_plugins/src/rviz_default_plugins/robot/robot_link.cpp b/rviz_default_plugins/src/rviz_default_plugins/robot/robot_link.cpp
index c2d315a1..fd553015 100644
--- a/rviz_default_plugins/src/rviz_default_plugins/robot/robot_link.cpp
+++ b/rviz_default_plugins/src/rviz_default_plugins/robot/robot_link.cpp
@@ -50,11 +50,11 @@
 
 #include <QFileInfo>  // NOLINT cpplint cannot handle include order here
 
-#include <ignition/math/Inertial.hh>
-#include <ignition/math/MassMatrix3.hh>
-#include <ignition/math/Pose3.hh>
-#include <ignition/math/Quaternion.hh>
-#include <ignition/math/Vector3.hh>
+#include <gz/math/Inertial.hh>
+#include <gz/math/MassMatrix3.hh>
+#include <gz/math/Pose3.hh>
+#include <gz/math/Quaternion.hh>
+#include <gz/math/Vector3.hh>
 
 #include "resource_retriever/retriever.hpp"
 
@@ -871,18 +871,18 @@ void RobotLink::createMass(const urdf::LinkConstSharedPtr & link)
 void RobotLink::createInertia(const urdf::LinkConstSharedPtr & link)
 {
   if (link->inertial) {
-    const ignition::math::Vector3d i_xx_yy_zz(
+    const gz::math::Vector3d i_xx_yy_zz(
       link->inertial->ixx,
       link->inertial->iyy,
       link->inertial->izz);
-    const ignition::math::Vector3d Ixyxzyz(
+    const gz::math::Vector3d Ixyxzyz(
       link->inertial->ixy,
       link->inertial->ixz,
       link->inertial->iyz);
-    ignition::math::MassMatrix3d mass_matrix(link->inertial->mass, i_xx_yy_zz, Ixyxzyz);
+    gz::math::MassMatrix3d mass_matrix(link->inertial->mass, i_xx_yy_zz, Ixyxzyz);
 
-    ignition::math::Vector3d box_scale;
-    ignition::math::Quaterniond box_rot;
+    gz::math::Vector3d box_scale;
+    gz::math::Quaterniond box_rot;
     if (!mass_matrix.EquivalentBox(box_scale, box_rot)) {
       // Invalid inertia, load with default scale
       if (link->parent_joint && link->parent_joint->type != urdf::Joint::FIXED) {
=== ./src/xacro (git) ===
